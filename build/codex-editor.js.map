{"version":3,"sources":["webpack:///webpack/bootstrap 0c979e981b6898c45a7c","webpack:///./src/components/__module.js","webpack:///./src/components/dom.js","webpack:///./src/components/utils.js","webpack:///./src/components/block.js","webpack:///./src/codex.js","webpack:///./src/components/polyfills.js","webpack:///./src/components/modules nonrecursive [^_](blockManager.js|caret.js|events.js|renderer.js|toolbar.js|toolbox.js|tools.js|ui.js)$","webpack:///./src/components/modules/blockManager.js","webpack:///./src/components/modules/caret.js","webpack:///./src/components/modules/events.js","webpack:///./src/components/modules/renderer.js","webpack:///./src/components/modules/toolbar.js","webpack:///./src/components/modules/toolbox.js","webpack:///./src/components/modules/tools.js","webpack:///./src/components/modules/ui.js","webpack:///./src/styles/main.css","webpack:///./node_modules/css-loader/lib/css-base.js"],"names":["Module","config","new","target","TypeError","Editor","Dom","tagName","classNames","attributes","el","document","createElement","Array","isArray","classList","add","attrName","parent","elements","forEach","appendChild","selector","querySelector","querySelectorAll","node","nodeType","Node","ELEMENT_NODE","Util","msg","type","args","window","console","e","chains","success","fallback","Promise","resolve","reduce","previousValue","currentValue","iteration","then","waitNextBlock","length","chainData","successCallback","fallbackCallback","function","data","catch","collection","prototype","slice","call","object","Object","keys","constructor","Block","tool","_html","compose","wrapper","$","make","CSS","content","html","contentless","emptyText","textContent","trim","emptyMedia","hasMedia","mediaTags","join","state","isEmpty","selected","remove","modules","editorModules","map","module","exports","moduleInstances","configuration","init","start","log","error","constructModules","configureModules","displayName","name","getModulesDiff","diff","moduleName","prepareDecorator","prepare","Tools","UI","items","Renderer","render","BlockManager","holderId","placeholder","sanitizer","p","b","a","hideToolbar","tools","toolsConfig","initialBlock","Element","matches","msMatchesSelector","webkitMatchesSelector","closest","s","documentElement","contains","parentElement","parentNode","_blocks","currentBlockIndex","blocks","Blocks","nodes","redactor","Proxy","set","get","toolName","toolInstance","construct","block","insert","element","index","indexOf","childNode","isElement","parentFirstLevelBlock","currentNode","Error","array","currentBlock","workingArea","push","replace","deleteCount","splice","previousBlock","insertAdjacentElement","nextBlock","targetBlock","newBlock","_","children","instance","isNaN","Number","Caret","lastBlock","Events","subscribers","eventName","callback","previousData","currentHandler","newData","i","insertBlock","sequence","item","Toolbar","actions","plusButton","settingsToggler","removeBlockButton","settings","pluginSettings","defaultSettings","toolbar","append","addEventListener","plusButtonClicked","event","Toolbox","makeRemoveBlockButton","makeBlockSettingsPanel","close","defaultToolbarHeight","defaultOffset","newYCoordinate","offsetTop","style","transform","Math","floor","toolbarOpened","toggle","hide","plusButtonHidden","show","toolbox","buttons","opened","addTools","toolsAvailable","addTool","displayInToolbox","iconClassName","button","toolboxButton","title","dataset","buttonClicked","toolButton","toolClasses","irreplaceable","move","toolboxOpened","open","toolsUnavailable","enableLineBreaks","hasOwnProperty","reject","sequenceData","getListOfPrepareFunctions","toolPreparationList","toolClass","plugin","defaultConfig","available","holder","loadStyles","bindEvents","getElementById","editorWrapper","editorZone","styles","require","tag","toString","head","redactorClicked","clickedNode","setCurrentBlockByChildNode","setToTheLastBlock","isInitialBlock","isInitial","isEmptyBlock"],"mappings":"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AAP,GAAqBnH,OAAOmH,WAA5B,GAA0C,KAApE;AACA,iBAAKnH,MAAL,CAAYoH,KAAZ,GAAoBpH,OAAOoH,KAAP,IAAgB,EAApC;AACA,iBAAKpH,MAAL,CAAYqH,WAAZ,GAA0BrH,OAAOqH,WAAP,IAAsB,EAAhD;AACA,iBAAKrH,MAAL,CAAYmD,IAAZ,GAAmBnD,OAAOmD,IAAP,IAAe,EAAlC;;AAEA;;;AAGA,gBAAI,CAACnD,OAAOsH,YAAZ,EAA0B;;AAEtB,qBAAK,KAAKtH,MAAL,CAAYsH,YAAjB,IAAiC,KAAKtH,MAAL,CAAYoH,KAA7C;AAAoD;AAApD;AAEH,aAJD,MAIO;;AAEH,qBAAKpH,MAAL,CAAYsH,YAAZ,GAA2BtH,OAAOsH,YAAlC;AAEH;AAEJ;;AAED;;;;AAxFJ;AAAA,4BA4FwB;;AAEhB,mBAAO,KAAKtH,MAAZ;AAEH;AAhGL;;AAAA;AAAA;;AA+NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,U;;;;;;;;;AClaA;;;;;AAKA,IAAI,CAACuH,QAAQjE,SAAR,CAAkBkE,OAAvB,EACID,QAAQjE,SAAR,CAAkBkE,OAAlB,GAA4BD,QAAQjE,SAAR,CAAkBmE,iBAAlB,IACxBF,QAAQjE,SAAR,CAAkBo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","file":"codex-editor.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0c979e981b6898c45a7c","/**\n * @abstract\n * @class      Module\n * @classdesc  All modules inherits from this class.\n *\n * @typedef {Module} Module\n * @property {Object} config - Editor user settings\n * @property {Object} Editor - List of Editor modules\n */\nexport default class Module {\n\n    /**\n     * @constructor\n     *\n     * @param  {EditorConfig} config\n     */\n    constructor({ config } = {}) {\n\n        if (new.target === Module) {\n\n            throw new TypeError('Constructors for abstract class Module are not allowed.');\n\n        }\n\n        /**\n         * @type {EditorConfig}\n         */\n        this.config = config;\n\n        /**\n         * @type {EditorComponents}\n         */\n        this.Editor = null;\n\n    }\n\n    /**\n     * Editor modules setter\n     *\n     * @param Editor\n     * @param Editor.modules {@link CodexEditor#moduleInstances}\n     * @param Editor.config {@link CodexEditor#configuration}\n     */\n    set state(Editor) {\n\n        this.Editor = Editor;\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/__module.js","/**\n * DOM manupulations helper\n */\nexport default class Dom {\n\n    /**\n     * Helper for making Elements with classname and attributes\n     *\n     * @param  {string} tagName           - new Element tag name\n     * @param  {array|string} classNames  - list or name of CSS classname(s)\n     * @param  {Object} attributes        - any attributes\n     * @return {Element}\n     */\n    static make(tagName, classNames = null, attributes = {}) {\n\n        var el = document.createElement(tagName);\n\n        if ( Array.isArray(classNames) ) {\n\n            el.classList.add(...classNames);\n\n        } else if( classNames ) {\n\n            el.classList.add(classNames);\n\n        }\n\n        for (let attrName in attributes) {\n\n            el[attrName] = attributes[attrName];\n\n        }\n\n        return el;\n\n    }\n\n    /**\n     * Append one or several elements to the parent\n     *\n     * @param  {Element} parent    - where to append\n     * @param  {Element|Element[]} - element ore elements list\n     */\n    static append(parent, elements) {\n\n        if ( Array.isArray(elements) ) {\n\n            elements.forEach( el => parent.appendChild(el) );\n\n        } else {\n\n            parent.appendChild(elements);\n\n        }\n\n    }\n\n    /**\n     * Selector Decorator\n     *\n     * Returns first match\n     *\n     * @param {Element} el - element we searching inside. Default - DOM Document\n     * @param {String} selector - searching string\n     *\n     * @returns {Element}\n     */\n    static find(el = document, selector) {\n\n        return el.querySelector(selector);\n\n    }\n\n    /**\n     * Selector Decorator.\n     *\n     * Returns all matches\n     *\n     * @param {Element} el - element we searching inside. Default - DOM Document\n     * @param {String} selector - searching string\n     * @returns {NodeList}\n     */\n    static findAll(el = document, selector) {\n\n        return el.querySelectorAll(selector);\n\n    }\n\n    /**\n     * Check if object is DOM node\n     *\n     * @param {Object} node\n     * @returns {boolean}\n     */\n    static isElement(node) {\n\n        return node && typeof node === 'object' && node.nodeType && node.nodeType === Node.ELEMENT_NODE;\n\n    }\n\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/dom.js","/**\n * Codex Editor Util\n */\nexport default class Util {\n\n    /**\n     * Custom logger\n     *\n     * @param {string} msg  - message\n     * @param {string} type - logging type 'log'|'warn'|'error'|'info'\n     * @param {*} args      - argument to log with a message\n     */\n    static log(msg, type, args) {\n\n        type = type || 'log';\n\n        if (!args) {\n\n            args  = msg || 'undefined';\n            msg  = '[codex-editor]:      %o';\n\n        } else {\n\n            msg  = '[codex-editor]:      ' + msg;\n\n        }\n\n        try{\n\n            if ( 'console' in window && window.console[ type ] ) {\n\n                if ( args ) window.console[ type ]( msg, args );\n                else window.console[ type ]( msg );\n\n            }\n\n        } catch(e) {\n            // do nothing\n        }\n\n    }\n\n    /**\n     * @typedef {Object} ChainData\n     * @property {Object} data - data that will be passed to the success or fallback\n     * @property {Function} function - function's that must be called asynchronically\n     */\n\n    /**\n     * Fires a promise sequence asyncronically\n     *\n     * @param {Object[]} chains - list or ChainData's\n     * @param {Function} success - success callback\n     * @param {Function} fallback - callback that fires in case of errors\n     *\n     * @return {Promise}\n     */\n    static sequence(chains, success = () => {}, fallback = () => {}) {\n\n        return new Promise(function (resolve) {\n\n            /**\n             * pluck each element from queue\n             * First, send resolved Promise as previous value\n             * Each plugins \"prepare\" method returns a Promise, that's why\n             * reduce current element will not be able to continue while can't get\n             * a resolved Promise\n             */\n            chains.reduce(function (previousValue, currentValue, iteration) {\n\n                return previousValue\n                    .then(() => waitNextBlock(currentValue, success, fallback))\n                    .then(() => {\n\n                        // finished\n                        if (iteration === chains.length - 1) {\n\n                            resolve();\n\n                        }\n\n                    });\n\n            }, Promise.resolve());\n\n        });\n\n        /**\n         * Decorator\n         *\n         * @param {ChainData} chainData\n         *\n         * @param {Function} successCallback\n         * @param {Function} fallbackCallback\n         *\n         * @return {Promise}\n         */\n        function waitNextBlock(chainData, successCallback, fallbackCallback) {\n\n            return new Promise(function (resolve) {\n\n                chainData.function()\n                    .then(() => {\n\n                        successCallback(chainData.data);\n\n                    })\n                    .then(resolve)\n                    .catch(function () {\n\n                        fallbackCallback(chainData.data);\n\n                        // anyway, go ahead even it falls\n                        resolve();\n\n                    });\n\n            });\n\n        }\n\n    }\n\n    /**\n     * Make array from array-like collection\n     *\n     * @param {*} collection\n     *\n     * @return {Array}\n     */\n    static array(collection) {\n\n        return Array.prototype.slice.call(collection);\n\n    }\n\n    /**\n     * Checks if object is empty\n     *\n     * @param {Object} object\n     * @return {boolean}\n     */\n    static isEmpty(object) {\n\n        return Object.keys(object).length === 0 && object.constructor === Object;\n\n    }\n\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/utils.js","/**\n *\n * @class Block\n * @classdesc This class describes editor`s block, including block`s HTMLElement, data and tool\n *\n * @property {Tool} tool — current block tool (Paragraph, for example)\n * @property {Object} CSS — block`s css classes\n *\n */\n\n\nexport default class Block {\n\n    /**\n     * @constructor\n     *\n     * @param {Object} tool — current block plugin`s instance\n     */\n    constructor(tool) {\n\n        this.tool = tool;\n\n        this._html = this.compose();\n\n    }\n\n    /**\n     * CSS classes for the Block\n     * @return {{wrapper: string, content: string}}\n     */\n    static get CSS() {\n\n        return {\n            wrapper: 'ce-block',\n            content: 'ce-block__content',\n            selected: 'ce-block--selected'\n        };\n\n    }\n\n    /**\n     * Make default block wrappers and put tool`s content there\n     *\n     * @returns {HTMLDivElement}\n     * @private\n     */\n    compose() {\n\n        let wrapper = $.make('div', Block.CSS.wrapper),\n            content = $.make('div', Block.CSS.content);\n\n        content.appendChild(this.tool.html);\n        wrapper.appendChild(content);\n\n        return wrapper;\n\n    }\n\n    /**\n     * Get block`s HTML\n     *\n     * @returns {HTMLDivElement}\n     */\n    get html() {\n\n        return this._html;\n\n    }\n\n    /**\n     * Check block for emptiness\n     *\n     * @return {Boolean}\n     */\n    get isEmpty() {\n\n        /**\n         * Allow Tool to represent decorative contentless blocks: for example \"* * *\"-tool\n         * That Tools are not empty\n         */\n        if (this.tool.contentless) {\n\n            return false;\n\n        }\n\n        let emptyText = this._html.textContent.trim().length === 0,\n            emptyMedia = !this.hasMedia;\n\n        return emptyText && emptyMedia;\n\n    }\n\n    /**\n     * Check if block has a media content such as images, iframes and other\n     * @return {Boolean}\n     */\n    get hasMedia() {\n\n        /**\n         * This tags represents media-content\n         * @type {string[]}\n         */\n        const mediaTags = [\n            'img',\n            'iframe',\n            'video',\n            'audio',\n            'source',\n            'input',\n            'textarea',\n            'twitterwidget'\n        ];\n\n        return !!this._html.querySelector(mediaTags.join(','));\n\n    }\n\n    /**\n     * Set selected state\n     * @param {Boolean} state - 'true' to select, 'false' to remove selection\n     */\n    set selected(state) {\n\n        /**\n         * We don't need to mark Block as Selected when it is not empty\n         */\n        if (state === true && !this.isEmpty) {\n\n            this._html.classList.add(Block.CSS.selected);\n\n        } else {\n\n            this._html.classList.remove(Block.CSS.selected);\n\n        }\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/block.js","/**\n * Codex Editor\n *\n * Short Description (눈_눈;)\n * @version 2.0.0\n *\n * How to start?\n * Example:\n *           new CodexEditor({\n *                holderId : 'codex-editor',\n *                initialBlock : 'paragraph',\n *                placeholder : 'Write your story....',\n *                tools: {\n *                    quote: Quote,\n *                    anotherTool : AnotherTool\n *                },\n *                toolsConfig: {\n *                     quote: {\n *                        iconClassname : 'quote-icon',\n *                        displayInToolbox : true,\n *                        enableLineBreaks : true\n *                     },\n *                     anotherTool: {\n *                        iconClassname : 'tool-icon'\n *                     }\n *                 }\n *            });\n *\n * - tools is an object: {\n *       pluginName: PluginClass,\n *       .....\n *   }\n * - toolsConfig is an additional configuration that uses Codex Editor API\n *      iconClassname - CSS classname of toolbox icon\n *      displayInToolbox - if you want to see your Tool in toolbox hided in \"plus\" button, than set \"True\". By default : \"False\"\n *      enableLineBreaks - by default enter creates new block that set as initialblock, but if you set this property \"True\", enter will break the lines in current block\n *\n * @author CodeX-Team <https://ifmo.su>\n *\n */\n\n/**\n * @typedef {CodexEditor} CodexEditor - editor class\n */\n\n/**\n * @typedef {Object} EditorConfig\n * @property {String} holderId           - Element to append Editor\n * @property {Array} data                - Blocks list in JSON-format\n * @property {Object} tools              - Map for used Tools in format { name : Class, ... }\n * @property {String} initialBlock       - This Tool will be added by default\n * @property {String} placeholder        - First Block placeholder\n * @property {Object} sanitizer          - @todo fill desc\n * @property {Boolean} hideToolbar       - @todo fill desc\n * @property {Object} toolsConfig        - tools configuration {@link Tools#ToolsConfig}\n */\n\n/**\n * Dynamically imported utils\n *\n * @typedef {Dom}   $      - {@link components/dom.js}\n * @typedef {Util}  _      - {@link components/utils.js}\n */\n\n'use strict';\n\n/**\n * Apply polyfills\n */\nimport 'components/polyfills';\n\n/**\n * Require Editor modules places in components/modules dir\n */\n// eslint-disable-next-line\nlet modules = editorModules.map( module => require('./components/modules/' + module ));\n\n/**\n * @class\n *\n * @classdesc CodeX Editor base class\n *\n * @property this.config - all settings\n * @property this.moduleInstances - constructed editor components\n *\n * @type {CodexEditor}\n */\nmodule.exports = class CodexEditor {\n\n    /** Editor version */\n    static get version() {\n\n        return VERSION;\n\n    }\n\n    /**\n     * @param {EditorConfig} config - user configuration\n     *\n     */\n    constructor(config) {\n\n        /**\n         * Configuration object\n         * @type {EditorConfig}\n         */\n        this.config = {};\n\n        /**\n         * @typedef {Object} EditorComponents\n         * @property {BlockManager} BlockManager\n         * @property {Tools} Tools\n         * @property {Events} Events\n         * @property {UI} UI\n         * @property {Toolbar} Toolbar\n         * @property {Toolbox} Toolbox\n         * @property {Renderer} Renderer\n         */\n        this.moduleInstances = {};\n\n        Promise.resolve()\n            .then(() => {\n\n                this.configuration = config;\n\n            })\n            .then(() => this.init())\n            .then(() => this.start())\n            .then(() => {\n\n                console.log('CodeX Editor is ready');\n\n            })\n            .catch(error => {\n\n                console.log('CodeX Editor does not ready because of %o', error);\n\n            });\n\n    }\n\n    /**\n     * Setting for configuration\n     * @param {EditorConfig} config\n     */\n    set configuration(config) {\n\n        this.config.holderId = config.holderId;\n        this.config.placeholder = config.placeholder || 'write your story...';\n        this.config.sanitizer = config.sanitizer || {\n            p: true,\n            b: true,\n            a: true\n        };\n\n        this.config.hideToolbar = config.hideToolbar ? config.hideToolbar : false;\n        this.config.tools = config.tools || {};\n        this.config.toolsConfig = config.toolsConfig || {};\n        this.config.data = config.data || [];\n\n        /**\n         * If initial Block's Tool was not passed, use the first Tool in config.tools\n         */\n        if (!config.initialBlock) {\n\n            for (this.config.initialBlock in this.config.tools) break;\n\n        } else {\n\n            this.config.initialBlock = config.initialBlock;\n\n        }\n\n    }\n\n    /**\n     * Returns private property\n     * @returns {EditorConfig}\n     */\n    get configuration() {\n\n        return this.config;\n\n    }\n\n    /**\n     * Initializes modules:\n     *  - make and save instances\n     *  - configure\n     */\n    init() {\n\n        /**\n         * Make modules instances and save it to the @property this.moduleInstances\n         */\n        this.constructModules();\n\n        /**\n         * Modules configuration\n         */\n        this.configureModules();\n\n    }\n\n    /**\n     * Make modules instances and save it to the @property this.moduleInstances\n     */\n    constructModules() {\n\n        modules.forEach( Module => {\n\n            try {\n\n                /**\n                 * We use class name provided by displayName property\n                 *\n                 * On build, Babel will transform all Classes to the Functions so, name will always be 'Function'\n                 * To prevent this, we use 'babel-plugin-class-display-name' plugin\n                 * @see  https://www.npmjs.com/package/babel-plugin-class-display-name\n                 */\n                this.moduleInstances[Module.displayName] = new Module({\n                    config : this.configuration\n                });\n\n            } catch ( e ) {\n\n                console.log('Module %o skipped because %o', Module, e);\n\n            }\n\n        });\n\n    }\n\n    /**\n     * Modules instances configuration:\n     *  - pass other modules to the 'state' property\n     *  - ...\n     */\n    configureModules() {\n\n        for(let name in this.moduleInstances) {\n\n            /**\n             * Module does not need self-instance\n             */\n            this.moduleInstances[name].state = this.getModulesDiff( name );\n\n        }\n\n    }\n\n    /**\n     * Return modules without passed name\n     */\n    getModulesDiff( name ) {\n\n        let diff = {};\n\n        for(let moduleName in this.moduleInstances) {\n\n            /**\n             * Skip module with passed name\n             */\n            if (moduleName === name) {\n\n                continue;\n\n            }\n            diff[moduleName] = this.moduleInstances[moduleName];\n\n        }\n\n        return diff;\n\n    }\n\n    /**\n     * Start Editor!\n     *\n     * @return {Promise}\n     */\n    start() {\n\n        let prepareDecorator = module => module.prepare();\n\n        return Promise.resolve()\n            .then(prepareDecorator(this.moduleInstances.Tools))\n            .then(prepareDecorator(this.moduleInstances.UI))\n            .then(() => {\n\n                if (this.config.data && this.config.data.items) {\n\n                    this.moduleInstances.Renderer.render(this.config.data.items);\n\n                }\n\n            })\n            .then(prepareDecorator(this.moduleInstances.BlockManager))\n\n            .catch(function (error) {\n\n                console.log('Error occured', error);\n\n            });\n\n    }\n\n};\n\n// module.exports = (function (editor) {\n//\n//     'use strict';\n//\n//     editor.version = VERSION;\n//     editor.scriptPrefix = 'cdx-script-';\n//\n//     var init = function () {\n//\n//         editor.core          = require('./modules/core');\n//         editor.tools         = require('./modules/tools');\n//         editor.ui            = require('./modules/ui');\n//         editor.transport     = require('./modules/transport');\n//         editor.renderer      = require('./modules/renderer');\n//         editor.saver         = require('./modules/saver');\n//         editor.content       = require('./modules/content');\n//         editor.toolbar       = require('./modules/toolbar/toolbar');\n//         editor.callback      = require('./modules/callbacks');\n//         editor.draw          = require('./modules/draw');\n//         editor.caret         = require('./modules/caret');\n//         editor.notifications = require('./modules/notifications');\n//         editor.parser        = require('./modules/parser');\n//         editor.sanitizer     = require('./modules/sanitizer');\n//         editor.listeners     = require('./modules/listeners');\n//         editor.destroyer     = require('./modules/destroyer');\n//         editor.paste         = require('./modules/paste');\n//\n//     };\n//\n//     /**\n//      * @public\n//      * holds initial settings\n//      */\n//     editor.settings = {\n//         tools     : ['text', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n//         holderId  : 'codex-editor',\n//\n//         // Type of block showing on empty editor\n//         initialBlockPlugin: 'text'\n//     };\n//\n//     /**\n//      * public\n//      *\n//      * Static nodes\n//      */\n//     editor.nodes = {\n//         holder            : null,\n//         wrapper           : null,\n//         toolbar           : null,\n//         inlineToolbar     : {\n//             wrapper : null,\n//             buttons : null,\n//             actions : null\n//         },\n//         toolbox           : null,\n//         notifications     : null,\n//         plusButton        : null,\n//         showSettingsButton: null,\n//         showTrashButton   : null,\n//         blockSettings     : null,\n//         pluginSettings    : null,\n//         defaultSettings   : null,\n//         toolbarButtons    : {}, // { type : DomEl, ... }\n//         redactor          : null\n//     };\n//\n//     /**\n//      * @public\n//      *\n//      * Output state\n//      */\n//     editor.state = {\n//         jsonOutput  : [],\n//         blocks      : [],\n//         inputs      : []\n//     };\n//\n//     /**\n//     * @public\n//     * Editor plugins\n//     */\n//     editor.tools = {};\n//\n//     editor.start = function (userSettings) {\n//\n//         init();\n//\n//         editor.core.prepare(userSettings)\n//\n//         // If all ok, make UI, bind events and parse initial-content\n//             .then(editor.ui.prepare)\n//             .then(editor.tools.prepare)\n//             .then(editor.sanitizer.prepare)\n//             .then(editor.paste.prepare)\n//             .then(editor.transport.prepare)\n//             .then(editor.renderer.makeBlocksFromData)\n//             .then(editor.ui.saveInputs)\n//             .catch(function (error) {\n//\n//                 editor.core.log('Initialization failed with error: %o', 'warn', error);\n//\n//             });\n//\n//     };\n//\n//     return editor;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/codex.js","/**\n * Element.closest()\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n */\nif (!Element.prototype.matches)\n    Element.prototype.matches = Element.prototype.msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n\nif (!Element.prototype.closest)\n    Element.prototype.closest = function (s) {\n\n        var el = this;\n\n        if (!document.documentElement.contains(el)) return null;\n        do {\n\n            if (el.matches(s)) return el;\n            el = el.parentElement || el.parentNode;\n\n        } while (el !== null);\n        return null;\n\n    };\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/polyfills.js","var map = {\n\t\"./blockManager.js\": 7,\n\t\"./caret.js\": 8,\n\t\"./events.js\": 9,\n\t\"./renderer.js\": 10,\n\t\"./toolbar.js\": 11,\n\t\"./toolbox.js\": 12,\n\t\"./tools.js\": 13,\n\t\"./ui.js\": 14\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/modules nonrecursive [^_](blockManager.js|caret.js|events.js|renderer.js|toolbar.js|toolbox.js|tools.js|ui.js)$\n// module id = 6\n// module chunks = 0","/**\n * @class BlockManager\n * @classdesc Manage editor`s blocks storage and appearance\n *\n * @module BlockManager\n */\n\nimport Block from '../block';\n\n/**\n * @typedef {BlockManager} BlockManager\n * @property {Number} currentBlockIndex - Index of current working block\n * @property {Proxy} _blocks - Proxy for Blocks instance {@link Blocks}\n */\nexport default class BlockManager extends Module {\n\n    /**\n     * @constructor\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        /**\n         * Proxy for Blocks instance {@link Blocks}\n         *\n         * @type {Proxy}\n         * @private\n         */\n        this._blocks = null;\n\n        /**\n         * Index of current working block\n         *\n         * @type {number}\n         * @private\n         */\n        this.currentBlockIndex = -1;\n\n    }\n\n    /**\n     * Should be called after Editor.UI preparation\n     * Define this._blocks property\n     *\n     * @returns {Promise}\n     */\n    prepare() {\n\n        return new Promise(resolve => {\n\n            let blocks = new Blocks(this.Editor.UI.nodes.redactor);\n\n            /**\n             * We need to use Proxy to overload set/get [] operator.\n             * So we can use array-like syntax to access blocks\n             *\n             * @example\n             * this._blocks[0] = new Block(...);\n             *\n             * block = this._blocks[0];\n             *\n             * @todo proxy the enumerate method\n             *\n             * @type {Proxy}\n             * @private\n             */\n            this._blocks = new Proxy(blocks, {\n                set: Blocks.set,\n                get: Blocks.get\n            });\n\n            resolve();\n\n        });\n\n    }\n\n    /**\n     * Insert new block into _blocks\n     *\n     * @param {String} toolName — plugin name\n     * @param {Object} data — plugin data\n     */\n    insert(toolName, data = {}) {\n\n        let toolInstance = this.Editor.Tools.construct(toolName, data),\n            block = new Block(toolInstance);\n\n        this._blocks[++this.currentBlockIndex] = block;\n\n        /**\n         * @todo fire Tool's appendCallback\n         */\n\n    }\n\n    /**\n     * Replace current working block\n     *\n     * @param {String} toolName — plugin name\n     * @param {Object} data — plugin data\n     */\n    replace(toolName, data = {}) {\n\n        let toolInstance = this.Editor.Tools.construct(toolName, data),\n            block = new Block(toolInstance);\n\n        this._blocks.insert(this.currentBlockIndex, block, true);\n\n        /**\n         * @todo fire Tool's appendCallback\n         */\n\n    }\n\n    /**\n     * Get Block instance by html element\n     *\n     * @todo get first level block before searching\n     *\n     * @param {HTMLElement} element\n     * @returns {Block}\n     */\n    getBlock(element) {\n\n        let nodes = this._blocks.nodes,\n            index = nodes.indexOf(element);\n\n        if (index >= 0) {\n\n            return this._blocks[index];\n\n        }\n\n    }\n\n    /**\n     * Get current Block instance\n     *\n     * @return {Block}\n     */\n    get currentBlock() {\n\n        return this._blocks[this.currentBlockIndex];\n\n    }\n\n    /**\n     * Get working html element\n     *\n     * @return {HTMLElement}\n     */\n    get currentNode() {\n\n        return this._blocks.nodes[this.currentBlockIndex];\n\n    }\n\n    /**\n     * Set currentBlockIndex to passed block\n     *\n     * @todo get first level block before searching\n     *\n     * @param {HTMLElement} element\n     */\n    set currentNode(element) {\n\n        let nodes = this._blocks.nodes;\n\n        /**\n         * Update current Block's index\n         * @type {number}\n         */\n        this.currentBlockIndex = nodes.indexOf(element);\n\n        /**\n         * Remove previous selected Block's state\n         */\n        this._blocks.array.forEach( block => block.selected = false);\n\n        /**\n         * Mark current Block as selected\n         * @type {boolean}\n         */\n        this.currentBlock.selected = true;\n\n    }\n\n    /**\n     * Get array of Block instances\n     *\n     * @returns {Block[]} {@link Blocks#array}\n     */\n    get blocks() {\n\n        return this._blocks.array;\n\n    }\n\n    /**\n     * 1) Find first-level Block from passed child Node\n     * 2) Mark it as current\n     *\n     *  @param {Element|Text} childNode - look ahead from this node.\n     *  @throws Error  - when passed Node is not included at the Block\n     */\n    setCurrentBlockByChildNode(childNode) {\n\n        /**\n         * If node is Text TextNode\n         */\n        if (!$.isElement(childNode)) {\n\n            childNode = childNode.parentNode;\n\n        }\n\n        let parentFirstLevelBlock = childNode.closest(`.${Block.CSS.wrapper}`);\n\n        if (parentFirstLevelBlock) {\n\n            this.currentNode = parentFirstLevelBlock;\n\n        } else {\n\n            throw new Error('Can not find a Block from this child Node');\n\n        }\n\n    }\n\n}\n\n/**\n * @class Blocks\n * @classdesc Class to work with Block instances array\n *\n * @private\n *\n * @property {HTMLElement} workingArea — editor`s working node\n *\n */\nclass Blocks {\n\n    /**\n     * @constructor\n     *\n     * @param {HTMLElement} workingArea — editor`s working node\n     */\n    constructor(workingArea) {\n\n        this.blocks = [];\n        this.workingArea = workingArea;\n\n    }\n\n    /**\n     * Push back new Block\n     *\n     * @param {Block} block\n     */\n    push(block) {\n\n        this.blocks.push(block);\n        this.workingArea.appendChild(block.html);\n\n    }\n\n    /**\n     * Insert new Block at passed index\n     *\n     * @param {Number} index — index to insert Block\n     * @param {Block} block — Block to insert\n     * @param {Boolean} replace — it true, replace block on given index\n     */\n    insert(index, block, replace = false) {\n\n        if (!this.length) {\n\n            this.push(block);\n            return;\n\n        }\n\n        if (index > this.length) {\n\n            index = this.length;\n\n        }\n\n        if (replace) {\n\n            this.blocks[index].html.remove();\n\n        }\n\n        let deleteCount = replace ? 1 : 0;\n\n        this.blocks.splice(index, deleteCount, block);\n\n        if (index > 0) {\n\n            let previousBlock = this.blocks[index - 1];\n\n            previousBlock.html.insertAdjacentElement('afterend', block.html);\n\n        } else {\n\n            let nextBlock = this.blocks[index + 1];\n\n            if (nextBlock) {\n\n                nextBlock.html.insertAdjacentElement('beforebegin', block.html);\n\n            } else {\n\n                this.workingArea.appendChild(block.html);\n\n            }\n\n        }\n\n    }\n\n    /**\n     * Insert Block after passed target\n     *\n     * @todo decide if this method is necessary\n     *\n     * @param {Block} targetBlock — target after wich Block should be inserted\n     * @param {Block} newBlock — Block to insert\n     */\n    insertAfter(targetBlock, newBlock) {\n\n        let index = this.blocks.indexOf(targetBlock);\n\n        this.insert(index + 1, newBlock);\n\n    }\n\n    /**\n     * Get Block by index\n     *\n     * @param {Number} index — Block index\n     * @returns {Block}\n     */\n    get(index) {\n\n        return this.blocks[index];\n\n    }\n\n    /**\n     * Return index of passed Block\n     *\n     * @param {Block} block\n     * @returns {Number}\n     */\n    indexOf(block) {\n\n        return this.blocks.indexOf(block);\n\n    }\n\n    /**\n     * Get length of Block instances array\n     *\n     * @returns {Number}\n     */\n    get length() {\n\n        return this.blocks.length;\n\n    }\n\n    /**\n     * Get Block instances array\n     *\n     * @returns {Block[]}\n     */\n    get array() {\n\n        return this.blocks;\n\n    }\n\n    /**\n     * Get blocks html elements array\n     *\n     * @returns {HTMLElement[]}\n     */\n    get nodes() {\n\n        return _.array(this.workingArea.children);\n\n    }\n\n    /**\n     * Proxy trap to implement array-like setter\n     *\n     * @example\n     * blocks[0] = new Block(...)\n     *\n     * @param {Blocks} instance — Blocks instance\n     * @param {Number|String} index — block index\n     * @param {Block} block — Block to set\n     * @returns {Boolean}\n     */\n    static set(instance, index, block) {\n\n        if (isNaN(Number(index))) {\n\n            return false;\n\n        }\n\n        instance.insert(index, block);\n\n        return true;\n\n    }\n\n    /**\n     * Proxy trap to implement array-like getter\n     *\n     * @param {Blocks} instance — Blocks instance\n     * @param {Number|String} index — Block index\n     * @returns {Block|*}\n     */\n    static get(instance, index) {\n\n        if (isNaN(Number(index))) {\n\n            return instance[index];\n\n        }\n\n        return instance.get(index);\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/blockManager.js","/**\n * @class Caret\n * @classdesc Contains methods for working Caret\n *\n * @typedef {Caret} Caret\n */\nexport default class Caret extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n    }\n\n    /**\n     * Set Caret to the last Block\n     *\n     * If last block is not empty, append another empty block\n     */\n    setToTheLastBlock() {\n\n        let blocks = this.Editor.BlockManager.blocks,\n            lastBlock;\n\n        if (blocks.length) {\n\n            lastBlock = blocks[blocks.length - 1];\n\n        }\n\n        /**\n         * If last block is empty and it is an initialBlock, set to that.\n         * Otherwise, append new empty block and set to that\n         */\n        if (lastBlock.isEmpty) {\n\n            this.set(lastBlock.html);\n\n        } else {\n\n            this.Editor.BlockManager.insert(this.config.initialBlock);\n\n        }\n\n\n        /**\n         //      * If inputs in redactor does not exits, then we put input index 0 not -1\n         //      */\n        //     var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n        //\n        //     /** If we have any inputs */\n        //     if (editor.state.inputs.length) {\n        //\n        //         /** getting firstlevel parent of input */\n        //         firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n        //\n        //     }\n        //\n        //     /** If input is empty, then we set caret to the last input */\n        //     if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n        //\n        //         editor.caret.setToBlock(indexOfLastInput);\n        //\n        //     } else {\n        //\n        //         /** Create new input when caret clicked in redactors area */\n        //         var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n        //\n        //         editor.content.insertBlock({\n        //             type  : NEW_BLOCK_TYPE,\n        //             block : editor.tools[NEW_BLOCK_TYPE].render()\n        //         });\n        //\n        //         /** If there is no inputs except inserted */\n        //         if (editor.state.inputs.length === 1) {\n        //\n        //             editor.caret.setToBlock(indexOfLastInput);\n        //\n        //         } else {\n        //\n        //             /** Set caret to this appended input */\n        //             editor.caret.setToNextBlock(indexOfLastInput);\n        //\n        //         }\n        //\n        //     }\n\n    }\n\n    /**\n     * Set caret to the passed Node\n     * @param {Element} node - content-editable Element\n     */\n    set(node) {\n\n        /**\n         * @todo add working with Selection\n         * tmp: work with textContent\n         */\n\n        node.textContent += '|';\n\n    }\n\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/caret.js","/**\n * @module eventDispatcher\n *\n * Has two important methods:\n *    - {Function} on - appends subscriber to the event. If event doesn't exist - creates new one\n *    - {Function} emit - fires all subscribers with data\n *\n * @version 1.0.0\n *\n * @typedef {Events} Events\n * @property {Object} subscribers - all subscribers grouped by event name\n */\nexport default class Events extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n        this.subscribers = {};\n\n    }\n\n    /**\n     * @param {String} eventName - event name\n     * @param {Function} callback - subscriber\n     */\n    on(eventName, callback) {\n\n        if (!(eventName in this.subscribers)) {\n\n            this.subscribers[eventName] = [];\n\n        }\n\n        // group by events\n        this.subscribers[eventName].push(callback);\n\n    }\n\n    /**\n     * @param {String} eventName - event name\n     * @param {Object} data - subscribers get this data when they were fired\n     */\n    emit(eventName, data) {\n\n        this.subscribers[eventName].reduce(function (previousData, currentHandler) {\n\n            let newData = currentHandler(previousData);\n\n            return newData ? newData : previousData;\n\n        }, data);\n\n    }\n\n    /**\n     * Destroyer\n     * clears subsribers list\n     */\n    destroy() {\n\n        this.subscribers = null;\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/events.js","/**\n * Codex Editor Renderer Module\n *\n * @module Renderer\n * @author CodeX Team\n *\n * @version 2.0.0\n */\nexport default class Renderer extends Module {\n\n    /**\n     * @constructor\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n    }\n\n    /**\n     * @typedef {Object} RendererItems\n     * @property {String} type - tool name\n     * @property {Object} data - tool data\n     */\n\n    /**\n     * @example\n     *\n     * items: [\n     * {\n     *    type : 'paragraph',\n     *    data : {\n     *        text : 'Hello from Codex!'\n     *    }\n     * },\n     * {\n     *   type : 'paragraph',\n     *   data : {\n     *        text : 'Leave feedback if you like it!'\n     *   }\n     * },\n     * ]\n     *\n     */\n\n    /**\n     * Make plugin blocks from array of plugin`s data\n     * @param {RendererItems[]} items\n     */\n    render(items) {\n\n        let chainData = [];\n\n        for (let i = 0; i < items.length; i++) {\n\n            chainData.push({\n                function: () => this.insertBlock(items[i])\n            });\n\n        }\n\n        _.sequence(chainData);\n\n    }\n\n    /**\n     * Get plugin instance\n     * Add plugin instance to BlockManager\n     * Insert block to working zone\n     *\n     * @param {Object} item\n     * @returns {Promise.<T>}\n     * @private\n     */\n    insertBlock(item) {\n\n        let tool = item.type,\n            data = item.data;\n\n        this.Editor.BlockManager.insert(tool, data);\n\n        return Promise.resolve();\n\n    }\n\n}\n\n// module.exports = (function (renderer) {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * Asyncronously parses input JSON to redactor blocks\n//      */\n//     renderer.makeBlocksFromData = function () {\n//\n//         /**\n//          * If redactor is empty, add first paragraph to start writing\n//          */\n//         if (editor.core.isEmpty(editor.state.blocks) || !editor.state.blocks.items.length) {\n//\n//             editor.ui.addInitialBlock();\n//             return;\n//\n//         }\n//\n//         Promise.resolve()\n//\n//         /** First, get JSON from state */\n//             .then(function () {\n//\n//                 return editor.state.blocks;\n//\n//             })\n//\n//             /** Then, start to iterate they */\n//             .then(editor.renderer.appendBlocks)\n//\n//             /** Write log if something goes wrong */\n//             .catch(function (error) {\n//\n//                 editor.core.log('Error while parsing JSON: %o', 'error', error);\n//\n//             });\n//\n//     };\n//\n//     /**\n//      * Parses JSON to blocks\n//      * @param {object} data\n//      * @return Promise -> nodeList\n//      */\n//     renderer.appendBlocks = function (data) {\n//\n//         var blocks = data.items;\n//\n//         /**\n//          * Sequence of one-by-one blocks appending\n//          * Uses to save blocks order after async-handler\n//          */\n//         var nodeSequence = Promise.resolve();\n//\n//         for (var index = 0; index < blocks.length ; index++ ) {\n//\n//             /** Add node to sequence at specified index */\n//             editor.renderer.appendNodeAtIndex(nodeSequence, blocks, index);\n//\n//         }\n//\n//     };\n//\n//     /**\n//      * Append node at specified index\n//      */\n//     renderer.appendNodeAtIndex = function (nodeSequence, blocks, index) {\n//\n//         /** We need to append node to sequence */\n//         nodeSequence\n//\n//         /** first, get node async-aware */\n//             .then(function () {\n//\n//                 return editor.renderer.getNodeAsync(blocks, index);\n//\n//             })\n//\n//             /**\n//              * second, compose editor-block from JSON object\n//              */\n//             .then(editor.renderer.createBlockFromData)\n//\n//             /**\n//              * now insert block to redactor\n//              */\n//             .then(function (blockData) {\n//\n//                 /**\n//                  * blockData has 'block', 'type' and 'stretched' information\n//                  */\n//                 editor.content.insertBlock(blockData);\n//\n//                 /** Pass created block to next step */\n//                 return blockData.block;\n//\n//             })\n//\n//             /** Log if something wrong with node */\n//             .catch(function (error) {\n//\n//                 editor.core.log('Node skipped while parsing because %o', 'error', error);\n//\n//             });\n//\n//     };\n//\n//     /**\n//      * Asynchronously returns block data from blocksList by index\n//      * @return Promise to node\n//      */\n//     renderer.getNodeAsync = function (blocksList, index) {\n//\n//         return Promise.resolve().then(function () {\n//\n//             return {\n//                 tool : blocksList[index],\n//                 position : index\n//             };\n//\n//         });\n//\n//     };\n//\n//     /**\n//      * Creates editor block by JSON-data\n//      *\n//      * @uses render method of each plugin\n//      *\n//      * @param {Object} toolData.tool\n//      *                              { header : {\n//      *                                                text: '',\n//      *                                                type: 'H3', ...\n//      *                                            }\n//      *                               }\n//      * @param {Number} toolData.position - index in input-blocks array\n//      * @return {Object} with type and Element\n//      */\n//     renderer.createBlockFromData = function ( toolData ) {\n//\n//         /** New parser */\n//         var block,\n//             tool = toolData.tool,\n//             pluginName = tool.type;\n//\n//         /** Get first key of object that stores plugin name */\n//         // for (var pluginName in blockData) break;\n//\n//         /** Check for plugin existance */\n//         if (!editor.tools[pluginName]) {\n//\n//             throw Error(`Plugin «${pluginName}» not found`);\n//\n//         }\n//\n//         /** Check for plugin having render method */\n//         if (typeof editor.tools[pluginName].render != 'function') {\n//\n//             throw Error(`Plugin «${pluginName}» must have «render» method`);\n//\n//         }\n//\n//         if ( editor.tools[pluginName].available === false ) {\n//\n//             block = editor.draw.unavailableBlock();\n//\n//             block.innerHTML = editor.tools[pluginName].loadingMessage;\n//\n//             /**\n//             * Saver will extract data from initial block data by position in array\n//             */\n//             block.dataset.inputPosition = toolData.position;\n//\n//         } else {\n//\n//             /** New Parser */\n//             block = editor.tools[pluginName].render(tool.data);\n//\n//         }\n//\n//         /** is first-level block stretched */\n//         var stretched = editor.tools[pluginName].isStretched || false;\n//\n//         /** Retrun type and block */\n//         return {\n//             type      : pluginName,\n//             block     : block,\n//             stretched : stretched\n//         };\n//\n//     };\n//\n//     return renderer;\n//\n// })({});\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/renderer.js","/**\n *\n * «Toolbar» is the node that moves up/down over current block\n *\n *  ______________________________________ Toolbar ____________________________________________\n * |                                                                                           |\n * |  ..................... Content ....................   ......... Block Actions ..........  |\n * |  .                                                .   .                                .  |\n * |  .                                                .   . [Open Settings] [Remove Block] .  |\n * |  .  [Plus Button]  [Toolbox: {Tool1}, {Tool2}]    .   .                                .  |\n * |  .                                                .   .        [Settings Panel]        .  |\n * |  ..................................................   ..................................  |\n * |                                                                                           |\n * |___________________________________________________________________________________________|\n *\n *\n * Toolbox — its an Element contains tools buttons. Can be shown by Plus Button.\n *\n *  _______________ Toolbox _______________\n * |                                       |\n * | [Header] [Image] [List] [Quote] ...   |\n * |_______________________________________|\n *\n *\n * Settings Panel — is an Element with block settings:\n *\n *   ____ Settings Panel ____\n *  | ...................... |\n *  | .   Tool Settings    . |\n *  | ...................... |\n *  | .  Default Settings  . |\n *  | ...................... |\n *  |________________________|\n *\n *\n * @class\n * @classdesc Toolbar module\n *\n * @typedef {Toolbar} Toolbar\n * @property {Object} nodes\n * @property {Element} nodes.wrapper        - Toolbar main element\n * @property {Element} nodes.content        - Zone with Plus button and toolbox.\n * @property {Element} nodes.actions        - Zone with Block Settings and Remove Button\n * @property {Element} nodes.plusButton     - Button that opens or closes Toolbox\n * @property {Element} nodes.toolbox        - Container for tools\n * @property {Element} nodes.settingsToggler - open/close Settings Panel button\n * @property {Element} nodes.removeBlockButton - Remove Block button\n * @property {Element} nodes.settings          - Settings Panel\n * @property {Element} nodes.pluginSettings    - Plugin Settings section of Settings Panel\n * @property {Element} nodes.defaultSettings   - Default Settings section of Settings Panel\n */\nexport default class Toolbar extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            wrapper : null,\n            content : null,\n            actions : null,\n\n            // Content Zone\n            plusButton : null,\n\n            // Actions Zone\n            settingsToggler : null,\n            removeBlockButton: null,\n            settings: null,\n\n            // Settings Zone: Plugin Settings and Default Settings\n            pluginSettings: null,\n            defaultSettings: null,\n        };\n\n    }\n\n    /**\n     * CSS styles\n     * @return {Object}\n     * @constructor\n     */\n    static get CSS() {\n\n        return {\n            toolbar: 'ce-toolbar',\n            content: 'ce-toolbar__content',\n            actions: 'ce-toolbar__actions',\n\n            toolbarOpened: 'ce-toolbar--opened',\n\n            // Content Zone\n            plusButton: 'ce-toolbar__plus',\n            plusButtonHidden: 'ce-toolbar__plus--hidden',\n\n            // Actions Zone\n            settingsToggler: 'ce-toolbar__settings-btn',\n            removeBlockButton: 'ce-toolbar__remove-btn',\n\n            // Settings Panel\n            settings: 'ce-settings',\n            defaultSettings: 'ce-settings_default',\n            pluginSettings: 'ce-settings_plugin',\n        };\n\n    }\n\n    /**\n     * Makes toolbar\n     */\n    make() {\n\n        this.nodes.wrapper = $.make('div', Toolbar.CSS.toolbar);\n\n        /**\n         * Make Content Zone and Actions Zone\n         */\n        ['content',  'actions'].forEach( el => {\n\n            this.nodes[el] = $.make('div', Toolbar.CSS[el]);\n            $.append(this.nodes.wrapper, this.nodes[el]);\n\n        });\n\n\n        /**\n         * Fill Content Zone:\n         *  - Plus Button\n         *  - Toolbox\n         */\n        this.nodes.plusButton = $.make('div', Toolbar.CSS.plusButton);\n        $.append(this.nodes.content, this.nodes.plusButton);\n        this.nodes.plusButton.addEventListener('click', event => this.plusButtonClicked(event), false);\n\n\n        /**\n         * Make a Toolbox\n         */\n        this.Editor.Toolbox.make();\n\n        /**\n         * Fill Actions Zone:\n         *  - Settings Toggler\n         *  - Remove Block Button\n         *  - Settings Panel\n         */\n        this.nodes.settingsToggler  = $.make('span', Toolbar.CSS.settingsToggler);\n        this.nodes.removeBlockButton = this.makeRemoveBlockButton();\n\n        $.append(this.nodes.actions, [this.nodes.settingsToggler, this.nodes.removeBlockButton]);\n\n        /**\n         * Make and append Settings Panel\n         */\n        this.makeBlockSettingsPanel();\n\n        /**\n         * Append toolbar to the Editor\n         */\n        $.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n\n    }\n\n    /**\n     * Panel with block settings with 2 sections:\n     *\n     * @return {Element}\n     */\n    makeBlockSettingsPanel() {\n\n        this.nodes.settings = $.make('div', Toolbar.CSS.settings);\n\n        this.nodes.pluginSettings = $.make('div', Toolbar.CSS.pluginSettings);\n        this.nodes.defaultSettings = $.make('div', Toolbar.CSS.defaultSettings);\n\n        $.append(this.nodes.settings, [this.nodes.pluginSettings, this.nodes.defaultSettings]);\n        $.append(this.nodes.actions, this.nodes.settings);\n\n    }\n\n    /**\n     * Makes Remove Block button, and confirmation panel\n     * @return {Element} wrapper with button and panel\n     */\n    makeRemoveBlockButton() {\n\n        /**\n         * @todo  add confirmation panel and handlers\n         * @see  {@link settings#makeRemoveBlockButton}\n         */\n        return $.make('span', Toolbar.CSS.removeBlockButton);\n\n    }\n\n    /**\n     * Move Toolbar to the Current Block\n     */\n    move() {\n\n        /** Close Toolbox when we move toolbar */\n        this.Editor.Toolbox.close();\n\n        let currentNode = this.Editor.BlockManager.currentNode;\n\n        /**\n         * If no one Block selected as a Current\n         */\n        if (!currentNode) {\n\n            return;\n\n        }\n\n        /**\n         * @todo Compute dynamically on prepare\n         * @type {number}\n         */\n        const defaultToolbarHeight = 49;\n        const defaultOffset = 34;\n\n        var newYCoordinate = currentNode.offsetTop - (defaultToolbarHeight / 2) + defaultOffset;\n\n        this.nodes.wrapper.style.transform = `translate3D(0, ${Math.floor(newYCoordinate)}px, 0)`;\n\n        /** Close trash actions */\n        // editor.toolbar.settings.hideRemoveActions();\n\n    }\n\n    /**\n     * Open Toolbar with Plus Button\n     */\n    open() {\n\n        this.nodes.wrapper.classList.add(Toolbar.CSS.toolbarOpened);\n\n    }\n\n    /**\n     * Close the Toolbar\n     */\n    close() {\n\n        this.nodes.wrapper.classList.remove(Toolbar.CSS.toolbarOpened);\n\n    }\n\n    /**\n     * Plus Button public methods\n     * @return {{hide: function(): void, show: function(): void}}\n     */\n    get plusButton() {\n\n        return {\n            hide: () => this.nodes.plusButton.classList.add(Toolbar.CSS.plusButtonHidden),\n            show: () => this.nodes.plusButton.classList.remove(Toolbar.CSS.plusButtonHidden)\n        };\n\n    }\n\n    /**\n     * Handler for Plus Button\n     * @param {MouseEvent} event\n     */\n    plusButtonClicked(event) {\n\n        this.Editor.Toolbox.toggle();\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/toolbar.js","/**\n * @class Toolbox\n * @classdesc Holder for Tools\n *\n * @typedef {Toolbox} Toolbox\n * @property {Boolean} opened - opening state\n * @property {Object} nodes   - Toolbox nodes\n * @property {Object} CSS     - CSS class names\n *\n */\nexport default class Toolbox extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            toolbox: null,\n            buttons: []\n        };\n\n        /**\n         * Opening state\n         * @type {boolean}\n         */\n        this.opened = false;\n\n    }\n\n    /**\n     * CSS styles\n     * @return {{toolbox: string, toolboxButton: string, toolboxOpened: string}}\n     */\n    static get CSS() {\n\n        return  {\n            toolbox: 'ce-toolbox',\n            toolboxButton: 'ce-toolbox__button',\n            toolboxOpened: 'ce-toolbox--opened',\n        };\n\n    }\n\n    /**\n     * Makes the Toolbox\n     */\n    make() {\n\n        this.nodes.toolbox = $.make('div', Toolbox.CSS.toolbox);\n        $.append(this.Editor.Toolbar.nodes.content, this.nodes.toolbox);\n\n        this.addTools();\n\n    }\n\n    /**\n     * Iterates available tools and appends them to the Toolbox\n     */\n    addTools() {\n\n        let tools = this.Editor.Tools.toolsAvailable;\n\n        for (let toolName in tools) {\n\n            this.addTool(toolName, tools[toolName]);\n\n        }\n\n    }\n\n    /**\n     * Append Tool to the Toolbox\n     *\n     * @param {string} toolName  - tool name\n     * @param {Tool}  tool      - tool class\n     */\n    addTool(toolName, tool) {\n\n        if (tool.displayInToolbox && !tool.iconClassName) {\n\n            _.log('Toolbar icon class name is missed. Tool %o skipped', 'warn', toolName);\n            return;\n\n        }\n\n        /**\n         * @todo Add checkup for the render method\n         */\n        // if (typeof tool.render !== 'function') {\n        //\n        //     _.log('render method missed. Tool %o skipped', 'warn', tool);\n        //     return;\n        //\n        // }\n\n        /**\n         * Skip tools that pass 'displayInToolbox=false'\n         */\n        if (!tool.displayInToolbox) {\n\n            return;\n\n        }\n\n        let button = $.make('li', [Toolbox.CSS.toolboxButton, tool.iconClassName], {\n            title: toolName\n        });\n\n        /**\n         * Save tool's name in the button data-name\n         */\n        button.dataset.name = toolName;\n\n        $.append(this.nodes.toolbox, button);\n\n        this.nodes.toolbox.appendChild(button);\n        this.nodes.buttons.push(button);\n\n        /**\n         * @todo add event with module Listeners\n         */\n        // this.Editor.Listeners.add();\n        button.addEventListener('click', event => {\n\n            this.buttonClicked(event);\n\n        }, false);\n\n    }\n\n    /**\n     * Toolbox button click listener\n     * 1) if block is empty -> replace\n     * 2) if block is not empty -> add new block below\n     *\n     * @param {MouseEvent} event\n     */\n    buttonClicked(event) {\n\n        let toolButton = event.target,\n            toolName = toolButton.dataset.name,\n            tool = this.Editor.Tools.toolClasses[toolName];\n\n        /**\n         * @type {Block}\n         */\n        let currentBlock = this.Editor.BlockManager.currentBlock;\n\n        /**\n         * We do replace if:\n         * - block is empty\n         * - block is not irreplaceable\n         * @type {Array}\n         */\n        if (!tool.irreplaceable && currentBlock.isEmpty) {\n\n            this.Editor.BlockManager.replace(toolName);\n\n        } else {\n\n            this.Editor.BlockManager.insert(toolName);\n\n        }\n\n        /**\n         * @todo set caret to the new block\n         */\n\n        // window.setTimeout(function () {\n\n        /** Set caret to current block */\n        // editor.caret.setToBlock(currentInputIndex);\n\n        // }, 10);\n\n        /**\n         * Move toolbar when node is changed\n         */\n        this.Editor.Toolbar.move();\n\n    }\n\n    /**\n     * Open Toolbox with Tools\n     */\n    open() {\n\n        this.nodes.toolbox.classList.add(Toolbox.CSS.toolboxOpened);\n        this.opened = true;\n\n    }\n\n    /**\n     * Close Toolbox\n     */\n    close() {\n\n        this.nodes.toolbox.classList.remove(Toolbox.CSS.toolboxOpened);\n        this.opened = false;\n\n    }\n\n    /**\n     * Close Toolbox\n     */\n    toggle() {\n\n        if (!this.opened) {\n\n            this.open();\n\n        } else {\n\n            this.close();\n\n        }\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/toolbox.js","/**\n * @module Codex Editor Tools Submodule\n *\n * Creates Instances from Plugins and binds external config to the instances\n */\n\n/**\n * Each Tool must contain the following important objects:\n *\n * @typedef {Object} ToolConfig {@link docs/tools.md}\n * @property {String} iconClassname - this a icon in toolbar\n * @property {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n * @property {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n * @property render @todo add description\n * @property save @todo add description\n * @property settings @todo add description\n * @property validate - method that validates output data before saving\n */\n\n/**\n * @typedef {Function} Tool {@link docs/tools.md}\n * @property {Boolean}      displayInToolbox      - By default, tools won't be added in the Toolbox. Pass true to add.\n * @property {String}       iconClassName         - CSS class name for the Toolbox button\n * @property {Boolean}      irreplaceable         - Toolbox behaviour: replace or add new block below\n * @property render\n * @property save\n * @property settings\n * @property validate\n *\n * @todo update according to current API\n * @todo describe Tool in the {@link docs/tools.md}\n */\n\n/**\n * Class properties:\n *\n * @typedef {Tools} Tools\n * @property {Tools[]} toolsAvailable - available Tools\n * @property {Tools[]} toolsUnavailable - unavailable Tools\n * @property {Object} toolsClasses - all classes\n * @property {EditorConfig} config - Editor config\n */\nexport default class Tools extends Module {\n\n    /**\n     * Returns available Tools\n     * @return {Tool[]}\n     */\n    get available() {\n\n        return this.toolsAvailable;\n\n    }\n\n    /**\n     * Returns unavailable Tools\n     * @return {Tool[]}\n     */\n    get unavailable() {\n\n        return this.toolsUnavailable;\n\n    }\n\n    /**\n     * Static getter for default Tool config fields\n     *\n     * @usage Tools.defaultConfig.displayInToolbox\n     * @return {ToolConfig}\n     */\n    static get defaultConfig() {\n\n        return {\n            iconClassName : '',\n            displayInToolbox : false,\n            enableLineBreaks : false,\n            irreplaceable : false\n        };\n\n    }\n\n    /**\n     * @constructor\n     *\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        /**\n         * Map {name: Class, ...} where:\n         *  name — block type name in JSON. Got from EditorConfig.tools keys\n         * @type {Object}\n         */\n        this.toolClasses = {};\n\n        /**\n         * Available tools list\n         * {name: Class, ...}\n         * @type {Object}\n         */\n        this.toolsAvailable = {};\n\n        /**\n         * Tools that rejected a prepare method\n         * {name: Class, ... }\n         * @type {Object}\n         */\n        this.toolsUnavailable = {};\n\n    }\n\n    /**\n     * Creates instances via passed or default configuration\n     * @return {Promise}\n     */\n    prepare() {\n\n        if (!this.config.hasOwnProperty('tools')) {\n\n            return Promise.reject(\"Can't start without tools\");\n\n        }\n\n        for(let toolName in this.config.tools) {\n\n            this.toolClasses[toolName] = this.config.tools[toolName];\n\n        }\n\n        /**\n         * getting classes that has prepare method\n         */\n        let sequenceData = this.getListOfPrepareFunctions();\n\n        /**\n         * if sequence data contains nothing then resolve current chain and run other module prepare\n         */\n        if (sequenceData.length === 0) {\n\n            return Promise.resolve();\n\n        }\n\n        /**\n         * to see how it works {@link Util#sequence}\n         */\n        return _.sequence(sequenceData, (data) => {\n\n            this.success(data);\n\n        }, (data) => {\n\n            this.fallback(data);\n\n        });\n\n    }\n\n    /**\n     * Binds prepare function of plugins with user or default config\n     * @return {Array} list of functions that needs to be fired sequentially\n     */\n    getListOfPrepareFunctions() {\n\n        let toolPreparationList = [];\n\n        for(let toolName in this.toolClasses) {\n\n            let toolClass = this.toolClasses[toolName];\n\n            if (typeof toolClass.prepare === 'function') {\n\n                toolPreparationList.push({\n                    function : toolClass.prepare,\n                    data : {\n                        toolName\n                    }\n                });\n\n            } else {\n\n                /**\n                 * If Tool hasn't a prepare method, mark it as available\n                 */\n                this.toolsAvailable[toolName] = toolClass;\n\n            }\n\n        }\n\n        return toolPreparationList;\n\n    }\n\n    /**\n     * @param {ChainData.data} data - append tool to available list\n     */\n    success(data) {\n\n        this.toolsAvailable[data.toolName] = this.toolClasses[data.toolName];\n\n    }\n\n    /**\n     * @param {ChainData.data} data - append tool to unavailable list\n     */\n    fallback(data) {\n\n        this.toolsUnavailable[data.toolName] = this.toolClasses[data.toolName];\n\n    }\n\n    /**\n     * Return tool`a instance\n     *\n     * @param {String} tool — tool name\n     * @param {Object} data — initial data\n     *\n     * @todo throw exceptions if tool doesnt exist\n     *\n     */\n    construct(tool, data) {\n\n        let plugin = this.toolClasses[tool],\n            config = this.config.toolsConfig[tool];\n\n        if (!config) {\n\n            config = this.defaultConfig;\n\n        }\n\n        let instance = new plugin(data, config);\n\n        return instance;\n\n    }\n\n    /**\n     * Check if passed Tool is an instance of Initial Block Tool\n     * @param {Tool} tool - Tool to check\n     * @return {Boolean}\n     */\n    isInitial(tool) {\n\n        return tool instanceof this.available[this.config.initialBlock];\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/tools.js","/**\n * Module UI\n *\n * @type {UI}\n */\n// let className = {\n\n/**\n     * @const {string} BLOCK_CLASSNAME - redactor blocks name\n     */\n// BLOCK_CLASSNAME : 'ce-block',\n\n/**\n     * @const {String} wrapper for plugins content\n     */\n// BLOCK_CONTENT : 'ce-block__content',\n\n/**\n     * @const {String} BLOCK_STRETCHED - makes block stretched\n     */\n// BLOCK_STRETCHED : 'ce-block--stretched',\n\n/**\n     * @const {String} BLOCK_HIGHLIGHTED - adds background\n     */\n// BLOCK_HIGHLIGHTED : 'ce-block--focused',\n\n/**\n     * @const {String} - for all default settings\n     */\n// SETTINGS_ITEM : 'ce-settings__item'\n// };\n\nimport Block from '../block';\n\n/**\n * @class\n *\n * @classdesc Makes CodeX Editor UI:\n *                <codex-editor>\n *                    <ce-redactor />\n *                    <ce-toolbar />\n *                    <ce-inline-toolbar />\n *                </codex-editor>\n *\n * @typedef {UI} UI\n * @property {EditorConfig} config   - editor configuration {@link CodexEditor#configuration}\n * @property {Object} Editor         - available editor modules {@link CodexEditor#moduleInstances}\n * @property {Object} nodes          -\n * @property {Element} nodes.holder  - element where we need to append redactor\n * @property {Element} nodes.wrapper  - <codex-editor>\n * @property {Element} nodes.redactor - <ce-redactor>\n */\nexport default class UI extends Module {\n\n    /**\n     * @constructor\n     *\n     * @param  {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            holder: null,\n            wrapper: null,\n            redactor: null\n        };\n\n    }\n\n    /**\n     * @protected\n     *\n     * Making main interface\n     */\n    prepare() {\n\n        return this.make()\n            /**\n             * Make toolbar\n             */\n            .then(() => this.Editor.Toolbar.make())\n            /**\n             * Load and append CSS\n             */\n            .then(() => this.loadStyles())\n            /**\n             * Bind events for the UI elements\n             */\n            .then(() => this.bindEvents())\n\n        /** Make container for inline toolbar */\n        // .then(makeInlineToolbar_)\n\n        /** Add inline toolbar tools */\n        // .then(addInlineToolbarTools_)\n\n        /** Draw wrapper for notifications */\n        // .then(makeNotificationHolder_)\n\n        /** Add eventlisteners to redactor elements */\n        // .then(bindEvents_)\n\n            .catch(e => {\n\n                console.error(e);\n\n            // editor.core.log(\"Can't draw editor interface\");\n\n            });\n\n    }\n\n    /**\n     * CodeX Editor UI CSS class names\n     * @return {{editorWrapper: string, editorZone: string, block: string}}\n     */\n    get CSS() {\n\n        return {\n            editorWrapper : 'codex-editor',\n            editorZone    : 'codex-editor__redactor',\n        };\n\n    }\n\n    /**\n     * Makes CodeX Editor interface\n     * @return {Promise<any>}\n     */\n    make() {\n\n        return new Promise( (resolve, reject) => {\n\n            /**\n             * Element where we need to append CodeX Editor\n             * @type {Element}\n             */\n            this.nodes.holder = document.getElementById(this.config.holderId);\n\n            if (!this.nodes.holder) {\n\n                reject(Error(\"Holder wasn't found by ID: #\" + this.config.holderId));\n                return;\n\n            }\n\n            /**\n             * Create and save main UI elements\n             */\n            this.nodes.wrapper  = $.make('div', this.CSS.editorWrapper);\n            this.nodes.redactor = $.make('div', this.CSS.editorZone);\n\n            this.nodes.wrapper.appendChild(this.nodes.redactor);\n            this.nodes.holder.appendChild(this.nodes.wrapper);\n\n            resolve();\n\n        });\n\n    }\n\n    /**\n     * Appends CSS\n     */\n    loadStyles() {\n\n        /**\n         * Load CSS\n         */\n        let styles = require('../../styles/main.css');\n\n        /**\n         * Make tag\n         */\n        let tag = $.make('style', null, {\n            textContent: styles.toString()\n        });\n\n        /**\n         * Append styles\n         */\n        $.append(document.head, tag);\n\n    }\n\n    /**\n     * Bind events on the CodeX Editor interface\n     */\n    bindEvents() {\n\n        /**\n         * @todo bind events with the Listeners module\n         */\n        this.nodes.redactor.addEventListener('click', event => this.redactorClicked(event), false );\n\n    }\n\n    /**\n     * All clicks on the redactor zone\n     *\n     * @param {MouseEvent} event\n     *\n     * @description\n     * 1. Save clicked Block as a current {@link BlockManager#currentNode}\n     *      it uses for the following:\n     *      - add CSS modifier for the selected Block\n     *      - on Enter press, we make a new Block under that\n     *\n     * 2. Move and show the Toolbar\n     *\n     * 3. Set a Caret\n     *\n     * 4. By clicks on the Editor's bottom zone:\n     *      - if last Block is empty, set a Caret to this\n     *      - otherwise, add a new empty Block and set a Caret to that\n     *\n     * 5. Hide the Inline Toolbar\n     *\n     * @see selectClickedBlock\n     *\n     */\n    redactorClicked(event) {\n\n        let clickedNode = event.target;\n\n        /**\n         * Select clicked Block as Current\n         */\n        try {\n\n            this.Editor.BlockManager.setCurrentBlockByChildNode(clickedNode);\n\n        /**\n         * If clicked outside first-level Blocks, set Caret to the last empty Block\n         */\n\n        } catch (e) {\n\n            this.Editor.Caret.setToTheLastBlock();\n\n        }\n\n\n\n\n        /**\n         * @todo hide the Inline Toolbar\n         */\n        // var selectedText = editor.toolbar.inline.getSelectionText(),\n        //     firstLevelBlock;\n\n        /** If selection range took off, then we hide inline toolbar */\n        // if (selectedText.length === 0) {\n\n        // editor.toolbar.inline.close();\n\n        // }\n\n        /**\n         *\n\n        /** Update current input index in memory when caret focused into existed input */\n        // if (event.target.contentEditable == 'true') {\n        //\n        //     editor.caret.saveCurrentInputIndex();\n        //\n        // }\n\n        // if (editor.content.currentNode === null) {\n        //\n        //     /**\n        //      * If inputs in redactor does not exits, then we put input index 0 not -1\n        //      */\n        //     var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n        //\n        //     /** If we have any inputs */\n        //     if (editor.state.inputs.length) {\n        //\n        //         /** getting firstlevel parent of input */\n        //         firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n        //\n        //     }\n        //\n        //     /** If input is empty, then we set caret to the last input */\n        //     if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n        //\n        //         editor.caret.setToBlock(indexOfLastInput);\n        //\n        //     } else {\n        //\n        //         /** Create new input when caret clicked in redactors area */\n        //         var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n        //\n        //         editor.content.insertBlock({\n        //             type  : NEW_BLOCK_TYPE,\n        //             block : editor.tools[NEW_BLOCK_TYPE].render()\n        //         });\n        //\n        //         /** If there is no inputs except inserted */\n        //         if (editor.state.inputs.length === 1) {\n        //\n        //             editor.caret.setToBlock(indexOfLastInput);\n        //\n        //         } else {\n        //\n        //             /** Set caret to this appended input */\n        //             editor.caret.setToNextBlock(indexOfLastInput);\n        //\n        //         }\n        //\n        //     }\n        //\n        // } else {\n        //\n        //     /** Close all panels */\n        //     editor.toolbar.settings.close();\n        //     editor.toolbar.toolbox.close();\n        //\n        // }\n        //\n        /**\n         * Move toolbar and open\n         */\n        this.Editor.Toolbar.move();\n        this.Editor.Toolbar.open();\n        //\n        // var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n        //     currentNodeType = editor.content.currentNode.dataset.tool,\n        //     isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n        //\n        //\n\n        /**\n         * Hide the Plus Button\n         * */\n        this.Editor.Toolbar.plusButton.hide();\n\n        /**\n         * Show the Plus Button if:\n         * - Block is an initial-block (Text)\n         * - Block is empty\n         */\n        let isInitialBlock = this.Editor.Tools.isInitial(this.Editor.BlockManager.currentBlock.tool),\n            isEmptyBlock = this.Editor.BlockManager.currentBlock.isEmpty;\n\n        if (isInitialBlock && isEmptyBlock) {\n\n            this.Editor.Toolbar.plusButton.show();\n\n        }\n\n    }\n\n}\n\n// /**\n//  * Codex Editor UI module\n//  *\n//  * @author Codex Team\n//  * @version 1.2.0\n//  */\n//\n// module.exports = (function (ui) {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * Basic editor classnames\n//      */\n//     ui.prepare = function () {\n//\n\n//\n//     };\n//\n//     /** Draw notifications holder */\n//     var makeNotificationHolder_ = function () {\n//\n//         /** Append block with notifications to the document */\n//         editor.nodes.notifications = editor.notifications.createHolder();\n//\n//     };\n//\n//\n//     var addInlineToolbarTools_ = function () {\n//\n//         var tools = {\n//\n//             bold: {\n//                 icon    : 'ce-icon-bold',\n//                 command : 'bold'\n//             },\n//\n//             italic: {\n//                 icon    : 'ce-icon-italic',\n//                 command : 'italic'\n//             },\n//\n//             link: {\n//                 icon    : 'ce-icon-link',\n//                 command : 'createLink'\n//             }\n//         };\n//\n//         var toolButton,\n//             tool;\n//\n//         for(var name in tools) {\n//\n//             tool = tools[name];\n//\n//             toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n//\n//             editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n//             /**\n//              * Add callbacks to this buttons\n//              */\n//             editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n//\n//         }\n//\n//     };\n//\n//     /**\n//      * @private\n//      * Bind editor UI events\n//      */\n//     var bindEvents_ = function () {\n//\n//         editor.core.log('ui.bindEvents fired', 'info');\n//\n//         // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n//         //     editor.notifications.errorThrown(errorMsg, event);\n//         // }, false );\n//\n//         /** All keydowns on Document */\n//         editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n//\n//         /** All keydowns on Redactor zone */\n//         editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n//\n//         /** All keydowns on Document */\n//         editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false );\n//\n//         /**\n//          * Mouse click to radactor\n//          */\n//         editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false );\n//\n//         /**\n//          * Clicks to the Plus button\n//          */\n//         editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n//\n//         /**\n//          * Clicks to SETTINGS button in toolbar\n//          */\n//         editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false );\n//\n//         /** Bind click listeners on toolbar buttons */\n//         for (var button in editor.nodes.toolbarButtons) {\n//\n//             editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n//\n//         }\n//\n//     };\n//\n//     ui.addBlockHandlers = function (block) {\n//\n//         if (!block) return;\n//\n//         /**\n//          * Block keydowns\n//          */\n//         editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n//\n//         /**\n//          * Pasting content from another source\n//          * We have two type of sanitization\n//          * First - uses deep-first search algorithm to get sub nodes,\n//          * sanitizes whole Block_content and replaces cleared nodes\n//          * This method is deprecated\n//          * Method is used in editor.callback.blockPaste(event)\n//          *\n//          * Secont - uses Mutation observer.\n//          * Observer \"observe\" DOM changes and send changings to callback.\n//          * Callback gets changed node, not whole Block_content.\n//          * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n//          *\n//          * Method is used in editor.callback.blockPasteViaSanitize(event)\n//          *\n//          * @uses html-janitor\n//          * @example editor.callback.blockPasteViaSanitize(event), the second method.\n//          *\n//          */\n//         editor.listeners.add(block, 'paste', editor.paste.blockPasteCallback, false);\n//\n//         /**\n//          * Show inline toolbar for selected text\n//          */\n//         editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n//         editor.listeners.add(block, 'keyup', editor.toolbar.inline.show, false);\n//\n//     };\n//\n//     /** getting all contenteditable elements */\n//     ui.saveInputs = function () {\n//\n//         var redactor = editor.nodes.redactor;\n//\n//         editor.state.inputs = [];\n//\n//         /** Save all inputs in global variable state */\n//         var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n//\n//         Array.prototype.map.call(inputs, function (current) {\n//\n//             if (!current.type || current.type == 'text' || current.type == 'textarea') {\n//\n//                 editor.state.inputs.push(current);\n//\n//             }\n//\n//         });\n//\n//     };\n//\n//     /**\n//      * Adds first initial block on empty redactor\n//      */\n//     ui.addInitialBlock = function () {\n//\n//         var initialBlockType = editor.settings.initialBlockPlugin,\n//             initialBlock;\n//\n//         if ( !editor.tools[initialBlockType] ) {\n//\n//             editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n//             return;\n//\n//         }\n//\n//         initialBlock = editor.tools[initialBlockType].render();\n//\n//         initialBlock.setAttribute('data-placeholder', editor.settings.placeholder);\n//\n//         editor.content.insertBlock({\n//             type  : initialBlockType,\n//             block : initialBlock\n//         });\n//\n//         editor.content.workingNodeChanged(initialBlock);\n//\n//     };\n//\n//     ui.setInlineToolbarButtonBehaviour = function (button, type) {\n//\n//         editor.listeners.add(button, 'mousedown', function (event) {\n//\n//             editor.toolbar.inline.toolClicked(event, type);\n//\n//         }, false);\n//\n//     };\n//\n//     return ui;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/ui.js","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \":root {\\n\\n    /**\\n     * Toolbar buttons\\n     */\\n\\n    /**\\n     * Block content width\\n     */\\n\\n    /**\\n     * Toolbar Plus Button and Toolbox buttons height and width\\n     */\\n\\n}\\n/**\\n* Editor wrapper\\n*/\\n.codex-editor {\\n    position: relative;\\n    border: 1px solid #ccc;\\n    padding: 10px;\\n    box-sizing: border-box;\\n}\\n.codex-editor .hide {\\n        display: none;\\n    }\\n.codex-editor__redactor {\\n        padding-bottom: 300px;\\n    }\\n.ce-toolbar {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  opacity: 0;\\n  visibility: hidden;\\n  transition: opacity 100ms ease;\\n  will-change: opacity, transform;\\n}\\n.ce-toolbar--opened {\\n    opacity: 1;\\n    visibility: visible;\\n  }\\n.ce-toolbar__content {\\n    max-width: 650px;\\n    margin: 0 auto;\\n    position: relative;\\n  }\\n.ce-toolbar__plus {\\n    position: absolute;\\n    left: calc(-34px - 10px);\\n    display: inline-block;\\n    background-color: #eff2f5;\\n    width: 34px;\\n    height: 34px;\\n    line-height: 34px;\\n    text-align: center;\\n    border-radius: 50%\\n  }\\n.ce-toolbar__plus::after {\\n    content: '+';\\n    font-size: 26px;\\n    display: block;\\n    margin-top: -2px;\\n    margin-right: -2px;\\n\\n}\\n.ce-toolbar__plus--hidden {\\n      display: none;\\n\\n}\\n.ce-toolbox {\\n    visibility: hidden;\\n    transition: opacity 100ms ease;\\n    will-change: opacity;\\n}\\n.ce-toolbox--opened {\\n        opacity: 1;\\n        visibility: visible;\\n    }\\n.ce-toolbox__button {\\n        display: inline-block;\\n        list-style: none;\\n        margin: 0;\\n        background: #eff2f5;\\n        width: 34px;\\n        height: 34px;\\n        border-radius: 30px;\\n        overflow: hidden;\\n        text-align: center;\\n        line-height: 34px\\n    }\\n.ce-toolbox__button::before {\\n    content: attr(title);\\n    font-size: 22px;\\n    font-weight: 500;\\n    letter-spacing: 1em;\\n    -webkit-font-feature-settings: \\\"smcp\\\", \\\"c2sc\\\";\\n            font-feature-settings: \\\"smcp\\\", \\\"c2sc\\\";\\n    font-variant-caps: all-small-caps;\\n    padding-left: 11.5px;\\n    margin-top: -1px;\\n    display: inline-block;\\n\\n}\\n.ce-block {\\n  border: 1px dotted #ccc;\\n  margin: 2px 0;\\n}\\n.ce-block--selected {\\n    background-color: #eff2f5;\\n  }\\n.ce-block__content {\\n    max-width: 650px;\\n    margin: 0 auto;\\n  }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/main.css\n// module id = 15\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}