{"version":3,"sources":["webpack:///codex-editor.js","webpack:///webpack/bootstrap 200d5d09855b43cc1018","webpack:///./codex.js","webpack:///./modules/core.js","webpack:///./modules/tools.js","webpack:///./modules/ui.js","webpack:///./modules/transport.js","webpack:///./modules/renderer.js","webpack:///./modules/saver.js","webpack:///./modules/content.js","webpack:///./modules/toolbar/toolbar.js","webpack:///./modules/toolbar/settings.js","webpack:///./modules/toolbar/inline.js","webpack:///./modules/toolbar/toolbox.js","webpack:///./modules/callbacks.js","webpack:///./modules/draw.js","webpack:///./modules/caret.js","webpack:///./modules/notifications.js","webpack:///./modules/parser.js","webpack:///./modules/sanitizer.js","webpack:///./~/html-janitor/src/html-janitor.js","webpack:///./modules/listeners.js","webpack:///./modules/destroyer.js","webpack:///./modules/paste.js"],"names":["codex","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","editor","version","scriptPrefix","init","core","tools","ui","transport","renderer","saver","content","toolbar","callback","draw","caret","notifications","parser","sanitizer","listeners","destroyer","paste","settings","textareaId","initialBlockPlugin","nodes","textarea","wrapper","inlineToolbar","buttons","actions","toolbox","plusButton","showSettingsButton","showTrashButton","blockSettings","pluginSettings","defaultSettings","toolbarButtons","redactor","state","jsonOutput","blocks","inputs","start","userSettings","prepare","then","makeBlocksFromData","saveInputs","catch","error","log","_typeof","Symbol","iterator","obj","constructor","prototype","Promise","resolve","reject","data","hideToolbar","document","getElementById","undefined","Error","msg","type","arg","window","console","e","insertAfter","target","element","parentNode","insertBefore","nextSibling","nodeTypes","TAG","TEXT","COMMENT","keys","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","ESC","SPACE","LEFT","UP","DOWN","RIGHT","DELETE","META","isDomNode","el","nodeType","this","isEmpty","Object","length","ajax","url","encodedString","isFormData","prop","XMLHTTP","XMLHttpRequest","ActiveXObject","successFunction","async","success","test","encodeURIComponent","withCredentials","beforeSend","open","isFormData_","setRequestHeader","onreadystatechange","readyState","status","responseText","send","importScript","scriptPath","instanceName","script","createElement","defer","onload","onerror","src","head","appendChild","object","FormData","resolve_","reject_","pluginsRequiresPreparation","allPlugins","pluginName","plugin","push","waitAllPluginsPreparation_","plugins","allPluginsProcessed__","reduce","previousValue","iteration","pluginIsReady__","callPluginsPrepareMethod_","available","loadingMessage","config","className","BLOCK_CLASSNAME","BLOCK_CONTENT","BLOCK_STRETCHED","BLOCK_HIGHLIGHTED","SETTINGS_ITEM","makeToolBar_","addTools_","makeInlineToolbar_","addInlineToolbarTools_","makeNotificationHolder_","bindEvents_","container","inlineToolbarButtons","inlineToolbarActions","blockButtons","makeToolbarSettings_","toolbarContent","makeToolbarContent_","settingsButton","makeRemoveBlockButton","pluginsSettings","createHolder","tool","toolName","toolButton","iconClassname","displayInToolbox","render","toolbarButton","bold","icon","command","italic","underline","link","name","toolbarButtonInline","setInlineToolbarButtonBehaviour","add","globalKeydown","redactorKeyDown","globalKeyup","redactorClicked","plusButtonClicked","showSettingsButtonClicked","button","toolbarButtonClicked","addBlockHandlers","block","blockKeydown","blockPasteCallback","inline","show","querySelectorAll","Array","map","current","addInitialBlock","initialBlock","initialBlockType","setAttribute","insertBlock","workingNodeChanged","event","toolClicked","input","arguments","node","fileSelected","clearInput","i","files","formData","multiple","append","selectAndUpload","args","accept","click","items","appendBlocks","nodeSequence","index","appendNodeAtIndex","getNodeAsync","createBlockFromData","blockData","blocksList","position","toolData","unavailableBlock","innerHTML","dataset","inputPosition","stretched","isStretched","saveBlocks","html","childNodes","makeQueue","queue","getBlockData","makeFormDataFromBlocks","save","savedData","output","blockContent","pluginsContent","validate","result","currentNode","editorAreaHightlighted","sync","markBlock","classList","clearMark","remove","getFirstLevelBlock","body","contains","targetNode","replaceBlock","targetBlock","newBlock","replaceChild","needPlaceCaret","workingBlock","newBlockContent","blockType","composeNewBlock_","currentInputIndex","getCurrentInputIndex","editableElement","querySelector","emptyText","createTextNode","set","move","showPlusButton","setTimeout","setToNextBlock","switchBlock","blockToReplace","newBlockComposed","getDeepestTextNodeFromPosition","text","blockChilds","textContent","trim","removeChild","lookingFromStart","getRange","selection","getSelection","getRangeAt","splitBlock","inputIndex","textBeforeCaret","textNodeBeforeCaret","textAfterCaret","textNodeAfterCaret","anchorNode","anchorNodeText","caretOffset","anchorOffset","currentBlock","substring","previousChilds","nextChilds","reachedCurrent","child","previousChildsLength","nextChildsLength","newNode","NEW_BLOCK_TYPE","mergeBlocks","targetInputIndex","targetInput","currentInputContent","mutation","workingNode","allowedToPaste","sanitize","pasteTextContent","addedNodes","textNode","disconnect","cleaner","satinizer","Config","BASIC","clean","outerHTML","div","replaceWith","isLastNode","allChecked","allSiblingsEmpty_","sibling","wrapTextWithParagraphs","htmlString","paragraph","blockTyped","newWrapper","firstLevelBlocks","indexOf","tagName","cloneNode","getEditableParent","contentEditable","defaultToolbarHeight","defaultOffset","opened","close","toggle","hidePlusButton","newYCoordinate","offsetTop","style","transform","Math","floor","hideRemoveActions","setting","toolType","makeSettings","settingsBlock","removeBlockWrapper","settingButton","actionWrapper","confirmAction","cancelAction","removeButtonClicked","confirmRemovingRequest","cancelRemovingRequest","action","showRemoveActions","firstLevelBlocksCount","buttonsOpened","actionsOpened","wrappersOffset","storedSelection","showInlineToolbar","selectedText","getSelectionText","showButtons","getWrappersOffset","newCoordinateX","newCoordinateY","coords","getSelectionCoords","offsetHeight","x","left","y","scrollY","top","closeButtons","closeAction","createLinkAction","defaultToolAction","forEach","hightlight","offset","getOffset","_x","_y","isNaN","offsetLeft","clientLeft","clientTop","offsetParent","range","sel","createRange","collapse","boundingLeft","boundingTop","rangeCount","cloneRange","getClientRects","rect","toString","showActions","inlineToolbarAnchorInputKeydown_","keyCode","editable","restoreSelection","setAnchor","value","preventDefault","stopImmediatePropagation","clearRange","isActive","isLinkActive","saveSelection","inputForLink","focus","dataType","execCommand","containerEl","preSelectionRange","selectNodeContents","setEnd","startContainer","startOffset","end","savedSel","charIndex","setStart","nextCharIndex","nodeStack","foundStart","stop","pop","removeAllRanges","addRange","queryCommandState","setButtonHighlighted","removeButtonsHighLight","tag","leaf","currentTool","barButtons","nextToolIndex","toolToSelect","visibleTool","appendCallback","UNREPLACEBLE_TOOLS","setToBlock","callbacks","enterKeyPressed_","tabKeyPressedOnRedactorsZone_","enterKeyPressedOnRedactorsZone_","escapeKeyPressedOnRedactorsZone_","defaultKeyPressedOnRedactorsZone_","arrowKeyPressed_","nativeInputs","nativeInputsAreEmpty","textContentIsEmpty","blockIsEmpty","enterPressedOnBlock_","saveCurrentInputIndex","isEnterPressedOnToolbar","enableLineBreaks","stopPropagation","shiftKey","currentSelection","currentSelectedNode","caretAtTheEndOfText","atTheEnd","isTextNodeHasParentBetweenContenteditable","enterPressedOnBlock","islastNode","detectWhenClickedOnFirstLevelBlockArea_","firstLevelBlock","indexOfLastInput","inputIsEmpty","currentNodeType","isInitialType","flag","blockRightOrDownArrowPressed_","backspacePressed_","blockLeftOrUpArrowPressed_","focusedNodeHolder","focusedNode","editableElementIndex","lastChild","deepestTextnode","caretInLastChild","firstChild","caretInFirstChild","caretAtTheBeginning","setToPreviousBlock","selectionLength","isNativeInput_","endOffset","atStart","_blockPasteCallback","observer","MutationObserver","handleMutationsOnPaste","attributes","childList","characterData","subtree","observe","editableParent","cleanData","fragment","htmlData","clipboardData","getData","plainData","createDocumentFragment","innerText","lastNode","allowRenderOnPaste","pasted","deleteContents","insertNode","setStartAfter","mutations","self","currentToolType","nativeInputAreas","ceBlock","bar","placeholder","toggler","classname","toolIcon","toolTitle","properties","focusedNodeIndex","nodeToSet","childs","nextInput","emptyTextElement","lastChildNode","lengthOfLastChildNode","previousInput","pluginsRender","isFirstNode","isOffsetZero","addToQueue","splice","holder","errorThrown","errorMsg","notification","message","constructorSettings","create","time","okBtn","cancelBtn","okMsg","cancelMsg","confirmHandler","cancelHandler","confirm","cancel","inputField","clear","insertPastedContent","isFirstLevelBlock","janitor","tags","a","href","rel","b","strong","em","span","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","HTMLJanitor","tagDefinitions","validConfigValues","k","every","isBlockElement","blockElementNames","nodeName","isInlineElement","inlineElementNames","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","SHOW_COMMENT","getAllowedAttrs","shouldRejectNode","allowedAttrs","shouldRejectAttr","attr","attrName","toLowerCase","sandbox","_sanitize","treeWalker","_sanitized","Node","TEXT_NODE","COMMENT_NODE","containsBlockElement","isInline","some","isNotTopContainer","isNestedBlockElement","isInvalid","keepNestedBlockElements","removeAttribute","previousElementSibling","nextElementSibling","allListeners","search","byElement","context","listenersOnElement","listener","byType","eventType","listenersWithType","byHandler","handler","listenersWithHandler","one","all","isCapture","addEventListener","alreadyAddedListener","removeEventListener","existingListeners","removeAll","get","removeNodes","destroyPlugins","destroy","destroyScripts","scripts","getElementsByTagName","patterns","renderOnPastePatterns","isArray","pattern","clipBoardData","analize","string","execArray","regex","exec","match","pasteToNewBlock_"],"mappings":"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","file":"codex-editor.js","sourcesContent":["var codex = codex || {}; codex[\"editor\"] =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t *\n\t * Codex Editor\n\t *\n\t * @author Codex Team\n\t */\n\t\n\tmodule.exports = function (editor) {\n\t\n\t    'use strict';\n\t\n\t    editor.version = (\"1.5.8\");\n\t    editor.scriptPrefix = 'cdx-script-';\n\t\n\t    var init = function init() {\n\t\n\t        editor.core = __webpack_require__(1);\n\t        editor.tools = __webpack_require__(2);\n\t        editor.ui = __webpack_require__(3);\n\t        editor.transport = __webpack_require__(4);\n\t        editor.renderer = __webpack_require__(5);\n\t        editor.saver = __webpack_require__(6);\n\t        editor.content = __webpack_require__(7);\n\t        editor.toolbar = __webpack_require__(8);\n\t        editor.callback = __webpack_require__(12);\n\t        editor.draw = __webpack_require__(13);\n\t        editor.caret = __webpack_require__(14);\n\t        editor.notifications = __webpack_require__(15);\n\t        editor.parser = __webpack_require__(16);\n\t        editor.sanitizer = __webpack_require__(17);\n\t        editor.listeners = __webpack_require__(19);\n\t        editor.destroyer = __webpack_require__(20);\n\t        editor.paste = __webpack_require__(21);\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     * holds initial settings\n\t     */\n\t    editor.settings = {\n\t        tools: ['paragraph', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n\t        textareaId: 'codex-editor',\n\t\n\t        // Type of block showing on empty editor\n\t        initialBlockPlugin: 'paragraph'\n\t    };\n\t\n\t    /**\n\t     * public\n\t     *\n\t     * Static nodes\n\t     */\n\t    editor.nodes = {\n\t        textarea: null,\n\t        wrapper: null,\n\t        toolbar: null,\n\t        inlineToolbar: {\n\t            wrapper: null,\n\t            buttons: null,\n\t            actions: null\n\t        },\n\t        toolbox: null,\n\t        notifications: null,\n\t        plusButton: null,\n\t        showSettingsButton: null,\n\t        showTrashButton: null,\n\t        blockSettings: null,\n\t        pluginSettings: null,\n\t        defaultSettings: null,\n\t        toolbarButtons: {}, // { type : DomEl, ... }\n\t        redactor: null\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * Output state\n\t     */\n\t    editor.state = {\n\t        jsonOutput: [],\n\t        blocks: [],\n\t        inputs: []\n\t    };\n\t\n\t    /**\n\t    * @public\n\t    * Editor plugins\n\t    */\n\t    editor.tools = {};\n\t\n\t    /**\n\t     * Initialization\n\t     * @uses Promise cEditor.core.prepare\n\t     * @param {} userSettings are :\n\t     *          - tools [],\n\t     *          - textareaId String\n\t     *          ...\n\t     *\n\t     * Load user defined tools\n\t     * Tools must contain this important objects :\n\t     *  @param {String} type - this is a type of plugin. It can be used as plugin name\n\t     *  @param {String} iconClassname - this a icon in toolbar\n\t     *  @param {Object} make - what should plugin do, when it is clicked\n\t     *  @param {Object} appendCallback - callback after clicking\n\t     *  @param {Element} settings - what settings does it have\n\t     *  @param {Object} render - plugin get JSON, and should return HTML\n\t     *  @param {Object} save - plugin gets HTML content, returns JSON\n\t     *  @param {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n\t     *  @param {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n\t     *\n\t     * @example\n\t     *   -  type             : 'header',\n\t     *   -  iconClassname    : 'ce-icon-header',\n\t     *   -  make             : headerTool.make,\n\t     *   -  appendCallback   : headerTool.appendCallback,\n\t     *   -  settings         : headerTool.makeSettings(),\n\t     *   -  render           : headerTool.render,\n\t     *   -  save             : headerTool.save,\n\t     *   -  displayInToolbox : true,\n\t     *   -  enableLineBreaks : false\n\t     */\n\t    editor.start = function (userSettings) {\n\t\n\t        init();\n\t\n\t        editor.core.prepare(userSettings)\n\t\n\t        // If all ok, make UI, bind events and parse initial-content\n\t        .then(editor.ui.prepare).then(editor.tools.prepare).then(editor.paste.prepare).then(editor.transport.prepare).then(editor.renderer.makeBlocksFromData).then(editor.ui.saveInputs).catch(function (error) {\n\t\n\t            editor.core.log('Initialization failed with error: %o', 'warn', error);\n\t        });\n\t    };\n\t\n\t    return editor;\n\t}({});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Codex Editor Core\n\t *\n\t * @author Codex Team\n\t * @version 1.1.3\n\t */\n\t\n\tmodule.exports = function (core) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * Editor preparing method\n\t     * @return Promise\n\t     */\n\t    core.prepare = function (userSettings) {\n\t\n\t        return new Promise(function (resolve, reject) {\n\t\n\t            if (userSettings) {\n\t\n\t                editor.settings.tools = userSettings.tools || editor.settings.tools;\n\t            }\n\t\n\t            if (userSettings.data) {\n\t\n\t                editor.state.blocks = userSettings.data;\n\t            }\n\t\n\t            if (userSettings.initialBlockPlugin) {\n\t\n\t                editor.settings.initialBlockPlugin = userSettings.initialBlockPlugin;\n\t            }\n\t\n\t            editor.hideToolbar = userSettings.hideToolbar;\n\t\n\t            editor.nodes.textarea = document.getElementById(userSettings.textareaId || editor.settings.textareaId);\n\t\n\t            if (_typeof(editor.nodes.textarea) === undefined || editor.nodes.textarea === null) {\n\t\n\t                reject(Error(\"Textarea wasn't found by ID: #\" + userSettings.textareaId));\n\t            } else {\n\t\n\t                resolve();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Logging method\n\t     * @param type = ['log', 'info', 'warn']\n\t     */\n\t    core.log = function (msg, type, arg) {\n\t\n\t        type = type || 'log';\n\t\n\t        if (!arg) {\n\t\n\t            arg = msg || 'undefined';\n\t            msg = '[codex-editor]:      %o';\n\t        } else {\n\t\n\t            msg = '[codex-editor]:      ' + msg;\n\t        }\n\t\n\t        try {\n\t\n\t            if ('console' in window && window.console[type]) {\n\t\n\t                if (arg) window.console[type](msg, arg);else window.console[type](msg);\n\t            }\n\t        } catch (e) {}\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Helper for insert one element after another\n\t     */\n\t    core.insertAfter = function (target, element) {\n\t\n\t        target.parentNode.insertBefore(element, target.nextSibling);\n\t    };\n\t\n\t    /**\n\t     * @const\n\t     *\n\t     * Readable DOM-node types map\n\t     */\n\t    core.nodeTypes = {\n\t        TAG: 1,\n\t        TEXT: 3,\n\t        COMMENT: 8\n\t    };\n\t\n\t    /**\n\t     * @const\n\t     * Readable keys map\n\t     */\n\t    core.keys = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, DOWN: 40, RIGHT: 39, DELETE: 46, META: 91 };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Check object for DOM node\n\t     */\n\t    core.isDomNode = function (el) {\n\t\n\t        return el && (typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' && el.nodeType && el.nodeType == this.nodeTypes.TAG;\n\t    };\n\t\n\t    /**\n\t    * Checks passed object for emptiness\n\t    * @require ES5 - Object.keys\n\t    * @param {object}\n\t    */\n\t    core.isEmpty = function (obj) {\n\t\n\t        return Object.keys(obj).length === 0;\n\t    };\n\t\n\t    /**\n\t     * Native Ajax\n\t     */\n\t    core.ajax = function (settings) {\n\t\n\t        if (!settings || !settings.url) {\n\t\n\t            return;\n\t        }\n\t\n\t        var XMLHTTP = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t            successFunction = function successFunction() {},\n\t            encodedString,\n\t            isFormData,\n\t            prop;\n\t\n\t        settings.async = true;\n\t        settings.type = settings.type || 'GET';\n\t        settings.data = settings.data || '';\n\t        settings['content-type'] = settings['content-type'] || 'application/json; charset=utf-8';\n\t        successFunction = settings.success || successFunction;\n\t\n\t        if (settings.type == 'GET' && settings.data) {\n\t\n\t            settings.url = /\\?/.test(settings.url) ? settings.url + '&' + settings.data : settings.url + '?' + settings.data;\n\t        } else {\n\t\n\t            encodedString = '';\n\t            for (prop in settings.data) {\n\t\n\t                encodedString += prop + '=' + encodeURIComponent(settings.data[prop]) + '&';\n\t            }\n\t        }\n\t\n\t        if (settings.withCredentials) {\n\t\n\t            XMLHTTP.withCredentials = true;\n\t        }\n\t\n\t        if (settings.beforeSend && typeof settings.beforeSend == 'function') {\n\t\n\t            settings.beforeSend.call();\n\t        }\n\t\n\t        XMLHTTP.open(settings.type, settings.url, settings.async);\n\t\n\t        /**\n\t         * If we send FormData, we need no content-type header\n\t         */\n\t        isFormData = isFormData_(settings.data);\n\t\n\t        if (!isFormData) {\n\t\n\t            if (settings.type != 'POST') {\n\t\n\t                XMLHTTP.setRequestHeader('Content-type', settings['content-type']);\n\t            } else {\n\t\n\t                XMLHTTP.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\t            }\n\t        }\n\t\n\t        XMLHTTP.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\n\t        XMLHTTP.onreadystatechange = function () {\n\t\n\t            if (XMLHTTP.readyState == 4 && XMLHTTP.status == 200) {\n\t\n\t                successFunction(XMLHTTP.responseText);\n\t            }\n\t        };\n\t\n\t        if (isFormData) {\n\t\n\t            // Sending FormData\n\t            XMLHTTP.send(settings.data);\n\t        } else {\n\t\n\t            // POST requests\n\t            XMLHTTP.send(encodedString);\n\t        }\n\t    };\n\t\n\t    /**\n\t    * Appends script to head of document\n\t    * @return Promise\n\t    */\n\t    core.importScript = function (scriptPath, instanceName) {\n\t\n\t        return new Promise(function (resolve, reject) {\n\t\n\t            var script = void 0;\n\t\n\t            /** Script is already loaded */\n\t            if (!instanceName) {\n\t\n\t                reject('Instance name is missed');\n\t            } else if (document.getElementById(editor.scriptPrefix + instanceName)) {\n\t\n\t                resolve(scriptPath);\n\t            }\n\t\n\t            script = document.createElement('SCRIPT');\n\t            script.async = true;\n\t            script.defer = true;\n\t            script.id = editor.scriptPrefix + instanceName;\n\t\n\t            script.onload = function () {\n\t\n\t                resolve(scriptPath);\n\t            };\n\t\n\t            script.onerror = function () {\n\t\n\t                reject(scriptPath);\n\t            };\n\t\n\t            script.src = scriptPath;\n\t            document.head.appendChild(script);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Function for checking is it FormData object to send.\n\t     * @param {Object} object to check\n\t     * @return boolean\n\t     */\n\t    var isFormData_ = function isFormData_(object) {\n\t\n\t        return object instanceof FormData;\n\t    };\n\t\n\t    return core;\n\t}({});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t* Module working with plugins\n\t*/\n\tmodule.exports = function () {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Initialize plugins before using\n\t     * Ex. Load scripts or call some internal methods\n\t     * @return Promise\n\t     */\n\t    function prepare() {\n\t\n\t        return new Promise(function (resolve_, reject_) {\n\t\n\t            Promise.resolve()\n\t\n\t            /**\n\t            * Compose a sequence of plugins that requires preparation\n\t            */\n\t            .then(function () {\n\t\n\t                var pluginsRequiresPreparation = [],\n\t                    allPlugins = editor.tools;\n\t\n\t                for (var pluginName in allPlugins) {\n\t\n\t                    var plugin = allPlugins[pluginName];\n\t\n\t                    if (plugin.prepare && typeof plugin.prepare != 'function' || !plugin.prepare) {\n\t\n\t                        continue;\n\t                    }\n\t\n\t                    pluginsRequiresPreparation.push(plugin);\n\t                }\n\t\n\t                /**\n\t                * If no one passed plugins requires preparation, finish prepare() and go ahead\n\t                */\n\t                if (!pluginsRequiresPreparation.length) {\n\t\n\t                    resolve_();\n\t                }\n\t\n\t                return pluginsRequiresPreparation;\n\t            })\n\t\n\t            /** Wait plugins while they prepares */\n\t            .then(waitAllPluginsPreparation_).then(function () {\n\t\n\t                editor.core.log('Plugins loaded', 'info');\n\t                resolve_();\n\t            }).catch(function (error) {\n\t\n\t                reject_(error);\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t    * @param {array} plugins - list of tools that requires preparation\n\t    * @return {Promise} resolved while all plugins will be ready or failed\n\t    */\n\t    function waitAllPluginsPreparation_(plugins) {\n\t\n\t        /**\n\t        * @calls allPluginsProcessed__ when all plugins prepared or failed\n\t        */\n\t        return new Promise(function (allPluginsProcessed__) {\n\t\n\t            /**\n\t             * pluck each element from queue\n\t             * First, send resolved Promise as previous value\n\t             * Each plugins \"prepare\" method returns a Promise, that's why\n\t             * reduce current element will not be able to continue while can't get\n\t             * a resolved Promise\n\t             *\n\t             * If last plugin is \"prepared\" then go to the next stage of initialization\n\t             */\n\t            plugins.reduce(function (previousValue, plugin, iteration) {\n\t\n\t                return previousValue.then(function () {\n\t\n\t                    /**\n\t                    * Wait till plugins prepared\n\t                    * @calls pluginIsReady__ when plugin is ready or failed\n\t                    */\n\t                    return new Promise(function (pluginIsReady__) {\n\t\n\t                        callPluginsPrepareMethod_(plugin).then(pluginIsReady__).then(function () {\n\t\n\t                            plugin.available = true;\n\t                        }).catch(function (error) {\n\t\n\t                            editor.core.log('Plugin \\xAB' + plugin.type + '\\xBB was not loaded. Preparation failed because %o', 'warn', error);\n\t                            plugin.available = false;\n\t                            plugin.loadingMessage = error;\n\t\n\t                            /** Go ahead even some plugin has problems */\n\t                            pluginIsReady__();\n\t                        }).then(function () {\n\t\n\t                            /** If last plugin has problems then just ignore and continue */\n\t                            if (iteration == plugins.length - 1) {\n\t\n\t                                allPluginsProcessed__();\n\t                            }\n\t                        });\n\t                    });\n\t                });\n\t            }, Promise.resolve());\n\t        });\n\t    }\n\t\n\t    var callPluginsPrepareMethod_ = function callPluginsPrepareMethod_(plugin) {\n\t\n\t        return plugin.prepare(plugin.config || {});\n\t    };\n\t\n\t    return {\n\t        prepare: prepare\n\t    };\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor UI module\n\t *\n\t * @author Codex Team\n\t * @version 1.2.0\n\t */\n\t\n\tmodule.exports = function (ui) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Basic editor classnames\n\t     */\n\t    ui.className = {\n\t\n\t        /**\n\t         * @const {string} BLOCK_CLASSNAME - redactor blocks name\n\t         */\n\t        BLOCK_CLASSNAME: 'ce-block',\n\t\n\t        /**\n\t         * @const {String} wrapper for plugins content\n\t         */\n\t        BLOCK_CONTENT: 'ce-block__content',\n\t\n\t        /**\n\t         * @const {String} BLOCK_STRETCHED - makes block stretched\n\t         */\n\t        BLOCK_STRETCHED: 'ce-block--stretched',\n\t\n\t        /**\n\t         * @const {String} BLOCK_HIGHLIGHTED - adds background\n\t         */\n\t        BLOCK_HIGHLIGHTED: 'ce-block--focused',\n\t\n\t        /**\n\t         * @const {String} - for all default settings\n\t         */\n\t        SETTINGS_ITEM: 'ce-settings__item'\n\t\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Making main interface\n\t     */\n\t    ui.prepare = function () {\n\t\n\t        return new Promise(function (resolve) {\n\t\n\t            var wrapper = editor.draw.wrapper(),\n\t                redactor = editor.draw.redactor(),\n\t                toolbar = makeToolBar_();\n\t\n\t            wrapper.appendChild(toolbar);\n\t            wrapper.appendChild(redactor);\n\t\n\t            /** Save created ui-elements to static nodes state */\n\t            editor.nodes.wrapper = wrapper;\n\t            editor.nodes.redactor = redactor;\n\t\n\t            /** Append editor wrapper with redactor zone  after initial textarea */\n\t            editor.core.insertAfter(editor.nodes.textarea, wrapper);\n\t\n\t            resolve();\n\t        })\n\t\n\t        /** Add toolbox tools */\n\t        .then(addTools_)\n\t\n\t        /** Make container for inline toolbar */\n\t        .then(makeInlineToolbar_)\n\t\n\t        /** Add inline toolbar tools */\n\t        .then(addInlineToolbarTools_)\n\t\n\t        /** Draw wrapper for notifications */\n\t        .then(makeNotificationHolder_)\n\t\n\t        /** Add eventlisteners to redactor elements */\n\t        .then(bindEvents_).catch(function () {\n\t\n\t            editor.core.log(\"Can't draw editor interface\");\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Draws inline toolbar zone\n\t     */\n\t    var makeInlineToolbar_ = function makeInlineToolbar_() {\n\t\n\t        var container = editor.draw.inlineToolbar();\n\t\n\t        /** Append to redactor new inline block */\n\t        editor.nodes.inlineToolbar.wrapper = container;\n\t\n\t        /** Draw toolbar buttons */\n\t        editor.nodes.inlineToolbar.buttons = editor.draw.inlineToolbarButtons();\n\t\n\t        /** Buttons action or settings */\n\t        editor.nodes.inlineToolbar.actions = editor.draw.inlineToolbarActions();\n\t\n\t        /** Append to inline toolbar buttons as part of it */\n\t        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.buttons);\n\t        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.actions);\n\t\n\t        editor.nodes.wrapper.appendChild(editor.nodes.inlineToolbar.wrapper);\n\t    };\n\t\n\t    var makeToolBar_ = function makeToolBar_() {\n\t\n\t        var toolbar = editor.draw.toolbar(),\n\t            blockButtons = makeToolbarSettings_(),\n\t            toolbarContent = makeToolbarContent_();\n\t\n\t        /** Appending first-level block buttons */\n\t        toolbar.appendChild(blockButtons);\n\t\n\t        /** Append toolbarContent to toolbar */\n\t        toolbar.appendChild(toolbarContent);\n\t\n\t        /** Make toolbar global */\n\t        editor.nodes.toolbar = toolbar;\n\t\n\t        return toolbar;\n\t    };\n\t\n\t    var makeToolbarContent_ = function makeToolbarContent_() {\n\t\n\t        var toolbarContent = editor.draw.toolbarContent(),\n\t            toolbox = editor.draw.toolbox(),\n\t            plusButton = editor.draw.plusButton();\n\t\n\t        /** Append plus button */\n\t        toolbarContent.appendChild(plusButton);\n\t\n\t        /** Appending toolbar tools */\n\t        toolbarContent.appendChild(toolbox);\n\t\n\t        /** Make Toolbox and plusButton global */\n\t        editor.nodes.toolbox = toolbox;\n\t        editor.nodes.plusButton = plusButton;\n\t\n\t        return toolbarContent;\n\t    };\n\t\n\t    var makeToolbarSettings_ = function makeToolbarSettings_() {\n\t\n\t        var blockSettings = editor.draw.blockSettings(),\n\t            blockButtons = editor.draw.blockButtons(),\n\t            defaultSettings = editor.draw.defaultSettings(),\n\t            showSettingsButton = editor.draw.settingsButton(),\n\t            showTrashButton = editor.toolbar.settings.makeRemoveBlockButton(),\n\t            pluginSettings = editor.draw.pluginsSettings();\n\t\n\t        /** Add default and plugins settings */\n\t        blockSettings.appendChild(pluginSettings);\n\t        blockSettings.appendChild(defaultSettings);\n\t\n\t        /**\n\t         * Make blocks buttons\n\t         * This block contains settings button and remove block button\n\t         */\n\t        blockButtons.appendChild(showSettingsButton);\n\t        blockButtons.appendChild(showTrashButton);\n\t        blockButtons.appendChild(blockSettings);\n\t\n\t        /** Make BlockSettings, PluginSettings, DefaultSettings global */\n\t        editor.nodes.blockSettings = blockSettings;\n\t        editor.nodes.pluginSettings = pluginSettings;\n\t        editor.nodes.defaultSettings = defaultSettings;\n\t        editor.nodes.showSettingsButton = showSettingsButton;\n\t        editor.nodes.showTrashButton = showTrashButton;\n\t\n\t        return blockButtons;\n\t    };\n\t\n\t    /** Draw notifications holder */\n\t    var makeNotificationHolder_ = function makeNotificationHolder_() {\n\t\n\t        /** Append block with notifications to the document */\n\t        editor.nodes.notifications = editor.notifications.createHolder();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Append tools passed in editor.tools\n\t     */\n\t    var addTools_ = function addTools_() {\n\t\n\t        var tool, toolName, toolButton;\n\t\n\t        for (toolName in editor.settings.tools) {\n\t\n\t            tool = editor.settings.tools[toolName];\n\t\n\t            editor.tools[toolName] = tool;\n\t\n\t            if (!tool.iconClassname && tool.displayInToolbox) {\n\t\n\t                editor.core.log('Toolbar icon classname missed. Tool %o skipped', 'warn', toolName);\n\t                continue;\n\t            }\n\t\n\t            if (typeof tool.render != 'function') {\n\t\n\t                editor.core.log('render method missed. Tool %o skipped', 'warn', toolName);\n\t                continue;\n\t            }\n\t\n\t            if (!tool.displayInToolbox) {\n\t\n\t                continue;\n\t            } else {\n\t\n\t                /** if tools is for toolbox */\n\t                toolButton = editor.draw.toolbarButton(toolName, tool.iconClassname);\n\t\n\t                editor.nodes.toolbox.appendChild(toolButton);\n\t\n\t                editor.nodes.toolbarButtons[toolName] = toolButton;\n\t            }\n\t        }\n\t    };\n\t\n\t    var addInlineToolbarTools_ = function addInlineToolbarTools_() {\n\t\n\t        var tools = {\n\t\n\t            bold: {\n\t                icon: 'ce-icon-bold',\n\t                command: 'bold'\n\t            },\n\t\n\t            italic: {\n\t                icon: 'ce-icon-italic',\n\t                command: 'italic'\n\t            },\n\t\n\t            underline: {\n\t                icon: 'ce-icon-underline',\n\t                command: 'underline'\n\t            },\n\t\n\t            link: {\n\t                icon: 'ce-icon-link',\n\t                command: 'createLink'\n\t            }\n\t        };\n\t\n\t        var toolButton, tool;\n\t\n\t        for (var name in tools) {\n\t\n\t            tool = tools[name];\n\t\n\t            toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n\t\n\t            editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n\t            /**\n\t             * Add callbacks to this buttons\n\t             */\n\t            editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Bind editor UI events\n\t     */\n\t    var bindEvents_ = function bindEvents_() {\n\t\n\t        editor.core.log('ui.bindEvents fired', 'info');\n\t\n\t        // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n\t        //     editor.notifications.errorThrown(errorMsg, event);\n\t        // }, false );\n\t\n\t        /** All keydowns on Document */\n\t        editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n\t\n\t        /** All keydowns on Redactor zone */\n\t        editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n\t\n\t        /** All keydowns on Document */\n\t        editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false);\n\t\n\t        /**\n\t         * Mouse click to radactor\n\t         */\n\t        editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false);\n\t\n\t        /**\n\t         * Clicks to the Plus button\n\t         */\n\t        editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n\t\n\t        /**\n\t         * Clicks to SETTINGS button in toolbar\n\t         */\n\t        editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false);\n\t\n\t        /** Bind click listeners on toolbar buttons */\n\t        for (var button in editor.nodes.toolbarButtons) {\n\t\n\t            editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n\t        }\n\t    };\n\t\n\t    ui.addBlockHandlers = function (block) {\n\t\n\t        if (!block) return;\n\t\n\t        /**\n\t         * Block keydowns\n\t         */\n\t        editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n\t\n\t        /**\n\t         * Pasting content from another source\n\t         * We have two type of sanitization\n\t         * First - uses deep-first search algorithm to get sub nodes,\n\t         * sanitizes whole Block_content and replaces cleared nodes\n\t         * This method is deprecated\n\t         * Method is used in editor.callback.blockPaste(event)\n\t         *\n\t         * Secont - uses Mutation observer.\n\t         * Observer \"observe\" DOM changes and send changings to callback.\n\t         * Callback gets changed node, not whole Block_content.\n\t         * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n\t         *\n\t         * Method is used in editor.callback.blockPasteViaSanitize(event)\n\t         *\n\t         * @uses html-janitor\n\t         * @example editor.callback.blockPasteViaSanitize(event), the second method.\n\t         *\n\t         */\n\t        editor.listeners.add(block, 'paste', editor.callback.blockPasteCallback, false);\n\t\n\t        editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n\t    };\n\t\n\t    /** getting all contenteditable elements */\n\t    ui.saveInputs = function () {\n\t\n\t        var redactor = editor.nodes.redactor;\n\t\n\t        editor.state.inputs = [];\n\t\n\t        /** Save all inputs in global variable state */\n\t        var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n\t\n\t        Array.prototype.map.call(inputs, function (current) {\n\t\n\t            if (!current.type || current.type == 'text' || current.type == 'textarea') {\n\t\n\t                editor.state.inputs.push(current);\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Adds first initial block on empty redactor\n\t     */\n\t    ui.addInitialBlock = function () {\n\t\n\t        var initialBlockType = editor.settings.initialBlockPlugin,\n\t            initialBlock;\n\t\n\t        if (!editor.tools[initialBlockType]) {\n\t\n\t            editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n\t            return;\n\t        }\n\t\n\t        initialBlock = editor.tools[initialBlockType].render();\n\t\n\t        initialBlock.setAttribute('data-placeholder', 'Расскажите свою историю...');\n\t\n\t        editor.content.insertBlock({\n\t            type: initialBlockType,\n\t            block: initialBlock\n\t        });\n\t\n\t        editor.content.workingNodeChanged(initialBlock);\n\t    };\n\t\n\t    ui.setInlineToolbarButtonBehaviour = function (button, type) {\n\t\n\t        editor.listeners.add(button, 'mousedown', function (event) {\n\t\n\t            editor.toolbar.inline.toolClicked(event, type);\n\t        }, false);\n\t    };\n\t\n\t    return ui;\n\t}({});\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t *\n\t * Codex.Editor Transport Module\n\t *\n\t * @copyright 2017 Codex-Team\n\t * @version 1.2.0\n\t */\n\t\n\tmodule.exports = function (transport) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @type {null} | {DOMElement} input - keeps input element in memory\n\t     */\n\t    transport.input = null;\n\t\n\t    /**\n\t     * @property {Object} arguments - keep plugin settings and defined callbacks\n\t     */\n\t    transport.arguments = null;\n\t\n\t    /**\n\t     * Prepares input element where will be files\n\t     */\n\t    transport.prepare = function () {\n\t\n\t        var input = editor.draw.node('INPUT', '', { type: 'file' });\n\t\n\t        editor.listeners.add(input, 'change', editor.transport.fileSelected);\n\t        editor.transport.input = input;\n\t    };\n\t\n\t    /** Clear input when files is uploaded */\n\t    transport.clearInput = function () {\n\t\n\t        /** Remove old input */\n\t        transport.input = null;\n\t\n\t        /** Prepare new one */\n\t        transport.prepare();\n\t    };\n\t\n\t    /**\n\t     * Callback for file selection\n\t     * @param {Event} event\n\t     */\n\t    transport.fileSelected = function () {\n\t\n\t        var input = this,\n\t            i,\n\t            files = input.files,\n\t            formData = new FormData();\n\t\n\t        if (editor.transport.arguments.multiple === false) {\n\t\n\t            formData.append('files', files[0], files[0].name);\n\t        } else {\n\t\n\t            for (i = 0; i < files.length; i++) {\n\t\n\t                formData.append('files[]', files[i], files[i].name);\n\t            }\n\t        }\n\t\n\t        editor.core.ajax({\n\t            type: 'POST',\n\t            data: formData,\n\t            url: editor.transport.arguments.url,\n\t            beforeSend: editor.transport.arguments.beforeSend,\n\t            success: editor.transport.arguments.success,\n\t            error: editor.transport.arguments.error\n\t        });\n\t\n\t        /** Clear input */\n\t        transport.clearInput();\n\t    };\n\t\n\t    /**\n\t     * Use plugin callbacks\n\t     * @protected\n\t     *\n\t     * @param {Object} args - can have :\n\t     * @param {String} args.url - fetch URL\n\t     * @param {Function} args.beforeSend - function calls before sending ajax\n\t     * @param {Function} args.success - success callback\n\t     * @param {Function} args.error - on error handler\n\t     * @param {Boolean} args.multiple - allow select several files\n\t     * @param {String} args.accept - adds accept attribute\n\t     */\n\t    transport.selectAndUpload = function (args) {\n\t\n\t        transport.arguments = args;\n\t\n\t        if (args.multiple === true) {\n\t\n\t            transport.input.setAttribute('multiple', 'multiple');\n\t        }\n\t\n\t        if (args.accept) {\n\t\n\t            transport.input.setAttribute('accept', args.accept);\n\t        }\n\t\n\t        transport.input.click();\n\t    };\n\t\n\t    return transport;\n\t}({});\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Renderer Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (renderer) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Asyncronously parses input JSON to redactor blocks\n\t     */\n\t    renderer.makeBlocksFromData = function () {\n\t\n\t        /**\n\t         * If redactor is empty, add first paragraph to start writing\n\t         */\n\t        if (editor.core.isEmpty(editor.state.blocks) || !editor.state.blocks.items.length) {\n\t\n\t            editor.ui.addInitialBlock();\n\t            return;\n\t        }\n\t\n\t        Promise.resolve()\n\t\n\t        /** First, get JSON from state */\n\t        .then(function () {\n\t\n\t            return editor.state.blocks;\n\t        })\n\t\n\t        /** Then, start to iterate they */\n\t        .then(editor.renderer.appendBlocks)\n\t\n\t        /** Write log if something goes wrong */\n\t        .catch(function (error) {\n\t\n\t            editor.core.log('Error while parsing JSON: %o', 'error', error);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Parses JSON to blocks\n\t     * @param {object} data\n\t     * @return Primise -> nodeList\n\t     */\n\t    renderer.appendBlocks = function (data) {\n\t\n\t        var blocks = data.items;\n\t\n\t        /**\n\t         * Sequence of one-by-one blocks appending\n\t         * Uses to save blocks order after async-handler\n\t         */\n\t        var nodeSequence = Promise.resolve();\n\t\n\t        for (var index = 0; index < blocks.length; index++) {\n\t\n\t            /** Add node to sequence at specified index */\n\t            editor.renderer.appendNodeAtIndex(nodeSequence, blocks, index);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Append node at specified index\n\t     */\n\t    renderer.appendNodeAtIndex = function (nodeSequence, blocks, index) {\n\t\n\t        /** We need to append node to sequence */\n\t        nodeSequence\n\t\n\t        /** first, get node async-aware */\n\t        .then(function () {\n\t\n\t            return editor.renderer.getNodeAsync(blocks, index);\n\t        })\n\t\n\t        /**\n\t         * second, compose editor-block from JSON object\n\t         */\n\t        .then(editor.renderer.createBlockFromData)\n\t\n\t        /**\n\t         * now insert block to redactor\n\t         */\n\t        .then(function (blockData) {\n\t\n\t            /**\n\t             * blockData has 'block', 'type' and 'stretched' information\n\t             */\n\t            editor.content.insertBlock(blockData);\n\t\n\t            /** Pass created block to next step */\n\t            return blockData.block;\n\t        })\n\t\n\t        /** Log if something wrong with node */\n\t        .catch(function (error) {\n\t\n\t            editor.core.log('Node skipped while parsing because %o', 'error', error);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Asynchronously returns block data from blocksList by index\n\t     * @return Promise to node\n\t     */\n\t    renderer.getNodeAsync = function (blocksList, index) {\n\t\n\t        return Promise.resolve().then(function () {\n\t\n\t            return {\n\t                tool: blocksList[index],\n\t                position: index\n\t            };\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Creates editor block by JSON-data\n\t     *\n\t     * @uses render method of each plugin\n\t     *\n\t     * @param {Object} toolData.tool\n\t     *                              { header : {\n\t     *                                                text: '',\n\t     *                                                type: 'H3', ...\n\t     *                                            }\n\t     *                               }\n\t     * @param {Number} toolData.position - index in input-blocks array\n\t     * @return {Object} with type and Element\n\t     */\n\t    renderer.createBlockFromData = function (toolData) {\n\t\n\t        /** New parser */\n\t        var block,\n\t            tool = toolData.tool,\n\t            pluginName = tool.type;\n\t\n\t        /** Get first key of object that stores plugin name */\n\t        // for (var pluginName in blockData) break;\n\t\n\t        /** Check for plugin existance */\n\t        if (!editor.tools[pluginName]) {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB not found');\n\t        }\n\t\n\t        /** Check for plugin having render method */\n\t        if (typeof editor.tools[pluginName].render != 'function') {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB must have \\xABrender\\xBB method');\n\t        }\n\t\n\t        if (editor.tools[pluginName].available === false) {\n\t\n\t            block = editor.draw.unavailableBlock();\n\t\n\t            block.innerHTML = editor.tools[pluginName].loadingMessage;\n\t\n\t            /**\n\t            * Saver will extract data from initial block data by position in array\n\t            */\n\t            block.dataset.inputPosition = toolData.position;\n\t        } else {\n\t\n\t            /** New Parser */\n\t            block = editor.tools[pluginName].render(tool.data);\n\t        }\n\t\n\t        /** is first-level block stretched */\n\t        var stretched = editor.tools[pluginName].isStretched || false;\n\t\n\t        /** Retrun type and block */\n\t        return {\n\t            type: pluginName,\n\t            block: block,\n\t            stretched: stretched\n\t        };\n\t    };\n\t\n\t    return renderer;\n\t}({});\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Saver\n\t *\n\t * @author Codex Team\n\t * @version 1.0.2\n\t */\n\t\n\tmodule.exports = function (saver) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Saves blocks\n\t     * @private\n\t     */\n\t    saver.saveBlocks = function () {\n\t\n\t        /** Save html content of redactor to memory */\n\t        editor.state.html = editor.nodes.redactor.innerHTML;\n\t\n\t        /** Empty jsonOutput state */\n\t        editor.state.jsonOutput = [];\n\t\n\t        Promise.resolve().then(function () {\n\t\n\t            return editor.nodes.redactor.childNodes;\n\t        })\n\t        /** Making a sequence from separate blocks */\n\t        .then(editor.saver.makeQueue).then(function () {\n\t            // editor.nodes.textarea.innerHTML = editor.state.html;\n\t        }).catch(function (error) {\n\t\n\t            editor.core.log(error);\n\t        });\n\t    };\n\t\n\t    saver.makeQueue = function (blocks) {\n\t\n\t        var queue = Promise.resolve();\n\t\n\t        for (var index = 0; index < blocks.length; index++) {\n\t\n\t            /** Add node to sequence at specified index */\n\t            editor.saver.getBlockData(queue, blocks, index);\n\t        }\n\t    };\n\t\n\t    /** Gets every block and makes From Data */\n\t    saver.getBlockData = function (queue, blocks, index) {\n\t\n\t        queue.then(function () {\n\t\n\t            return editor.saver.getNodeAsync(blocks, index);\n\t        }).then(editor.saver.makeFormDataFromBlocks);\n\t    };\n\t\n\t    /**\n\t     * Asynchronously returns block data from blocksList by index\n\t     * @return Promise to node\n\t     */\n\t    saver.getNodeAsync = function (blocksList, index) {\n\t\n\t        return Promise.resolve().then(function () {\n\t\n\t            return blocksList[index];\n\t        });\n\t    };\n\t\n\t    saver.makeFormDataFromBlocks = function (block) {\n\t\n\t        var pluginName = block.dataset.tool;\n\t\n\t        /** Check for plugin existance */\n\t        if (!editor.tools[pluginName]) {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB not found');\n\t        }\n\t\n\t        /** Check for plugin having render method */\n\t        if (typeof editor.tools[pluginName].save != 'function') {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB must have save method');\n\t        }\n\t\n\t        /** Result saver */\n\t        var blockContent = block.childNodes[0],\n\t            pluginsContent = blockContent.childNodes[0],\n\t            savedData,\n\t            position,\n\t            output;\n\t\n\t        /** If plugin wasn't available then return data from cache */\n\t        if (editor.tools[pluginName].available === false) {\n\t\n\t            position = pluginsContent.dataset.inputPosition;\n\t            savedData = codex.editor.state.blocks.items[position].data;\n\t        } else {\n\t\n\t            savedData = editor.tools[pluginName].save(pluginsContent);\n\t\n\t            if (editor.tools[pluginName].validate) {\n\t\n\t                var result = editor.tools[pluginName].validate(savedData);\n\t\n\t                /**\n\t                 * Do not allow invalid data\n\t                 */\n\t                if (!result) return;\n\t            }\n\t        }\n\t\n\t        output = {\n\t            type: pluginName,\n\t            data: savedData\n\t        };\n\t\n\t        editor.state.jsonOutput.push(output);\n\t    };\n\t\n\t    return saver;\n\t}({});\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Content Module\n\t * Works with DOM\n\t *\n\t * @module Codex Editor content module\n\t *\n\t * @author Codex Team\n\t * @version 1.3.13\n\t *\n\t * @description Module works with Elements that have been appended to the main DOM\n\t */\n\t\n\tmodule.exports = function (content) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Links to current active block\n\t     * @type {null | Element}\n\t     */\n\t    content.currentNode = null;\n\t\n\t    /**\n\t     * clicked in redactor area\n\t     * @type {null | Boolean}\n\t     */\n\t    content.editorAreaHightlighted = null;\n\t\n\t    /**\n\t     * @deprecated\n\t     * Synchronizes redactor with original textarea\n\t     */\n\t    content.sync = function () {\n\t\n\t        editor.core.log('syncing...');\n\t\n\t        /**\n\t         * Save redactor content to editor.state\n\t         */\n\t        editor.state.html = editor.nodes.redactor.innerHTML;\n\t    };\n\t\n\t    /**\n\t     * Appends background to the block\n\t     *\n\t     * @description add CSS class to highlight visually first-level block area\n\t     */\n\t    content.markBlock = function () {\n\t\n\t        editor.content.currentNode.classList.add(editor.ui.className.BLOCK_HIGHLIGHTED);\n\t    };\n\t\n\t    /**\n\t     * Clear background\n\t     *\n\t     * @description clears styles that highlights block\n\t     */\n\t    content.clearMark = function () {\n\t\n\t        if (editor.content.currentNode) {\n\t\n\t            editor.content.currentNode.classList.remove(editor.ui.className.BLOCK_HIGHLIGHTED);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Finds first-level block\n\t     *\n\t     * @param {Element} node - selected or clicked in redactors area node\n\t     * @protected\n\t     *\n\t     * @description looks for first-level block.\n\t     * gets parent while node is not first-level\n\t     */\n\t    content.getFirstLevelBlock = function (node) {\n\t\n\t        if (!editor.core.isDomNode(node)) {\n\t\n\t            node = node.parentNode;\n\t        }\n\t\n\t        if (node === editor.nodes.redactor || node === document.body) {\n\t\n\t            return null;\n\t        } else {\n\t\n\t            while (!node.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\t\n\t                node = node.parentNode;\n\t            }\n\t\n\t            return node;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger this event when working node changed\n\t     * @param {Element} targetNode - first-level of this node will be current\n\t     * @protected\n\t     *\n\t     * @description If targetNode is first-level then we set it as current else we look for parents to find first-level\n\t     */\n\t    content.workingNodeChanged = function (targetNode) {\n\t\n\t        /** Clear background from previous marked block before we change */\n\t        editor.content.clearMark();\n\t\n\t        if (!targetNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        this.currentNode = this.getFirstLevelBlock(targetNode);\n\t    };\n\t\n\t    /**\n\t     * Replaces one redactor block with another\n\t     * @protected\n\t     * @param {Element} targetBlock - block to replace. Mostly currentNode.\n\t     * @param {Element} newBlock\n\t     * @param {string} newBlockType - type of new block; we need to store it to data-attribute\n\t     *\n\t     * [!] Function does not saves old block content.\n\t     *     You can get it manually and pass with newBlock.innerHTML\n\t     */\n\t    content.replaceBlock = function (targetBlock, newBlock) {\n\t\n\t        if (!targetBlock || !newBlock) {\n\t\n\t            editor.core.log('replaceBlock: missed params');\n\t            return;\n\t        }\n\t\n\t        /** If target-block is not a frist-level block, then we iterate parents to find it */\n\t        while (!targetBlock.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\t\n\t            targetBlock = targetBlock.parentNode;\n\t        }\n\t\n\t        /** Replacing */\n\t        editor.nodes.redactor.replaceChild(newBlock, targetBlock);\n\t\n\t        /**\n\t         * Set new node as current\n\t         */\n\t        editor.content.workingNodeChanged(newBlock);\n\t\n\t        /**\n\t         * Add block handlers\n\t         */\n\t        editor.ui.addBlockHandlers(newBlock);\n\t\n\t        /**\n\t         * Save changes\n\t         */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Inserts new block to redactor\n\t     * Wrapps block into a DIV with BLOCK_CLASSNAME class\n\t     *\n\t     * @param blockData          {object}\n\t     * @param blockData.block    {Element}   element with block content\n\t     * @param blockData.type     {string}    block plugin\n\t     * @param needPlaceCaret     {bool}      pass true to set caret in new block\n\t     *\n\t     */\n\t    content.insertBlock = function (blockData, needPlaceCaret) {\n\t\n\t        var workingBlock = editor.content.currentNode,\n\t            newBlockContent = blockData.block,\n\t            blockType = blockData.type,\n\t            isStretched = blockData.stretched;\n\t\n\t        var newBlock = composeNewBlock_(newBlockContent, blockType, isStretched);\n\t\n\t        if (workingBlock) {\n\t\n\t            editor.core.insertAfter(workingBlock, newBlock);\n\t        } else {\n\t\n\t            /**\n\t             * If redactor is empty, append as first child\n\t             */\n\t            editor.nodes.redactor.appendChild(newBlock);\n\t        }\n\t\n\t        /**\n\t         * Block handler\n\t         */\n\t        editor.ui.addBlockHandlers(newBlock);\n\t\n\t        /**\n\t         * Set new node as current\n\t         */\n\t        editor.content.workingNodeChanged(newBlock);\n\t\n\t        /**\n\t         * Save changes\n\t         */\n\t        editor.ui.saveInputs();\n\t\n\t        if (needPlaceCaret) {\n\t\n\t            /**\n\t             * If we don't know input index then we set default value -1\n\t             */\n\t            var currentInputIndex = editor.caret.getCurrentInputIndex() || -1;\n\t\n\t            if (currentInputIndex == -1) {\n\t\n\t                var editableElement = newBlock.querySelector('[contenteditable]'),\n\t                    emptyText = document.createTextNode('');\n\t\n\t                editableElement.appendChild(emptyText);\n\t                editor.caret.set(editableElement, 0, 0);\n\t\n\t                editor.toolbar.move();\n\t                editor.toolbar.showPlusButton();\n\t            } else {\n\t\n\t                if (currentInputIndex === editor.state.inputs.length - 1) return;\n\t\n\t                /** Timeout for browsers execution */\n\t                window.setTimeout(function () {\n\t\n\t                    /** Setting to the new input */\n\t                    editor.caret.setToNextBlock(currentInputIndex);\n\t                    editor.toolbar.move();\n\t                    editor.toolbar.open();\n\t                }, 10);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Block is inserted, wait for new click that defined focusing on editors area\n\t         * @type {boolean}\n\t         */\n\t        content.editorAreaHightlighted = false;\n\t    };\n\t\n\t    /**\n\t     * Replaces blocks with saving content\n\t     * @protected\n\t     * @param {Element} noteToReplace\n\t     * @param {Element} newNode\n\t     * @param {Element} blockType\n\t     */\n\t    content.switchBlock = function (blockToReplace, newBlock, tool) {\n\t\n\t        tool = tool || editor.content.currentNode.dataset.tool;\n\t        var newBlockComposed = composeNewBlock_(newBlock, tool);\n\t\n\t        /** Replacing */\n\t        editor.content.replaceBlock(blockToReplace, newBlockComposed);\n\t\n\t        /** Save new Inputs when block is changed */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    /**\n\t     * Iterates between child noted and looking for #text node on deepest level\n\t     * @protected\n\t     *\n\t     * @param {Element} block - node where find\n\t     * @param {int} postiton - starting postion\n\t     *      Example: childNodex.length to find from the end\n\t     *               or 0 to find from the start\n\t     * @return {Text} block\n\t     * @uses DFS\n\t     */\n\t    content.getDeepestTextNodeFromPosition = function (block, position) {\n\t\n\t        /**\n\t         * Clear Block from empty and useless spaces with trim.\n\t         * Such nodes we should remove\n\t         */\n\t        var blockChilds = block.childNodes,\n\t            index,\n\t            node,\n\t            text;\n\t\n\t        for (index = 0; index < blockChilds.length; index++) {\n\t\n\t            node = blockChilds[index];\n\t\n\t            if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t                text = node.textContent.trim();\n\t\n\t                /** Text is empty. We should remove this child from node before we start DFS\n\t                 * decrease the quantity of childs.\n\t                 */\n\t                if (text === '') {\n\t\n\t                    block.removeChild(node);\n\t                    position--;\n\t                }\n\t            }\n\t        }\n\t\n\t        if (block.childNodes.length === 0) {\n\t\n\t            return document.createTextNode('');\n\t        }\n\t\n\t        /** Setting default position when we deleted all empty nodes */\n\t        if (position < 0) position = 1;\n\t\n\t        var lookingFromStart = false;\n\t\n\t        /** For looking from START */\n\t        if (position === 0) {\n\t\n\t            lookingFromStart = true;\n\t            position = 1;\n\t        }\n\t\n\t        while (position) {\n\t\n\t            /** initial verticle of node. */\n\t            if (lookingFromStart) {\n\t\n\t                block = block.childNodes[0];\n\t            } else {\n\t\n\t                block = block.childNodes[position - 1];\n\t            }\n\t\n\t            if (block.nodeType == editor.core.nodeTypes.TAG) {\n\t\n\t                position = block.childNodes.length;\n\t            } else if (block.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t                position = 0;\n\t            }\n\t        }\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * @param {Element} block - current plugins render\n\t     * @param {String} tool - plugins name\n\t     * @param {Boolean} isStretched - make stretched block or not\n\t     *\n\t     * @description adds necessary information to wrap new created block by first-level holder\n\t     */\n\t    var composeNewBlock_ = function composeNewBlock_(block, tool, isStretched) {\n\t\n\t        var newBlock = editor.draw.node('DIV', editor.ui.className.BLOCK_CLASSNAME, {}),\n\t            blockContent = editor.draw.node('DIV', editor.ui.className.BLOCK_CONTENT, {});\n\t\n\t        blockContent.appendChild(block);\n\t        newBlock.appendChild(blockContent);\n\t\n\t        if (isStretched) {\n\t\n\t            blockContent.classList.add(editor.ui.className.BLOCK_STRETCHED);\n\t        }\n\t\n\t        newBlock.dataset.tool = tool;\n\t        return newBlock;\n\t    };\n\t\n\t    /**\n\t     * Returns Range object of current selection\n\t     * @protected\n\t     */\n\t    content.getRange = function () {\n\t\n\t        var selection = window.getSelection().getRangeAt(0);\n\t\n\t        return selection;\n\t    };\n\t\n\t    /**\n\t     * Divides block in two blocks (after and before caret)\n\t     *\n\t     * @protected\n\t     * @param {int} inputIndex - target input index\n\t     *\n\t     * @description splits current input content to the separate blocks\n\t     * When enter is pressed among the words, that text will be splited.\n\t     */\n\t    content.splitBlock = function (inputIndex) {\n\t\n\t        var selection = window.getSelection(),\n\t            anchorNode = selection.anchorNode,\n\t            anchorNodeText = anchorNode.textContent,\n\t            caretOffset = selection.anchorOffset,\n\t            textBeforeCaret,\n\t            textNodeBeforeCaret,\n\t            textAfterCaret,\n\t            textNodeAfterCaret;\n\t\n\t        var currentBlock = editor.content.currentNode.querySelector('[contentEditable]');\n\t\n\t        textBeforeCaret = anchorNodeText.substring(0, caretOffset);\n\t        textAfterCaret = anchorNodeText.substring(caretOffset);\n\t\n\t        textNodeBeforeCaret = document.createTextNode(textBeforeCaret);\n\t\n\t        if (textAfterCaret) {\n\t\n\t            textNodeAfterCaret = document.createTextNode(textAfterCaret);\n\t        }\n\t\n\t        var previousChilds = [],\n\t            nextChilds = [],\n\t            reachedCurrent = false;\n\t\n\t        if (textNodeAfterCaret) {\n\t\n\t            nextChilds.push(textNodeAfterCaret);\n\t        }\n\t\n\t        for (var i = 0, child; !!(child = currentBlock.childNodes[i]); i++) {\n\t\n\t            if (child != anchorNode) {\n\t\n\t                if (!reachedCurrent) {\n\t\n\t                    previousChilds.push(child);\n\t                } else {\n\t\n\t                    nextChilds.push(child);\n\t                }\n\t            } else {\n\t\n\t                reachedCurrent = true;\n\t            }\n\t        }\n\t\n\t        /** Clear current input */\n\t        editor.state.inputs[inputIndex].innerHTML = '';\n\t\n\t        /**\n\t         * Append all childs founded before anchorNode\n\t         */\n\t        var previousChildsLength = previousChilds.length;\n\t\n\t        for (i = 0; i < previousChildsLength; i++) {\n\t\n\t            editor.state.inputs[inputIndex].appendChild(previousChilds[i]);\n\t        }\n\t\n\t        editor.state.inputs[inputIndex].appendChild(textNodeBeforeCaret);\n\t\n\t        /**\n\t         * Append text node which is after caret\n\t         */\n\t        var nextChildsLength = nextChilds.length,\n\t            newNode = document.createElement('div');\n\t\n\t        for (i = 0; i < nextChildsLength; i++) {\n\t\n\t            newNode.appendChild(nextChilds[i]);\n\t        }\n\t\n\t        newNode = newNode.innerHTML;\n\t\n\t        /** This type of block creates when enter is pressed */\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        /**\n\t         * Make new paragraph with text after caret\n\t         */\n\t        editor.content.insertBlock({\n\t            type: NEW_BLOCK_TYPE,\n\t            block: editor.tools[NEW_BLOCK_TYPE].render({\n\t                text: newNode\n\t            })\n\t        }, true);\n\t    };\n\t\n\t    /**\n\t     * Merges two blocks — current and target\n\t     * If target index is not exist, then previous will be as target\n\t     *\n\t     * @protected\n\t     * @param {int} currentInputIndex\n\t     * @param {int} targetInputIndex\n\t     *\n\t     * @description gets two inputs indexes and merges into one\n\t     */\n\t    content.mergeBlocks = function (currentInputIndex, targetInputIndex) {\n\t\n\t        /** If current input index is zero, then prevent method execution */\n\t        if (currentInputIndex === 0) {\n\t\n\t            return;\n\t        }\n\t\n\t        var targetInput,\n\t            currentInputContent = editor.state.inputs[currentInputIndex].innerHTML;\n\t\n\t        if (!targetInputIndex) {\n\t\n\t            targetInput = editor.state.inputs[currentInputIndex - 1];\n\t        } else {\n\t\n\t            targetInput = editor.state.inputs[targetInputIndex];\n\t        }\n\t\n\t        targetInput.innerHTML += currentInputContent;\n\t    };\n\t\n\t    /**\n\t     * @deprecated\n\t     *\n\t     * Callback for HTML Mutations\n\t     * @param {Array} mutation - Mutation Record\n\t     */\n\t    content.paste = function (mutation) {\n\t\n\t        var workingNode = editor.content.currentNode,\n\t            tool = workingNode.dataset.tool;\n\t\n\t        if (editor.tools[tool].allowedToPaste) {\n\t\n\t            editor.content.sanitize.call(this, mutation.target);\n\t        } else {\n\t\n\t            editor.content.pasteTextContent(mutation.addedNodes);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @deprecated\n\t     *\n\t     * gets only text/plain content of node\n\t     * @param {Element} target - HTML node\n\t     */\n\t    content.pasteTextContent = function (nodes) {\n\t\n\t        var node = nodes[0],\n\t            textNode;\n\t\n\t        if (!node) {\n\t\n\t            return;\n\t        }\n\t\n\t        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t            textNode = document.createTextNode(node);\n\t        } else {\n\t\n\t            textNode = document.createTextNode(node.textContent);\n\t        }\n\t\n\t        if (editor.core.isDomNode(node)) {\n\t\n\t            node.parentNode.replaceChild(textNode, node);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @deprecated\n\t     *\n\t     * Sanitizes HTML content\n\t     * @param {Element} target - inserted element\n\t     * @uses Sanitize library html-janitor\n\t     */\n\t    content.sanitize = function (target) {\n\t\n\t        if (!target) {\n\t\n\t            return;\n\t        }\n\t\n\t        var node = target[0];\n\t\n\t        if (!node) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Disconnect Observer\n\t         * hierarchy of function calls inherits context of observer\n\t         */\n\t        this.disconnect();\n\t\n\t        /**\n\t         * Don't sanitize text node\n\t         */\n\t        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Clear dirty content\n\t         */\n\t        var cleaner = editor.sanitizer.init(editor.satinizer.Config.BASIC),\n\t            clean = cleaner.clean(target.outerHTML);\n\t\n\t        var div = editor.draw.node('DIV', [], { innerHTML: clean });\n\t\n\t        node.replaceWith(div.childNodes[0]);\n\t    };\n\t\n\t    /**\n\t     * Iterates all right siblings and parents, which has right siblings\n\t     * while it does not reached the first-level block\n\t     *\n\t     * @param {Element} node\n\t     * @return {boolean}\n\t     */\n\t    content.isLastNode = function (node) {\n\t\n\t        // console.log('погнали перебор родителей');\n\t\n\t        var allChecked = false;\n\t\n\t        while (!allChecked) {\n\t\n\t            // console.log('Смотрим на %o', node);\n\t            // console.log('Проверим, пустые ли соседи справа');\n\t\n\t            if (!allSiblingsEmpty_(node)) {\n\t\n\t                // console.log('Есть непустые соседи. Узел не последний. Выходим.');\n\t                return false;\n\t            }\n\t\n\t            node = node.parentNode;\n\t\n\t            /**\n\t             * Проверяем родителей до тех пор, пока не найдем блок первого уровня\n\t             */\n\t            if (node.classList.contains(editor.ui.className.BLOCK_CONTENT)) {\n\t\n\t                allChecked = true;\n\t            }\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * Checks if all element right siblings is empty\n\t     * @param node\n\t     */\n\t    var allSiblingsEmpty_ = function allSiblingsEmpty_(node) {\n\t\n\t        /**\n\t         * Нужно убедиться, что после пустого соседа ничего нет\n\t         */\n\t        var sibling = node.nextSibling;\n\t\n\t        while (sibling) {\n\t\n\t            if (sibling.textContent.length) {\n\t\n\t                return false;\n\t            }\n\t\n\t            sibling = sibling.nextSibling;\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * @param [String] htmlString - html content as string\n\t     * @return {string} - html content as string\n\t     */\n\t    content.wrapTextWithParagraphs = function (htmlString) {\n\t\n\t        var wrapper = document.createElement('DIV'),\n\t            newWrapper = document.createElement('DIV'),\n\t            i,\n\t            paragraph,\n\t            firstLevelBlocks = ['DIV', 'P'],\n\t            blockTyped,\n\t            node;\n\t\n\t        /**\n\t         * Make HTML Element to Wrap Text\n\t         * It allows us to work with input data as HTML content\n\t         */\n\t        wrapper.innerHTML = htmlString;\n\t        paragraph = document.createElement('P');\n\t\n\t        for (i = 0; i < wrapper.childNodes.length; i++) {\n\t\n\t            node = wrapper.childNodes[i];\n\t\n\t            blockTyped = firstLevelBlocks.indexOf(node.tagName) != -1;\n\t\n\t            /**\n\t             * If node is first-levet\n\t             * we add this node to our new wrapper\n\t             */\n\t            if (blockTyped) {\n\t\n\t                /**\n\t                 * If we had splitted inline nodes to paragraph before\n\t                 */\n\t                if (paragraph.childNodes.length) {\n\t\n\t                    newWrapper.appendChild(paragraph.cloneNode(true));\n\t\n\t                    /** empty paragraph */\n\t                    paragraph = null;\n\t                    paragraph = document.createElement('P');\n\t                }\n\t\n\t                newWrapper.appendChild(node.cloneNode(true));\n\t            } else {\n\t\n\t                /** Collect all inline nodes to one as paragraph */\n\t                paragraph.appendChild(node.cloneNode(true));\n\t\n\t                /** if node is last we should append this node to paragraph and paragraph to new wrapper */\n\t                if (i == wrapper.childNodes.length - 1) {\n\t\n\t                    newWrapper.appendChild(paragraph.cloneNode(true));\n\t                }\n\t            }\n\t        }\n\t\n\t        return newWrapper.innerHTML;\n\t    };\n\t\n\t    /**\n\t    * Finds closest Contenteditable parent from Element\n\t    * @param {Element} node     element looking from\n\t    * @return {Element} node    contenteditable\n\t    */\n\t    content.getEditableParent = function (node) {\n\t\n\t        while (node && node.contentEditable != 'true') {\n\t\n\t            node = node.parentNode;\n\t        }\n\t\n\t        return node;\n\t    };\n\t\n\t    return content;\n\t}({});\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor toolbar module\n\t *\n\t * Contains:\n\t *  - Inline toolbox\n\t *  - Toolbox within plus button\n\t *  - Settings section\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (toolbar) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    toolbar.settings = __webpack_require__(9);\n\t    toolbar.inline = __webpack_require__(10);\n\t    toolbar.toolbox = __webpack_require__(11);\n\t\n\t    /**\n\t     * Margin between focused node and toolbar\n\t     */\n\t    toolbar.defaultToolbarHeight = 49;\n\t\n\t    toolbar.defaultOffset = 34;\n\t\n\t    toolbar.opened = false;\n\t\n\t    toolbar.current = null;\n\t\n\t    /**\n\t     * @protected\n\t     */\n\t    toolbar.open = function () {\n\t\n\t        if (editor.hideToolbar) {\n\t\n\t            return;\n\t        }\n\t\n\t        editor.nodes.toolbar.classList.add('opened');\n\t        this.opened = true;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     */\n\t    toolbar.close = function () {\n\t\n\t        editor.nodes.toolbar.classList.remove('opened');\n\t\n\t        toolbar.opened = false;\n\t        toolbar.current = null;\n\t\n\t        for (var button in editor.nodes.toolbarButtons) {\n\t\n\t            editor.nodes.toolbarButtons[button].classList.remove('selected');\n\t        }\n\t\n\t        /** Close toolbox when toolbar is not displayed */\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.close();\n\t    };\n\t\n\t    toolbar.toggle = function () {\n\t\n\t        if (!this.opened) {\n\t\n\t            this.open();\n\t        } else {\n\t\n\t            this.close();\n\t        }\n\t    };\n\t\n\t    toolbar.hidePlusButton = function () {\n\t\n\t        editor.nodes.plusButton.classList.add('hide');\n\t    };\n\t\n\t    toolbar.showPlusButton = function () {\n\t\n\t        editor.nodes.plusButton.classList.remove('hide');\n\t    };\n\t\n\t    /**\n\t     * Moving toolbar to the specified node\n\t     */\n\t    toolbar.move = function () {\n\t\n\t        /** Close Toolbox when we move toolbar */\n\t        editor.toolbar.toolbox.close();\n\t\n\t        if (!editor.content.currentNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        var newYCoordinate = editor.content.currentNode.offsetTop - editor.toolbar.defaultToolbarHeight / 2 + editor.toolbar.defaultOffset;\n\t\n\t        editor.nodes.toolbar.style.transform = 'translate3D(0, ' + Math.floor(newYCoordinate) + 'px, 0)';\n\t\n\t        /** Close trash actions */\n\t        editor.toolbar.settings.hideRemoveActions();\n\t    };\n\t\n\t    return toolbar;\n\t}({});\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Toolbar settings\n\t *\n\t * @version 1.0.4\n\t */\n\t\n\tmodule.exports = function (settings) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    settings.opened = false;\n\t\n\t    settings.setting = null;\n\t    settings.actions = null;\n\t\n\t    /**\n\t     * Append and open settings\n\t     */\n\t    settings.open = function (toolType) {\n\t\n\t        /**\n\t         * Append settings content\n\t         * It's stored in tool.settings\n\t         */\n\t        if (!editor.tools[toolType] || !editor.tools[toolType].makeSettings) {\n\t\n\t            editor.core.log('Plugin \\xAB' + toolType + '\\xBB has no settings', 'warn');\n\t            editor.nodes.pluginSettings.innerHTML = '\\u041F\\u043B\\u0430\\u0433\\u0438\\u043D \\xAB' + toolType + '\\xBB \\u043D\\u0435 \\u0438\\u043C\\u0435\\u0435\\u0442 \\u043D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0435\\u043A';\n\t        } else {\n\t\n\t            /**\n\t             * Draw settings block\n\t             */\n\t            var settingsBlock = editor.tools[toolType].makeSettings();\n\t\n\t            editor.nodes.pluginSettings.appendChild(settingsBlock);\n\t        }\n\t\n\t        /** Open settings block */\n\t        editor.nodes.blockSettings.classList.add('opened');\n\t        this.opened = true;\n\t    };\n\t\n\t    /**\n\t     * Close and clear settings\n\t     */\n\t    settings.close = function () {\n\t\n\t        editor.nodes.blockSettings.classList.remove('opened');\n\t        editor.nodes.pluginSettings.innerHTML = '';\n\t\n\t        this.opened = false;\n\t    };\n\t\n\t    /**\n\t     * @param {string} toolType - plugin type\n\t     */\n\t    settings.toggle = function (toolType) {\n\t\n\t        if (!this.opened) {\n\t\n\t            this.open(toolType);\n\t        } else {\n\t\n\t            this.close();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Here we will draw buttons and add listeners to components\n\t     */\n\t    settings.makeRemoveBlockButton = function () {\n\t\n\t        var removeBlockWrapper = editor.draw.node('SPAN', 'ce-toolbar__remove-btn', {}),\n\t            settingButton = editor.draw.node('SPAN', 'ce-toolbar__remove-setting', { innerHTML: '<i class=\"ce-icon-trash\"></i>' }),\n\t            actionWrapper = editor.draw.node('DIV', 'ce-toolbar__remove-confirmation', {}),\n\t            confirmAction = editor.draw.node('DIV', 'ce-toolbar__remove-confirm', { textContent: 'Удалить блок' }),\n\t            cancelAction = editor.draw.node('DIV', 'ce-toolbar__remove-cancel', { textContent: 'Отмена' });\n\t\n\t        editor.listeners.add(settingButton, 'click', editor.toolbar.settings.removeButtonClicked, false);\n\t\n\t        editor.listeners.add(confirmAction, 'click', editor.toolbar.settings.confirmRemovingRequest, false);\n\t\n\t        editor.listeners.add(cancelAction, 'click', editor.toolbar.settings.cancelRemovingRequest, false);\n\t\n\t        actionWrapper.appendChild(confirmAction);\n\t        actionWrapper.appendChild(cancelAction);\n\t\n\t        removeBlockWrapper.appendChild(settingButton);\n\t        removeBlockWrapper.appendChild(actionWrapper);\n\t\n\t        /** Save setting */\n\t        editor.toolbar.settings.setting = settingButton;\n\t        editor.toolbar.settings.actions = actionWrapper;\n\t\n\t        return removeBlockWrapper;\n\t    };\n\t\n\t    settings.removeButtonClicked = function () {\n\t\n\t        var action = editor.toolbar.settings.actions;\n\t\n\t        if (action.classList.contains('opened')) {\n\t\n\t            editor.toolbar.settings.hideRemoveActions();\n\t        } else {\n\t\n\t            editor.toolbar.settings.showRemoveActions();\n\t        }\n\t\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.close();\n\t    };\n\t\n\t    settings.cancelRemovingRequest = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.remove('opened');\n\t    };\n\t\n\t    settings.confirmRemovingRequest = function () {\n\t\n\t        var currentBlock = editor.content.currentNode,\n\t            firstLevelBlocksCount;\n\t\n\t        currentBlock.remove();\n\t\n\t        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\t\n\t        /**\n\t         * If all blocks are removed\n\t         */\n\t        if (firstLevelBlocksCount === 0) {\n\t\n\t            /** update currentNode variable */\n\t            editor.content.currentNode = null;\n\t\n\t            /** Inserting new empty initial block */\n\t            editor.ui.addInitialBlock();\n\t        }\n\t\n\t        editor.ui.saveInputs();\n\t\n\t        editor.toolbar.close();\n\t    };\n\t\n\t    settings.showRemoveActions = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.add('opened');\n\t    };\n\t\n\t    settings.hideRemoveActions = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.remove('opened');\n\t    };\n\t\n\t    return settings;\n\t}({});\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Inline toolbar\n\t *\n\t * Contains from tools:\n\t * Bold, Italic, Underline and Anchor\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (inline) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    inline.buttonsOpened = null;\n\t    inline.actionsOpened = null;\n\t    inline.wrappersOffset = null;\n\t\n\t    /**\n\t     * saving selection that need for execCommand for styling\n\t     *\n\t     */\n\t    inline.storedSelection = null;\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Open inline toobar\n\t     */\n\t    inline.show = function () {\n\t\n\t        var currentNode = editor.content.currentNode,\n\t            tool = currentNode.dataset.tool,\n\t            plugin;\n\t\n\t        /**\n\t         * tool allowed to open inline toolbar\n\t         */\n\t        plugin = editor.tools[tool];\n\t\n\t        if (!plugin.showInlineToolbar) return;\n\t\n\t        var selectedText = inline.getSelectionText(),\n\t            toolbar = editor.nodes.inlineToolbar.wrapper;\n\t\n\t        if (selectedText.length > 0) {\n\t\n\t            /** Move toolbar and open */\n\t            editor.toolbar.inline.move();\n\t\n\t            /** Open inline toolbar */\n\t            toolbar.classList.add('opened');\n\t\n\t            /** show buttons of inline toolbar */\n\t            editor.toolbar.inline.showButtons();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Closes inline toolbar\n\t     */\n\t    inline.close = function () {\n\t\n\t        var toolbar = editor.nodes.inlineToolbar.wrapper;\n\t\n\t        toolbar.classList.remove('opened');\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Moving toolbar\n\t     */\n\t    inline.move = function () {\n\t\n\t        if (!this.wrappersOffset) {\n\t\n\t            this.wrappersOffset = this.getWrappersOffset();\n\t        }\n\t\n\t        var coords = this.getSelectionCoords(),\n\t            defaultOffset = 0,\n\t            toolbar = editor.nodes.inlineToolbar.wrapper,\n\t            newCoordinateX,\n\t            newCoordinateY;\n\t\n\t        if (toolbar.offsetHeight === 0) {\n\t\n\t            defaultOffset = 40;\n\t        }\n\t\n\t        newCoordinateX = coords.x - this.wrappersOffset.left;\n\t        newCoordinateY = coords.y + window.scrollY - this.wrappersOffset.top - defaultOffset - toolbar.offsetHeight;\n\t\n\t        toolbar.style.transform = 'translate3D(' + Math.floor(newCoordinateX) + 'px, ' + Math.floor(newCoordinateY) + 'px, 0)';\n\t\n\t        /** Close everything */\n\t        editor.toolbar.inline.closeButtons();\n\t        editor.toolbar.inline.closeAction();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Tool Clicked\n\t     */\n\t\n\t    inline.toolClicked = function (event, type) {\n\t\n\t        /**\n\t         * For simple tools we use default browser function\n\t         * For more complicated tools, we should write our own behavior\n\t         */\n\t        switch (type) {\n\t            case 'createLink':\n\t                editor.toolbar.inline.createLinkAction(event, type);break;\n\t            default:\n\t                editor.toolbar.inline.defaultToolAction(type);break;\n\t        }\n\t\n\t        /**\n\t         * highlight buttons\n\t         * after making some action\n\t         */\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Saving wrappers offset in DOM\n\t     */\n\t    inline.getWrappersOffset = function () {\n\t\n\t        var wrapper = editor.nodes.wrapper,\n\t            offset = this.getOffset(wrapper);\n\t\n\t        this.wrappersOffset = offset;\n\t        return offset;\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Calculates offset of DOM element\n\t     *\n\t     * @param el\n\t     * @returns {{top: number, left: number}}\n\t     */\n\t    inline.getOffset = function (el) {\n\t\n\t        var _x = 0;\n\t        var _y = 0;\n\t\n\t        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {\n\t\n\t            _x += el.offsetLeft + el.clientLeft;\n\t            _y += el.offsetTop + el.clientTop;\n\t            el = el.offsetParent;\n\t        }\n\t        return { top: _y, left: _x };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Calculates position of selected text\n\t     * @returns {{x: number, y: number}}\n\t     */\n\t    inline.getSelectionCoords = function () {\n\t\n\t        var sel = document.selection,\n\t            range;\n\t        var x = 0,\n\t            y = 0;\n\t\n\t        if (sel) {\n\t\n\t            if (sel.type != 'Control') {\n\t\n\t                range = sel.createRange();\n\t                range.collapse(true);\n\t                x = range.boundingLeft;\n\t                y = range.boundingTop;\n\t            }\n\t        } else if (window.getSelection) {\n\t\n\t            sel = window.getSelection();\n\t\n\t            if (sel.rangeCount) {\n\t\n\t                range = sel.getRangeAt(0).cloneRange();\n\t                if (range.getClientRects) {\n\t\n\t                    range.collapse(true);\n\t                    var rect = range.getClientRects()[0];\n\t\n\t                    if (!rect) {\n\t\n\t                        return;\n\t                    }\n\t\n\t                    x = rect.left;\n\t                    y = rect.top;\n\t                }\n\t            }\n\t        }\n\t        return { x: x, y: y };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Returns selected text as String\n\t     * @returns {string}\n\t     */\n\t    inline.getSelectionText = function () {\n\t\n\t        var selectedText = '';\n\t\n\t        // all modern browsers and IE9+\n\t        if (window.getSelection) {\n\t\n\t            selectedText = window.getSelection().toString();\n\t        }\n\t\n\t        return selectedText;\n\t    };\n\t\n\t    /** Opens buttons block */\n\t    inline.showButtons = function () {\n\t\n\t        var buttons = editor.nodes.inlineToolbar.buttons;\n\t\n\t        buttons.classList.add('opened');\n\t\n\t        editor.toolbar.inline.buttonsOpened = true;\n\t\n\t        /** highlight buttons */\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\t    };\n\t\n\t    /** Makes buttons disappear */\n\t    inline.closeButtons = function () {\n\t\n\t        var buttons = editor.nodes.inlineToolbar.buttons;\n\t\n\t        buttons.classList.remove('opened');\n\t\n\t        editor.toolbar.inline.buttonsOpened = false;\n\t    };\n\t\n\t    /** Open buttons defined action if exist */\n\t    inline.showActions = function () {\n\t\n\t        var action = editor.nodes.inlineToolbar.actions;\n\t\n\t        action.classList.add('opened');\n\t\n\t        editor.toolbar.inline.actionsOpened = true;\n\t    };\n\t\n\t    /** Close actions block */\n\t    inline.closeAction = function () {\n\t\n\t        var action = editor.nodes.inlineToolbar.actions;\n\t\n\t        action.innerHTML = '';\n\t        action.classList.remove('opened');\n\t        editor.toolbar.inline.actionsOpened = false;\n\t    };\n\t\n\t    /**\n\t    * Callback for keydowns in inline toolbar \"Insert link...\" input\n\t    */\n\t    var inlineToolbarAnchorInputKeydown_ = function inlineToolbarAnchorInputKeydown_(event) {\n\t\n\t        if (event.keyCode != editor.core.keys.ENTER) {\n\t\n\t            return;\n\t        }\n\t\n\t        var editable = editor.content.currentNode,\n\t            storedSelection = editor.toolbar.inline.storedSelection;\n\t\n\t        editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\t        editor.toolbar.inline.setAnchor(this.value);\n\t\n\t        /**\n\t         * Preventing events that will be able to happen\n\t         */\n\t        event.preventDefault();\n\t        event.stopImmediatePropagation();\n\t\n\t        editor.toolbar.inline.clearRange();\n\t    };\n\t\n\t    /** Action for link creation or for setting anchor */\n\t    inline.createLinkAction = function (event) {\n\t\n\t        var isActive = this.isLinkActive();\n\t\n\t        var editable = editor.content.currentNode,\n\t            storedSelection = editor.toolbar.inline.saveSelection(editable);\n\t\n\t        /** Save globally selection */\n\t        editor.toolbar.inline.storedSelection = storedSelection;\n\t\n\t        if (isActive) {\n\t\n\t            /**\n\t             * Changing stored selection. if we want to remove anchor from word\n\t             * we should remove anchor from whole word, not only selected part.\n\t             * The solution is than we get the length of current link\n\t             * Change start position to - end of selection minus length of anchor\n\t             */\n\t            editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\t\n\t            editor.toolbar.inline.defaultToolAction('unlink');\n\t        } else {\n\t\n\t            /** Create input and close buttons */\n\t            var action = editor.draw.inputForLink();\n\t\n\t            editor.nodes.inlineToolbar.actions.appendChild(action);\n\t\n\t            editor.toolbar.inline.closeButtons();\n\t            editor.toolbar.inline.showActions();\n\t\n\t            /**\n\t             * focus to input\n\t             * Solution: https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/focus\n\t             * Prevents event after showing input and when we need to focus an input which is in unexisted form\n\t             */\n\t            action.focus();\n\t            event.preventDefault();\n\t\n\t            /** Callback to link action */\n\t            editor.listeners.add(action, 'keydown', inlineToolbarAnchorInputKeydown_, false);\n\t        }\n\t    };\n\t\n\t    inline.isLinkActive = function () {\n\t\n\t        var isActive = false;\n\t\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(function (tool) {\n\t\n\t            var dataType = tool.dataset.type;\n\t\n\t            if (dataType == 'link' && tool.classList.contains('hightlighted')) {\n\t\n\t                isActive = true;\n\t            }\n\t        });\n\t\n\t        return isActive;\n\t    };\n\t\n\t    /** default action behavior of tool */\n\t    inline.defaultToolAction = function (type) {\n\t\n\t        document.execCommand(type, false, null);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Sets URL\n\t     *\n\t     * @param {String} url - URL\n\t     */\n\t    inline.setAnchor = function (url) {\n\t\n\t        document.execCommand('createLink', false, url);\n\t\n\t        /** Close after URL inserting */\n\t        editor.toolbar.inline.closeAction();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Saves selection\n\t     */\n\t    inline.saveSelection = function (containerEl) {\n\t\n\t        var range = window.getSelection().getRangeAt(0),\n\t            preSelectionRange = range.cloneRange(),\n\t            start;\n\t\n\t        preSelectionRange.selectNodeContents(containerEl);\n\t        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n\t\n\t        start = preSelectionRange.toString().length;\n\t\n\t        return {\n\t            start: start,\n\t            end: start + range.toString().length\n\t        };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Sets to previous selection (Range)\n\t     *\n\t     * @param {Element} containerEl - editable element where we restore range\n\t     * @param {Object} savedSel - range basic information to restore\n\t     */\n\t    inline.restoreSelection = function (containerEl, savedSel) {\n\t\n\t        var range = document.createRange(),\n\t            charIndex = 0;\n\t\n\t        range.setStart(containerEl, 0);\n\t        range.collapse(true);\n\t\n\t        var nodeStack = [containerEl],\n\t            node,\n\t            foundStart = false,\n\t            stop = false,\n\t            nextCharIndex;\n\t\n\t        while (!stop && (node = nodeStack.pop())) {\n\t\n\t            if (node.nodeType == 3) {\n\t\n\t                nextCharIndex = charIndex + node.length;\n\t\n\t                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\n\t\n\t                    range.setStart(node, savedSel.start - charIndex);\n\t                    foundStart = true;\n\t                }\n\t                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\n\t\n\t                    range.setEnd(node, savedSel.end - charIndex);\n\t                    stop = true;\n\t                }\n\t                charIndex = nextCharIndex;\n\t            } else {\n\t\n\t                var i = node.childNodes.length;\n\t\n\t                while (i--) {\n\t\n\t                    nodeStack.push(node.childNodes[i]);\n\t                }\n\t            }\n\t        }\n\t\n\t        var sel = window.getSelection();\n\t\n\t        sel.removeAllRanges();\n\t        sel.addRange(range);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Removes all ranges from window selection\n\t     */\n\t    inline.clearRange = function () {\n\t\n\t        var selection = window.getSelection();\n\t\n\t        selection.removeAllRanges();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * sets or removes hightlight\n\t     */\n\t    inline.hightlight = function (tool) {\n\t\n\t        var dataType = tool.dataset.type;\n\t\n\t        if (document.queryCommandState(dataType)) {\n\t\n\t            editor.toolbar.inline.setButtonHighlighted(tool);\n\t        } else {\n\t\n\t            editor.toolbar.inline.removeButtonsHighLight(tool);\n\t        }\n\t\n\t        /**\n\t         *\n\t         * hightlight for anchors\n\t         */\n\t        var selection = window.getSelection(),\n\t            tag = selection.anchorNode.parentNode;\n\t\n\t        if (tag.tagName == 'A' && dataType == 'link') {\n\t\n\t            editor.toolbar.inline.setButtonHighlighted(tool);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Mark button if text is already executed\n\t     */\n\t    inline.setButtonHighlighted = function (button) {\n\t\n\t        button.classList.add('hightlighted');\n\t\n\t        /** At link tool we also change icon */\n\t        if (button.dataset.type == 'link') {\n\t\n\t            var icon = button.childNodes[0];\n\t\n\t            icon.classList.remove('ce-icon-link');\n\t            icon.classList.add('ce-icon-unlink');\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Removes hightlight\n\t     */\n\t    inline.removeButtonsHighLight = function (button) {\n\t\n\t        button.classList.remove('hightlighted');\n\t\n\t        /** At link tool we also change icon */\n\t        if (button.dataset.type == 'link') {\n\t\n\t            var icon = button.childNodes[0];\n\t\n\t            icon.classList.remove('ce-icon-unlink');\n\t            icon.classList.add('ce-icon-link');\n\t        }\n\t    };\n\t\n\t    return inline;\n\t}({});\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor toolbox\n\t *\n\t * All tools be able to appended here\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (toolbox) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    toolbox.opened = false;\n\t\n\t    /** Shows toolbox */\n\t    toolbox.open = function () {\n\t\n\t        /** Close setting if toolbox is opened */\n\t        if (editor.toolbar.settings.opened) {\n\t\n\t            editor.toolbar.settings.close();\n\t        }\n\t\n\t        /** display toolbox */\n\t        editor.nodes.toolbox.classList.add('opened');\n\t\n\t        /** Animate plus button */\n\t        editor.nodes.plusButton.classList.add('clicked');\n\t\n\t        /** toolbox state */\n\t        editor.toolbar.toolbox.opened = true;\n\t    };\n\t\n\t    /** Closes toolbox */\n\t    toolbox.close = function () {\n\t\n\t        /** Makes toolbox disapear */\n\t        editor.nodes.toolbox.classList.remove('opened');\n\t\n\t        /** Rotate plus button */\n\t        editor.nodes.plusButton.classList.remove('clicked');\n\t\n\t        /** toolbox state */\n\t        editor.toolbar.toolbox.opened = false;\n\t\n\t        editor.toolbar.current = null;\n\t    };\n\t\n\t    toolbox.leaf = function () {\n\t\n\t        var currentTool = editor.toolbar.current,\n\t            tools = Object.keys(editor.tools),\n\t            barButtons = editor.nodes.toolbarButtons,\n\t            nextToolIndex = 0,\n\t            toolToSelect = void 0,\n\t            visibleTool = void 0,\n\t            tool = void 0;\n\t\n\t        if (!currentTool) {\n\t\n\t            /** Get first tool from object*/\n\t            for (tool in editor.tools) {\n\t\n\t                if (editor.tools[tool].displayInToolbox) {\n\t\n\t                    break;\n\t                }\n\t\n\t                nextToolIndex++;\n\t            }\n\t        } else {\n\t\n\t            nextToolIndex = (tools.indexOf(currentTool) + 1) % tools.length;\n\t            visibleTool = tools[nextToolIndex];\n\t\n\t            while (!editor.tools[visibleTool].displayInToolbox) {\n\t\n\t                nextToolIndex = (nextToolIndex + 1) % tools.length;\n\t                visibleTool = tools[nextToolIndex];\n\t            }\n\t        }\n\t\n\t        toolToSelect = tools[nextToolIndex];\n\t\n\t        for (var button in barButtons) {\n\t\n\t            barButtons[button].classList.remove('selected');\n\t        }\n\t\n\t        barButtons[toolToSelect].classList.add('selected');\n\t        editor.toolbar.current = toolToSelect;\n\t    };\n\t\n\t    /**\n\t     * Transforming selected node type into selected toolbar element type\n\t     * @param {event} event\n\t     */\n\t    toolbox.toolClicked = function (event) {\n\t\n\t        /**\n\t         * UNREPLACEBLE_TOOLS this types of tools are forbidden to replace even they are empty\n\t         */\n\t        var UNREPLACEBLE_TOOLS = ['image', 'link', 'list', 'instagram', 'twitter', 'embed'],\n\t            tool = editor.tools[editor.toolbar.current],\n\t            workingNode = editor.content.currentNode,\n\t            currentInputIndex = editor.caret.inputIndex,\n\t            newBlockContent,\n\t            appendCallback,\n\t            blockData;\n\t\n\t        /** Make block from plugin */\n\t        newBlockContent = tool.render();\n\t\n\t        /** information about block */\n\t        blockData = {\n\t            block: newBlockContent,\n\t            type: tool.type,\n\t            stretched: false\n\t        };\n\t\n\t        if (workingNode && UNREPLACEBLE_TOOLS.indexOf(workingNode.dataset.tool) === -1 && workingNode.textContent.trim() === '') {\n\t\n\t            /** Replace current block */\n\t            editor.content.switchBlock(workingNode, newBlockContent, tool.type);\n\t        } else {\n\t\n\t            /** Insert new Block from plugin */\n\t            editor.content.insertBlock(blockData);\n\t\n\t            /** increase input index */\n\t            currentInputIndex++;\n\t        }\n\t\n\t        /** Fire tool append callback  */\n\t        appendCallback = tool.appendCallback;\n\t\n\t        if (appendCallback && typeof appendCallback == 'function') {\n\t\n\t            appendCallback.call(event);\n\t        }\n\t\n\t        window.setTimeout(function () {\n\t\n\t            /** Set caret to current block */\n\t            editor.caret.setToBlock(currentInputIndex);\n\t        }, 10);\n\t\n\t        /**\n\t         * Changing current Node\n\t         */\n\t        editor.content.workingNodeChanged();\n\t\n\t        /**\n\t         * Move toolbar when node is changed\n\t         */\n\t        editor.toolbar.move();\n\t    };\n\t\n\t    return toolbox;\n\t}({});\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * @module Codex Editor Callbacks module\n\t * @description Module works with editor added Elements\n\t *\n\t * @author Codex Team\n\t * @version 1.3.12\n\t */\n\t\n\tmodule.exports = function (callbacks) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * used by UI module\n\t     * @description Routes all keydowns on document\n\t     * @param {Object} event\n\t     */\n\t    callbacks.globalKeydown = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.ENTER:\n\t                enterKeyPressed_(event);break;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * used by UI module\n\t     * @description Routes all keydowns on redactors area\n\t     * @param {Object} event\n\t     */\n\t    callbacks.redactorKeyDown = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.TAB:\n\t                tabKeyPressedOnRedactorsZone_(event);break;\n\t            case editor.core.keys.ENTER:\n\t                enterKeyPressedOnRedactorsZone_(event);break;\n\t            case editor.core.keys.ESC:\n\t                escapeKeyPressedOnRedactorsZone_(event);break;\n\t            default:\n\t                defaultKeyPressedOnRedactorsZone_(event);break;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * used by UI module\n\t     * @description Routes all keyup events\n\t     * @param {Object} event\n\t     */\n\t    callbacks.globalKeyup = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.UP:\n\t            case editor.core.keys.LEFT:\n\t            case editor.core.keys.RIGHT:\n\t            case editor.core.keys.DOWN:\n\t                arrowKeyPressed_(event);break;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @param {Object} event\n\t     * @private\n\t     *\n\t     * Handles behaviour when tab pressed\n\t     * @description if Content is empty show toolbox (if it is closed) or leaf tools\n\t     * uses Toolbars toolbox module to handle the situation\n\t     */\n\t    var tabKeyPressedOnRedactorsZone_ = function tabKeyPressedOnRedactorsZone_(event) {\n\t\n\t        /**\n\t         * Wait for solution. Would like to know the behaviour\n\t         * @todo Add spaces\n\t         */\n\t        event.preventDefault();\n\t\n\t        var nativeInputs = editor.content.currentNode.querySelectorAll('textarea, input'),\n\t            nativeInputsAreEmpty = true,\n\t            textContentIsEmpty = !editor.content.currentNode.textContent.trim();\n\t\n\t        Array.prototype.map.call(nativeInputs, function (input) {\n\t\n\t            if (input.type == 'textarea' || input.type == 'text') {\n\t\n\t                nativeInputsAreEmpty = nativeInputsAreEmpty && !input.value.trim();\n\t            }\n\t        });\n\t\n\t        var blockIsEmpty = textContentIsEmpty && nativeInputsAreEmpty;\n\t\n\t        if (!blockIsEmpty) {\n\t\n\t            return;\n\t        }\n\t\n\t        if (!editor.toolbar.opened) {\n\t\n\t            editor.toolbar.open();\n\t        }\n\t\n\t        if (editor.toolbar.opened && !editor.toolbar.toolbox.opened) {\n\t\n\t            editor.toolbar.toolbox.open();\n\t        } else {\n\t\n\t            editor.toolbar.toolbox.leaf();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Handles global EnterKey Press\n\t     * @see enterPressedOnBlock_\n\t     * @param {Object} event\n\t     */\n\t    var enterKeyPressed_ = function enterKeyPressed_() {\n\t\n\t        if (editor.content.editorAreaHightlighted) {\n\t\n\t            /**\n\t             * it means that we lose input index, saved index before is not correct\n\t             * therefore we need to set caret when we insert new block\n\t             */\n\t            editor.caret.inputIndex = -1;\n\t\n\t            enterPressedOnBlock_();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Callback for enter key pressing in first-level block area\n\t     *\n\t     * @param {Event} event\n\t     * @private\n\t     *\n\t     * @description Inserts new block with initial type from settings\n\t     */\n\t    var enterPressedOnBlock_ = function enterPressedOnBlock_() {\n\t\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        editor.content.insertBlock({\n\t            type: NEW_BLOCK_TYPE,\n\t            block: editor.tools[NEW_BLOCK_TYPE].render()\n\t        }, true);\n\t\n\t        editor.toolbar.move();\n\t        editor.toolbar.open();\n\t    };\n\t\n\t    /**\n\t     * ENTER key handler\n\t     *\n\t     * @param {Object} event\n\t     * @private\n\t     *\n\t     * @description Makes new block with initial type from settings\n\t     */\n\t    var enterKeyPressedOnRedactorsZone_ = function enterKeyPressedOnRedactorsZone_(event) {\n\t\n\t        if (event.target.contentEditable == 'true') {\n\t\n\t            /** Update input index */\n\t            editor.caret.saveCurrentInputIndex();\n\t        }\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex() || 0,\n\t            workingNode = editor.content.currentNode,\n\t            tool = workingNode.dataset.tool,\n\t            isEnterPressedOnToolbar = editor.toolbar.opened && editor.toolbar.current && event.target == editor.state.inputs[currentInputIndex];\n\t\n\t        /** The list of tools which needs the default browser behaviour */\n\t        var enableLineBreaks = editor.tools[tool].enableLineBreaks;\n\t\n\t        /** This type of block creates when enter is pressed */\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        /**\n\t         * When toolbar is opened, select tool instead of making new paragraph\n\t         */\n\t        if (isEnterPressedOnToolbar) {\n\t\n\t            event.preventDefault();\n\t\n\t            editor.toolbar.toolbox.toolClicked(event);\n\t\n\t            editor.toolbar.close();\n\t\n\t            /**\n\t             * Stop other listeners callback executions\n\t             */\n\t            event.stopPropagation();\n\t            event.stopImmediatePropagation();\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Allow paragraph lineBreaks with shift enter\n\t         * Or if shiftkey pressed and enter and enabledLineBreaks, the let new block creation\n\t         */\n\t        if (event.shiftKey || enableLineBreaks) {\n\t\n\t            event.stopPropagation();\n\t            event.stopImmediatePropagation();\n\t            return;\n\t        }\n\t\n\t        var currentSelection = window.getSelection(),\n\t            currentSelectedNode = currentSelection.anchorNode,\n\t            caretAtTheEndOfText = editor.caret.position.atTheEnd(),\n\t            isTextNodeHasParentBetweenContenteditable = false;\n\t\n\t        /**\n\t         * Allow making new <p> in same block by SHIFT+ENTER and forbids to prevent default browser behaviour\n\t         */\n\t        if (event.shiftKey && !enableLineBreaks) {\n\t\n\t            editor.callback.enterPressedOnBlock(editor.content.currentBlock, event);\n\t            event.preventDefault();\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Workaround situation when caret at the Text node that has some wrapper Elements\n\t         * Split block cant handle this.\n\t         * We need to save default behavior\n\t         */\n\t        isTextNodeHasParentBetweenContenteditable = currentSelectedNode && currentSelectedNode.parentNode.contentEditable != 'true';\n\t\n\t        /**\n\t         * Split blocks when input has several nodes and caret placed in textNode\n\t         */\n\t        if (currentSelectedNode.nodeType == editor.core.nodeTypes.TEXT && !isTextNodeHasParentBetweenContenteditable && !caretAtTheEndOfText) {\n\t\n\t            event.preventDefault();\n\t\n\t            editor.core.log('Splitting Text node...');\n\t\n\t            editor.content.splitBlock(currentInputIndex);\n\t\n\t            /** Show plus button when next input after split is empty*/\n\t            if (!editor.state.inputs[currentInputIndex + 1].textContent.trim()) {\n\t\n\t                editor.toolbar.showPlusButton();\n\t            }\n\t        } else {\n\t\n\t            var islastNode = editor.content.isLastNode(currentSelectedNode);\n\t\n\t            if (islastNode && caretAtTheEndOfText) {\n\t\n\t                event.preventDefault();\n\t                event.stopPropagation();\n\t                event.stopImmediatePropagation();\n\t\n\t                editor.core.log('ENTER clicked in last textNode. Create new BLOCK');\n\t\n\t                editor.content.insertBlock({\n\t                    type: NEW_BLOCK_TYPE,\n\t                    block: editor.tools[NEW_BLOCK_TYPE].render()\n\t                }, true);\n\t\n\t                editor.toolbar.move();\n\t                editor.toolbar.open();\n\t\n\t                /** Show plus button with empty block */\n\t                editor.toolbar.showPlusButton();\n\t            }\n\t        }\n\t\n\t        /** get all inputs after new appending block */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    /**\n\t     * Escape behaviour\n\t     * @param event\n\t     * @private\n\t     *\n\t     * @description Closes toolbox and toolbar. Prevents default behaviour\n\t     */\n\t    var escapeKeyPressedOnRedactorsZone_ = function escapeKeyPressedOnRedactorsZone_(event) {\n\t\n\t        /** Close all toolbar */\n\t        editor.toolbar.close();\n\t\n\t        /** Close toolbox */\n\t        editor.toolbar.toolbox.close();\n\t\n\t        event.preventDefault();\n\t    };\n\t\n\t    /**\n\t     * @param {Event} event\n\t     * @private\n\t     *\n\t     * closes and moves toolbar\n\t     */\n\t    var arrowKeyPressed_ = function arrowKeyPressed_(event) {\n\t\n\t        editor.content.workingNodeChanged();\n\t\n\t        /* Closing toolbar */\n\t        editor.toolbar.close();\n\t        editor.toolbar.move();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} event\n\t     *\n\t     * @description Closes all opened bars from toolbar.\n\t     * If block is mark, clears highlightning\n\t     */\n\t    var defaultKeyPressedOnRedactorsZone_ = function defaultKeyPressedOnRedactorsZone_() {\n\t\n\t        editor.toolbar.close();\n\t\n\t        if (!editor.toolbar.inline.actionsOpened) {\n\t\n\t            editor.toolbar.inline.close();\n\t            editor.content.clearMark();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Handler when clicked on redactors area\n\t     *\n\t     * @protected\n\t     * @param event\n\t     *\n\t     * @description Detects clicked area. If it is first-level block area, marks as detected and\n\t     * on next enter press will be inserted new block\n\t     * Otherwise, save carets position (input index) and put caret to the editable zone.\n\t     *\n\t     * @see detectWhenClickedOnFirstLevelBlockArea_\n\t     *\n\t     */\n\t    callbacks.redactorClicked = function (event) {\n\t\n\t        detectWhenClickedOnFirstLevelBlockArea_();\n\t\n\t        editor.content.workingNodeChanged(event.target);\n\t        editor.ui.saveInputs();\n\t\n\t        var selectedText = editor.toolbar.inline.getSelectionText(),\n\t            firstLevelBlock;\n\t\n\t        /** If selection range took off, then we hide inline toolbar */\n\t        if (selectedText.length === 0) {\n\t\n\t            editor.toolbar.inline.close();\n\t        }\n\t\n\t        /** Update current input index in memory when caret focused into existed input */\n\t        if (event.target.contentEditable == 'true') {\n\t\n\t            editor.caret.saveCurrentInputIndex();\n\t        }\n\t\n\t        if (editor.content.currentNode === null) {\n\t\n\t            /**\n\t             * If inputs in redactor does not exits, then we put input index 0 not -1\n\t             */\n\t            var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n\t\n\t            /** If we have any inputs */\n\t            if (editor.state.inputs.length) {\n\t\n\t                /** getting firstlevel parent of input */\n\t                firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n\t            }\n\t\n\t            /** If input is empty, then we set caret to the last input */\n\t            if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n\t\n\t                editor.caret.setToBlock(indexOfLastInput);\n\t            } else {\n\t\n\t                /** Create new input when caret clicked in redactors area */\n\t                var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t                editor.content.insertBlock({\n\t                    type: NEW_BLOCK_TYPE,\n\t                    block: editor.tools[NEW_BLOCK_TYPE].render()\n\t                });\n\t\n\t                /** If there is no inputs except inserted */\n\t                if (editor.state.inputs.length === 1) {\n\t\n\t                    editor.caret.setToBlock(indexOfLastInput);\n\t                } else {\n\t\n\t                    /** Set caret to this appended input */\n\t                    editor.caret.setToNextBlock(indexOfLastInput);\n\t                }\n\t            }\n\t        } else {\n\t\n\t            /** Close all panels */\n\t            editor.toolbar.settings.close();\n\t            editor.toolbar.toolbox.close();\n\t        }\n\t\n\t        /**\n\t         * Move toolbar and open\n\t         */\n\t        editor.toolbar.move();\n\t        editor.toolbar.open();\n\t\n\t        var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n\t            currentNodeType = editor.content.currentNode.dataset.tool,\n\t            isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n\t\n\t        /** Hide plus buttons */\n\t        editor.toolbar.hidePlusButton();\n\t\n\t        if (!inputIsEmpty) {\n\t\n\t            /** Mark current block */\n\t            editor.content.markBlock();\n\t        }\n\t\n\t        if (isInitialType && inputIsEmpty) {\n\t\n\t            /** Show plus button */\n\t            editor.toolbar.showPlusButton();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * This method allows to define, is caret in contenteditable element or not.\n\t     *\n\t     * @private\n\t     *\n\t     * @description Otherwise, if we get TEXT node from range container, that will means we have input index.\n\t     * In this case we use default browsers behaviour (if plugin allows that) or overwritten action.\n\t     * Therefore, to be sure that we've clicked first-level block area, we should have currentNode, which always\n\t     * specifies to the first-level block. Other cases we just ignore.\n\t     */\n\t    var detectWhenClickedOnFirstLevelBlockArea_ = function detectWhenClickedOnFirstLevelBlockArea_() {\n\t\n\t        var selection = window.getSelection(),\n\t            anchorNode = selection.anchorNode,\n\t            flag = false;\n\t\n\t        if (selection.rangeCount === 0) {\n\t\n\t            editor.content.editorAreaHightlighted = true;\n\t        } else {\n\t\n\t            if (!editor.core.isDomNode(anchorNode)) {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t            }\n\t\n\t            /** Already founded, without loop */\n\t            if (anchorNode.contentEditable == 'true') {\n\t\n\t                flag = true;\n\t            }\n\t\n\t            while (anchorNode.contentEditable != 'true') {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t\n\t                if (anchorNode.contentEditable == 'true') {\n\t\n\t                    flag = true;\n\t                }\n\t\n\t                if (anchorNode == document.body) {\n\t\n\t                    break;\n\t                }\n\t            }\n\t\n\t            /** If editable element founded, flag is \"TRUE\", Therefore we return \"FALSE\" */\n\t            editor.content.editorAreaHightlighted = !flag;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Toolbar button click handler\n\t     *\n\t     * @param {Object} event - cursor to the button\n\t     * @protected\n\t     *\n\t     * @description gets current tool and calls render method\n\t     */\n\t    callbacks.toolbarButtonClicked = function (event) {\n\t\n\t        var button = this;\n\t\n\t        editor.toolbar.current = button.dataset.type;\n\t\n\t        editor.toolbar.toolbox.toolClicked(event);\n\t        editor.toolbar.close();\n\t    };\n\t\n\t    /**\n\t     * Show or Hide toolbox when plus button is clicked\n\t     */\n\t    callbacks.plusButtonClicked = function () {\n\t\n\t        if (!editor.nodes.toolbox.classList.contains('opened')) {\n\t\n\t            editor.toolbar.toolbox.open();\n\t        } else {\n\t\n\t            editor.toolbar.toolbox.close();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Block handlers for KeyDown events\n\t     *\n\t     * @protected\n\t     * @param {Object} event\n\t     *\n\t     * Handles keydowns on block\n\t     * @see blockRightOrDownArrowPressed_\n\t     * @see backspacePressed_\n\t     * @see blockLeftOrUpArrowPressed_\n\t     */\n\t    callbacks.blockKeydown = function (event) {\n\t\n\t        var block = event.target; // event.target is input\n\t\n\t        switch (event.keyCode) {\n\t\n\t            case editor.core.keys.DOWN:\n\t            case editor.core.keys.RIGHT:\n\t                blockRightOrDownArrowPressed_(event);\n\t                break;\n\t\n\t            case editor.core.keys.BACKSPACE:\n\t                backspacePressed_(block, event);\n\t                break;\n\t\n\t            case editor.core.keys.UP:\n\t            case editor.core.keys.LEFT:\n\t                blockLeftOrUpArrowPressed_(event);\n\t                break;\n\t\n\t        }\n\t    };\n\t\n\t    /**\n\t     * RIGHT or DOWN keydowns on block\n\t     *\n\t     * @param {Object} event\n\t     * @private\n\t     *\n\t     * @description watches the selection and gets closest editable element.\n\t     * Uses method getDeepestTextNodeFromPosition to get the last node of next block\n\t     * Sets caret if it is contenteditable\n\t     */\n\t    var blockRightOrDownArrowPressed_ = function blockRightOrDownArrowPressed_(event) {\n\t\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        /** Check for caret existance */\n\t        if (!focusedNode) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /** Looking for closest (parent) contentEditable element of focused node */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        /**\n\t         * Founded contentEditable element doesn't have childs\n\t         * Or maybe New created block\n\t         */\n\t        if (!focusedNode.textContent) {\n\t\n\t            editor.caret.setToNextBlock(editableElementIndex);\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Do nothing when caret doesn not reaches the end of last child\n\t         */\n\t        var caretInLastChild = false,\n\t            caretAtTheEndOfText = false;\n\t\n\t        var lastChild, deepestTextnode;\n\t\n\t        lastChild = focusedNode.childNodes[focusedNode.childNodes.length - 1];\n\t\n\t        if (editor.core.isDomNode(lastChild)) {\n\t\n\t            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(lastChild, lastChild.childNodes.length);\n\t        } else {\n\t\n\t            deepestTextnode = lastChild;\n\t        }\n\t\n\t        caretInLastChild = selection.anchorNode == deepestTextnode;\n\t        caretAtTheEndOfText = deepestTextnode.length == selection.anchorOffset;\n\t\n\t        if (!caretInLastChild || !caretAtTheEndOfText) {\n\t\n\t            editor.core.log('arrow [down|right] : caret does not reached the end');\n\t            return false;\n\t        }\n\t\n\t        editor.caret.setToNextBlock(editableElementIndex);\n\t    };\n\t\n\t    /**\n\t     * LEFT or UP keydowns on block\n\t     *\n\t     * @param {Object} event\n\t     * @private\n\t     *\n\t     * watches the selection and gets closest editable element.\n\t     * Uses method getDeepestTextNodeFromPosition to get the last node of previous block\n\t     * Sets caret if it is contenteditable\n\t     *\n\t     */\n\t    var blockLeftOrUpArrowPressed_ = function blockLeftOrUpArrowPressed_(event) {\n\t\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        /** Check for caret existance */\n\t        if (!focusedNode) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /**\n\t         * LEFT or UP not at the beginning\n\t         */\n\t        if (selection.anchorOffset !== 0) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /** Looking for parent contentEditable block */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        /**\n\t         * Do nothing if caret is not at the beginning of first child\n\t         */\n\t        var caretInFirstChild = false,\n\t            caretAtTheBeginning = false;\n\t\n\t        var firstChild, deepestTextnode;\n\t\n\t        /**\n\t         * Founded contentEditable element doesn't have childs\n\t         * Or maybe New created block\n\t         */\n\t        if (!focusedNode.textContent) {\n\t\n\t            editor.caret.setToPreviousBlock(editableElementIndex);\n\t            return;\n\t        }\n\t\n\t        firstChild = focusedNode.childNodes[0];\n\t\n\t        if (editor.core.isDomNode(firstChild)) {\n\t\n\t            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(firstChild, 0);\n\t        } else {\n\t\n\t            deepestTextnode = firstChild;\n\t        }\n\t\n\t        caretInFirstChild = selection.anchorNode == deepestTextnode;\n\t        caretAtTheBeginning = selection.anchorOffset === 0;\n\t\n\t        if (caretInFirstChild && caretAtTheBeginning) {\n\t\n\t            editor.caret.setToPreviousBlock(editableElementIndex);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Handles backspace keydown\n\t     *\n\t     * @param {Element} block\n\t     * @param {Object} event\n\t     * @private\n\t     *\n\t     * @description if block is empty, delete the block and set caret to the previous block\n\t     * If block is not empty, try to merge two blocks - current and previous\n\t     * But it we try'n to remove first block, then we should set caret to the next block, not previous.\n\t     * If we removed the last block, create new one\n\t     */\n\t    var backspacePressed_ = function backspacePressed_(block, event) {\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex(),\n\t            range,\n\t            selectionLength,\n\t            firstLevelBlocksCount;\n\t\n\t        if (isNativeInput_(event.target)) {\n\t\n\t            /** If input value is empty - remove block */\n\t            if (event.target.value.trim() == '') {\n\t\n\t                block.remove();\n\t            } else {\n\t\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (block.textContent.trim()) {\n\t\n\t            range = editor.content.getRange();\n\t            selectionLength = range.endOffset - range.startOffset;\n\t\n\t            if (editor.caret.position.atStart() && !selectionLength && editor.state.inputs[currentInputIndex - 1]) {\n\t\n\t                editor.content.mergeBlocks(currentInputIndex);\n\t            } else {\n\t\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (!selectionLength) {\n\t\n\t            block.remove();\n\t        }\n\t\n\t        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\t\n\t        /**\n\t         * If all blocks are removed\n\t         */\n\t        if (firstLevelBlocksCount === 0) {\n\t\n\t            /** update currentNode variable */\n\t            editor.content.currentNode = null;\n\t\n\t            /** Inserting new empty initial block */\n\t            editor.ui.addInitialBlock();\n\t\n\t            /** Updating inputs state after deleting last block */\n\t            editor.ui.saveInputs();\n\t\n\t            /** Set to current appended block */\n\t            window.setTimeout(function () {\n\t\n\t                editor.caret.setToPreviousBlock(1);\n\t            }, 10);\n\t        } else {\n\t\n\t            if (editor.caret.inputIndex !== 0) {\n\t\n\t                /** Target block is not first */\n\t                editor.caret.setToPreviousBlock(editor.caret.inputIndex);\n\t            } else {\n\t\n\t                /** If we try to delete first block */\n\t                editor.caret.setToNextBlock(editor.caret.inputIndex);\n\t            }\n\t        }\n\t\n\t        editor.toolbar.move();\n\t\n\t        if (!editor.toolbar.opened) {\n\t\n\t            editor.toolbar.open();\n\t        }\n\t\n\t        /** Updating inputs state */\n\t        editor.ui.saveInputs();\n\t\n\t        /** Prevent default browser behaviour */\n\t        event.preventDefault();\n\t    };\n\t\n\t    /**\n\t     * This method is used to observe pasted dirty data.\n\t     *\n\t     * Mutation handlers send to separate observers each mutation (added, changed and so on), which will be\n\t     * passed from handler that sanitizes and replaces data.\n\t     *\n\t     * Probably won't be used\n\t     *\n\t     * @deprecated\n\t     *\n\t     * @param event\n\t     * @private\n\t     */\n\t    callbacks._blockPasteCallback = function () {\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex();\n\t\n\t        /**\n\t         * create an observer instance\n\t         */\n\t        var observer = new MutationObserver(editor.callback.handleMutationsOnPaste);\n\t\n\t        /**\n\t         * configuration of the observer:\n\t         */\n\t        var config = {\n\t            attributes: true,\n\t            childList: false,\n\t            characterData: false,\n\t            subtree: true\n\t        };\n\t\n\t        // pass in the target node, as well as the observer options\n\t        observer.observe(editor.state.inputs[currentInputIndex], config);\n\t    };\n\t\n\t    /**\n\t     * This method prevents default behaviour.\n\t     *\n\t     * @param {Object} event\n\t     * @protected\n\t     *\n\t     * @description We get from clipboard pasted data, sanitize, make a fragment that contains of this sanitized nodes.\n\t     * Firstly, we need to memorize the caret position. We can do that by getting the range of selection.\n\t     * After all, we insert clear fragment into caret placed position. Then, we should move the caret to the last node\n\t     */\n\t    callbacks.blockPasteCallback = function (event) {\n\t\n\t        /** If area is input or textarea then allow default behaviour */\n\t        if (isNativeInput_(event.target)) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** Prevent default behaviour */\n\t        event.preventDefault();\n\t\n\t        var editableParent = editor.content.getEditableParent(event.target),\n\t            currentNode = editor.content.currentNode;\n\t\n\t        /** Allow paste when event target placed in Editable element */\n\t        if (!editableParent) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** get html pasted data - dirty data */\n\t        var htmlData = event.clipboardData.getData('text/html'),\n\t            plainData = event.clipboardData.getData('text/plain');\n\t\n\t        /** Temporary DIV that is used to work with childs as arrays item */\n\t        var div = editor.draw.node('DIV', '', {}),\n\t            cleaner = new editor.sanitizer.init(editor.sanitizer.Config.BASIC),\n\t            cleanData,\n\t            fragment;\n\t\n\t        /** Create fragment, that we paste to range after proccesing */\n\t        fragment = document.createDocumentFragment();\n\t\n\t        if (htmlData.trim() != '') {\n\t\n\t            cleanData = cleaner.clean(htmlData);\n\t            div.innerHTML = cleanData;\n\t        } else {\n\t\n\t            div.innerText = plainData.toString();\n\t        }\n\t\n\t        var node, lastNode;\n\t\n\t        /**\n\t         * and fill in fragment\n\t         */\n\t        while (node = div.firstChild) {\n\t\n\t            lastNode = fragment.appendChild(node);\n\t        }\n\t\n\t        if (editor.tools[currentNode.dataset.tool].allowRenderOnPaste) {\n\t\n\t            if (editor.paste.pasted(event)) return;\n\t        }\n\t\n\t        /**\n\t         * work with selection and range\n\t         */\n\t        var selection, range;\n\t\n\t        selection = window.getSelection();\n\t\n\t        range = selection.getRangeAt(0);\n\t        range.deleteContents();\n\t\n\t        range.insertNode(fragment);\n\t\n\t        /** Preserve the selection */\n\t        if (lastNode) {\n\t\n\t            range = range.cloneRange();\n\t            range.setStartAfter(lastNode);\n\t            range.collapse(true);\n\t            selection.removeAllRanges();\n\t            selection.addRange(range);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @deprecated\n\t     * Sends all mutations to paste handler\n\t     */\n\t    callbacks.handleMutationsOnPaste = function (mutations) {\n\t\n\t        var self = this;\n\t\n\t        /**\n\t         * Calling function with context of this function.\n\t         * Also, we should sanitize pasted or changed data one time and ignore\n\t         * changings which makes sanitize method.\n\t         * For that, we need to send Context, MutationObserver.__proto__ that contains\n\t         * observer disconnect method.\n\t         */\n\t        mutations.forEach(function (mutation) {\n\t\n\t            editor.content.paste.call(self, mutation);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * used by UI module\n\t     * Clicks on block settings button\n\t     *\n\t     * @param {Object} event\n\t     * @protected\n\t     * @description Opens toolbar settings\n\t     */\n\t    callbacks.showSettingsButtonClicked = function (event) {\n\t\n\t        /**\n\t         * Get type of current block\n\t         * It uses to append settings from tool.settings property.\n\t         * ...\n\t         * Type is stored in data-type attribute on block\n\t         */\n\t        var currentToolType = editor.content.currentNode.dataset.tool;\n\t\n\t        editor.toolbar.settings.toggle(currentToolType);\n\t\n\t        /** Close toolbox when settings button is active */\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.hideRemoveActions();\n\t    };\n\t\n\t    /**\n\t     * Check block\n\t     * @param target\n\t     * @private\n\t     *\n\t     * @description Checks target is it native input\n\t     */\n\t    var isNativeInput_ = function isNativeInput_(target) {\n\t\n\t        var nativeInputAreas = ['INPUT', 'TEXTAREA'];\n\t\n\t        return nativeInputAreas.indexOf(target.tagName) != -1;\n\t    };\n\t\n\t    return callbacks;\n\t}({});\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Draw module\n\t *\n\t * @author Codex Team\n\t * @version 1.0.\n\t */\n\t\n\tmodule.exports = function (draw) {\n\t\n\t    /**\n\t     * Base editor wrapper\n\t     */\n\t    draw.wrapper = function () {\n\t\n\t        var wrapper = document.createElement('div');\n\t\n\t        wrapper.className += 'codex-editor';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * Content-editable holder\n\t     */\n\t    draw.redactor = function () {\n\t\n\t        var redactor = document.createElement('div');\n\t\n\t        redactor.className += 'ce-redactor';\n\t\n\t        return redactor;\n\t    };\n\t\n\t    draw.ceBlock = function () {\n\t\n\t        var block = document.createElement('DIV');\n\t\n\t        block.className += 'ce_block';\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * Empty toolbar with toggler\n\t     */\n\t    draw.toolbar = function () {\n\t\n\t        var bar = document.createElement('div');\n\t\n\t        bar.className += 'ce-toolbar';\n\t\n\t        return bar;\n\t    };\n\t\n\t    draw.toolbarContent = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.classList.add('ce-toolbar__content');\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * Inline toolbar\n\t     */\n\t    draw.inlineToolbar = function () {\n\t\n\t        var bar = document.createElement('DIV');\n\t\n\t        bar.className += 'ce-toolbar-inline';\n\t\n\t        return bar;\n\t    };\n\t\n\t    /**\n\t     * Wrapper for inline toobar buttons\n\t     */\n\t    draw.inlineToolbarButtons = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.className += 'ce-toolbar-inline__buttons';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * For some actions\n\t     */\n\t    draw.inlineToolbarActions = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.className += 'ce-toolbar-inline__actions';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    draw.inputForLink = function () {\n\t\n\t        var input = document.createElement('INPUT');\n\t\n\t        input.type = 'input';\n\t        input.className += 'inputForLink';\n\t        input.placeholder = 'Вставьте ссылку ...';\n\t        input.setAttribute('form', 'defaultForm');\n\t\n\t        input.setAttribute('autofocus', 'autofocus');\n\t\n\t        return input;\n\t    };\n\t\n\t    /**\n\t     * @todo Desc\n\t     */\n\t    draw.blockButtons = function () {\n\t\n\t        var block = document.createElement('div');\n\t\n\t        block.className += 'ce-toolbar__actions';\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * Block settings panel\n\t     */\n\t    draw.blockSettings = function () {\n\t\n\t        var settings = document.createElement('div');\n\t\n\t        settings.className += 'ce-settings';\n\t\n\t        return settings;\n\t    };\n\t\n\t    draw.defaultSettings = function () {\n\t\n\t        var div = document.createElement('div');\n\t\n\t        div.classList.add('ce-settings_default');\n\t\n\t        return div;\n\t    };\n\t\n\t    draw.pluginsSettings = function () {\n\t\n\t        var div = document.createElement('div');\n\t\n\t        div.classList.add('ce-settings_plugin');\n\t\n\t        return div;\n\t    };\n\t\n\t    draw.plusButton = function () {\n\t\n\t        var button = document.createElement('span');\n\t\n\t        button.className = 'ce-toolbar__plus';\n\t        // button.innerHTML = '<i class=\"ce-icon-plus\"></i>';\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * Settings button in toolbar\n\t     */\n\t    draw.settingsButton = function () {\n\t\n\t        var toggler = document.createElement('span');\n\t\n\t        toggler.className = 'ce-toolbar__settings-btn';\n\t\n\t        /** Toggler button*/\n\t        toggler.innerHTML = '<i class=\"ce-icon-cog\"></i>';\n\t\n\t        return toggler;\n\t    };\n\t\n\t    /**\n\t     * Redactor tools wrapper\n\t     */\n\t\n\t    draw.toolbox = function () {\n\t\n\t        var wrapper = document.createElement('div');\n\t\n\t        wrapper.className = 'ce-toolbar__tools';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Draws tool buttons for toolbox\n\t     *\n\t     * @param {String} type\n\t     * @param {String} classname\n\t     * @returns {Element}\n\t     */\n\t    draw.toolbarButton = function (type, classname) {\n\t\n\t        var button = document.createElement('li'),\n\t            toolIcon = document.createElement('i'),\n\t            toolTitle = document.createElement('span');\n\t\n\t        button.dataset.type = type;\n\t        button.setAttribute('title', type);\n\t\n\t        toolIcon.classList.add(classname);\n\t        toolTitle.classList.add('ce_toolbar_tools--title');\n\t\n\t        button.appendChild(toolIcon);\n\t        button.appendChild(toolTitle);\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Draws tools for inline toolbar\n\t     *\n\t     * @param {String} type\n\t     * @param {String} classname\n\t     */\n\t    draw.toolbarButtonInline = function (type, classname) {\n\t\n\t        var button = document.createElement('BUTTON'),\n\t            toolIcon = document.createElement('I');\n\t\n\t        button.type = 'button';\n\t        button.dataset.type = type;\n\t        toolIcon.classList.add(classname);\n\t\n\t        button.appendChild(toolIcon);\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * Redactor block\n\t     */\n\t    draw.block = function (tagName, content) {\n\t\n\t        var node = document.createElement(tagName);\n\t\n\t        node.innerHTML = content || '';\n\t\n\t        return node;\n\t    };\n\t\n\t    /**\n\t     * Creates Node with passed tagName and className\n\t     * @param {string}  tagName\n\t     * @param {string} className\n\t     * @param {object} properties - allow to assign properties\n\t     */\n\t    draw.node = function (tagName, className, properties) {\n\t\n\t        var el = document.createElement(tagName);\n\t\n\t        if (className) el.className = className;\n\t\n\t        if (properties) {\n\t\n\t            for (var name in properties) {\n\t\n\t                el[name] = properties[name];\n\t            }\n\t        }\n\t\n\t        return el;\n\t    };\n\t\n\t    /**\n\t    * Unavailable plugin block\n\t    */\n\t    draw.unavailableBlock = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.classList.add('cdx-unavailable-block');\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    return draw;\n\t}({});\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Caret Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (caret) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @var {int} InputIndex - editable element in DOM\n\t     */\n\t    caret.inputIndex = null;\n\t\n\t    /**\n\t     * @var {int} offset - caret position in a text node.\n\t     */\n\t    caret.offset = null;\n\t\n\t    /**\n\t     * @var {int} focusedNodeIndex - we get index of child node from first-level block\n\t     */\n\t    caret.focusedNodeIndex = null;\n\t\n\t    /**\n\t     * Creates Document Range and sets caret to the element.\n\t     * @protected\n\t     * @uses caret.save — if you need to save caret position\n\t     * @param {Element} el - Changed Node.\n\t     */\n\t    caret.set = function (el, index, offset) {\n\t\n\t        offset = offset || caret.offset || 0;\n\t        index = index || caret.focusedNodeIndex || 0;\n\t\n\t        var childs = el.childNodes,\n\t            nodeToSet;\n\t\n\t        if (childs.length === 0) {\n\t\n\t            nodeToSet = el;\n\t        } else {\n\t\n\t            nodeToSet = childs[index];\n\t        }\n\t\n\t        /** If Element is INPUT */\n\t        if (el.contentEditable != 'true') {\n\t\n\t            el.focus();\n\t            return;\n\t        }\n\t\n\t        if (editor.core.isDomNode(nodeToSet)) {\n\t\n\t            nodeToSet = editor.content.getDeepestTextNodeFromPosition(nodeToSet, nodeToSet.childNodes.length);\n\t        }\n\t\n\t        var range = document.createRange(),\n\t            selection = window.getSelection();\n\t\n\t        window.setTimeout(function () {\n\t\n\t            range.setStart(nodeToSet, offset);\n\t            range.setEnd(nodeToSet, offset);\n\t\n\t            selection.removeAllRanges();\n\t            selection.addRange(range);\n\t\n\t            editor.caret.saveCurrentInputIndex();\n\t        }, 20);\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     * Updates index of input and saves it in caret object\n\t     */\n\t    caret.saveCurrentInputIndex = function () {\n\t\n\t        /** Index of Input that we paste sanitized content */\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        if (!focusedNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** Looking for parent contentEditable block */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        caret.inputIndex = editableElementIndex;\n\t    };\n\t\n\t    /**\n\t     * Returns current input index (caret object)\n\t     */\n\t    caret.getCurrentInputIndex = function () {\n\t\n\t        return caret.inputIndex;\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of first-level block after that we set caret into next input\n\t     */\n\t    caret.setToNextBlock = function (index) {\n\t\n\t        var inputs = editor.state.inputs,\n\t            nextInput = inputs[index + 1];\n\t\n\t        if (!nextInput) {\n\t\n\t            editor.core.log('We are reached the end');\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!nextInput.childNodes.length) {\n\t\n\t            var emptyTextElement = document.createTextNode('');\n\t\n\t            nextInput.appendChild(emptyTextElement);\n\t        }\n\t\n\t        editor.caret.inputIndex = index + 1;\n\t        editor.caret.set(nextInput, 0, 0);\n\t        editor.content.workingNodeChanged(nextInput);\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of target input.\n\t     * Sets caret to input with this index\n\t     */\n\t    caret.setToBlock = function (index) {\n\t\n\t        var inputs = editor.state.inputs,\n\t            targetInput = inputs[index];\n\t\n\t        if (!targetInput) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!targetInput.childNodes.length) {\n\t\n\t            var emptyTextElement = document.createTextNode('');\n\t\n\t            targetInput.appendChild(emptyTextElement);\n\t        }\n\t\n\t        editor.caret.inputIndex = index;\n\t        editor.caret.set(targetInput, 0, 0);\n\t        editor.content.workingNodeChanged(targetInput);\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of input\n\t     */\n\t    caret.setToPreviousBlock = function (index) {\n\t\n\t        index = index || 0;\n\t\n\t        var inputs = editor.state.inputs,\n\t            previousInput = inputs[index - 1],\n\t            lastChildNode,\n\t            lengthOfLastChildNode,\n\t            emptyTextElement;\n\t\n\t        if (!previousInput) {\n\t\n\t            editor.core.log('We are reached first node');\n\t            return;\n\t        }\n\t\n\t        lastChildNode = editor.content.getDeepestTextNodeFromPosition(previousInput, previousInput.childNodes.length);\n\t        lengthOfLastChildNode = lastChildNode.length;\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!previousInput.childNodes.length) {\n\t\n\t            emptyTextElement = document.createTextNode('');\n\t            previousInput.appendChild(emptyTextElement);\n\t        }\n\t        editor.caret.inputIndex = index - 1;\n\t        editor.caret.set(previousInput, previousInput.childNodes.length - 1, lengthOfLastChildNode);\n\t        editor.content.workingNodeChanged(inputs[index - 1]);\n\t    };\n\t\n\t    caret.position = {\n\t\n\t        atStart: function atStart() {\n\t\n\t            var selection = window.getSelection(),\n\t                anchorOffset = selection.anchorOffset,\n\t                anchorNode = selection.anchorNode,\n\t                firstLevelBlock = editor.content.getFirstLevelBlock(anchorNode),\n\t                pluginsRender = firstLevelBlock.childNodes[0];\n\t\n\t            if (!editor.core.isDomNode(anchorNode)) {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t            }\n\t\n\t            var isFirstNode = anchorNode === pluginsRender.childNodes[0],\n\t                isOffsetZero = anchorOffset === 0;\n\t\n\t            return isFirstNode && isOffsetZero;\n\t        },\n\t\n\t        atTheEnd: function atTheEnd() {\n\t\n\t            var selection = window.getSelection(),\n\t                anchorOffset = selection.anchorOffset,\n\t                anchorNode = selection.anchorNode;\n\t\n\t            /** Caret is at the end of input */\n\t            return !anchorNode || !anchorNode.length || anchorOffset === anchorNode.length;\n\t        }\n\t    };\n\t\n\t    return caret;\n\t}({});\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Notification Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (notifications) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    var queue = [];\n\t\n\t    var addToQueue = function addToQueue(settings) {\n\t\n\t        queue.push(settings);\n\t\n\t        var index = 0;\n\t\n\t        while (index < queue.length && queue.length > 5) {\n\t\n\t            if (queue[index].type == 'confirm' || queue[index].type == 'prompt') {\n\t\n\t                index++;\n\t                continue;\n\t            }\n\t\n\t            queue[index].close();\n\t            queue.splice(index, 1);\n\t        }\n\t    };\n\t\n\t    notifications.createHolder = function () {\n\t\n\t        var holder = editor.draw.node('DIV', 'cdx-notifications-block');\n\t\n\t        editor.nodes.notifications = document.body.appendChild(holder);\n\t\n\t        return holder;\n\t    };\n\t\n\t    /**\n\t     * Error notificator. Shows block with message\n\t     * @protected\n\t     */\n\t    notifications.errorThrown = function (errorMsg, event) {\n\t\n\t        editor.notifications.notification({ message: 'This action is not available currently', type: event.type });\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Appends notification\n\t     *\n\t     *  settings = {\n\t     *      type        - notification type (reserved types: alert, confirm, prompt). Just add class 'cdx-notification-'+type\n\t     *      message     - notification message\n\t     *      okMsg       - confirm button text (default - 'Ok')\n\t     *      cancelBtn   - cancel button text (default - 'Cancel'). Only for confirm and prompt types\n\t     *      confirm     - function-handler for ok button click\n\t     *      cancel      - function-handler for cancel button click. Only for confirm and prompt types\n\t     *      time        - time (in seconds) after which notification will close (default - 10s)\n\t     *  }\n\t     *\n\t     * @param settings\n\t     */\n\t    notifications.notification = function (constructorSettings) {\n\t\n\t        /** Private vars and methods */\n\t        var notification = null,\n\t            cancel = null,\n\t            type = null,\n\t            confirm = null,\n\t            inputField = null;\n\t\n\t        var confirmHandler = function confirmHandler() {\n\t\n\t            close();\n\t\n\t            if (typeof confirm !== 'function') {\n\t\n\t                return;\n\t            }\n\t\n\t            if (type == 'prompt') {\n\t\n\t                confirm(inputField.value);\n\t                return;\n\t            }\n\t\n\t            confirm();\n\t        };\n\t\n\t        var cancelHandler = function cancelHandler() {\n\t\n\t            close();\n\t\n\t            if (typeof cancel !== 'function') {\n\t\n\t                return;\n\t            }\n\t\n\t            cancel();\n\t        };\n\t\n\t        /** Public methods */\n\t        function create(settings) {\n\t\n\t            if (!(settings && settings.message)) {\n\t\n\t                editor.core.log('Can\\'t create notification. Message is missed');\n\t                return;\n\t            }\n\t\n\t            settings.type = settings.type || 'alert';\n\t            settings.time = settings.time * 1000 || 10000;\n\t\n\t            var wrapper = editor.draw.node('DIV', 'cdx-notification'),\n\t                message = editor.draw.node('DIV', 'cdx-notification__message'),\n\t                input = editor.draw.node('INPUT', 'cdx-notification__input'),\n\t                okBtn = editor.draw.node('SPAN', 'cdx-notification__ok-btn'),\n\t                cancelBtn = editor.draw.node('SPAN', 'cdx-notification__cancel-btn');\n\t\n\t            message.textContent = settings.message;\n\t            okBtn.textContent = settings.okMsg || 'ОК';\n\t            cancelBtn.textContent = settings.cancelMsg || 'Отмена';\n\t\n\t            editor.listeners.add(okBtn, 'click', confirmHandler);\n\t            editor.listeners.add(cancelBtn, 'click', cancelHandler);\n\t\n\t            wrapper.appendChild(message);\n\t\n\t            if (settings.type == 'prompt') {\n\t\n\t                wrapper.appendChild(input);\n\t            }\n\t\n\t            wrapper.appendChild(okBtn);\n\t\n\t            if (settings.type == 'prompt' || settings.type == 'confirm') {\n\t\n\t                wrapper.appendChild(cancelBtn);\n\t            }\n\t\n\t            wrapper.classList.add('cdx-notification-' + settings.type);\n\t            wrapper.dataset.type = settings.type;\n\t\n\t            notification = wrapper;\n\t            type = settings.type;\n\t            confirm = settings.confirm;\n\t            cancel = settings.cancel;\n\t            inputField = input;\n\t\n\t            if (settings.type != 'prompt' && settings.type != 'confirm') {\n\t\n\t                window.setTimeout(close, settings.time);\n\t            }\n\t        };\n\t\n\t        function send() {\n\t\n\t            editor.nodes.notifications.appendChild(notification);\n\t            inputField.focus();\n\t\n\t            editor.nodes.notifications.classList.add('cdx-notification__notification-appending');\n\t\n\t            window.setTimeout(function () {\n\t\n\t                editor.nodes.notifications.classList.remove('cdx-notification__notification-appending');\n\t            }, 100);\n\t\n\t            addToQueue({ type: type, close: close });\n\t        };\n\t\n\t        function close() {\n\t\n\t            notification.remove();\n\t        };\n\t\n\t        if (constructorSettings) {\n\t\n\t            create(constructorSettings);\n\t            send();\n\t        }\n\t\n\t        return {\n\t            create: create,\n\t            send: send,\n\t            close: close\n\t        };\n\t    };\n\t\n\t    notifications.clear = function () {\n\t\n\t        editor.nodes.notifications.innerHTML = '';\n\t        queue = [];\n\t    };\n\t\n\t    return notifications;\n\t}({});\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Codex Editor Parser Module\n\t *\n\t * @author Codex Team\n\t * @version 1.1\n\t */\n\t\n\tmodule.exports = function (parser) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /** inserting text */\n\t    parser.insertPastedContent = function (blockType, tag) {\n\t\n\t        editor.content.insertBlock({\n\t            type: blockType.type,\n\t            block: blockType.render({\n\t                text: tag.innerHTML\n\t            })\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Check DOM node for display style: separated block or child-view\n\t     */\n\t    parser.isFirstLevelBlock = function (node) {\n\t\n\t        return node.nodeType == editor.core.nodeTypes.TAG && node.classList.contains(editor.ui.className.BLOCK_CLASSNAME);\n\t    };\n\t\n\t    return parser;\n\t}({});\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Sanitizer\n\t */\n\t\n\tmodule.exports = function (sanitizer) {\n\t\n\t    var janitor = __webpack_require__(18);\n\t\n\t    /**\n\t     * Basic config\n\t     */\n\t    var Config = {\n\t\n\t        BASIC: {\n\t\n\t            tags: {\n\t                p: {},\n\t                a: {\n\t                    href: true,\n\t                    target: '_blank',\n\t                    rel: 'nofollow'\n\t                },\n\t                i: {},\n\t                b: {},\n\t                strong: {},\n\t                em: {},\n\t                span: {}\n\t            }\n\t        }\n\t    };\n\t\n\t    sanitizer.Config = Config;\n\t\n\t    sanitizer.init = janitor;\n\t\n\t    return sanitizer;\n\t}({});\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    module.exports = factory();\n\t  } else {\n\t    root.HTMLJanitor = factory();\n\t  }\n\t}(this, function () {\n\t\n\t  /**\n\t   * @param {Object} config.tags Dictionary of allowed tags.\n\t   * @param {boolean} config.keepNestedBlockElements Default false.\n\t   */\n\t  function HTMLJanitor(config) {\n\t\n\t    var tagDefinitions = config['tags'];\n\t    var tags = Object.keys(tagDefinitions);\n\t\n\t    var validConfigValues = tags\n\t      .map(function(k) { return typeof tagDefinitions[k]; })\n\t      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\t\n\t    if(!validConfigValues) {\n\t      throw new Error(\"The configuration was invalid\");\n\t    }\n\t\n\t    this.config = config;\n\t  }\n\t\n\t  // TODO: not exhaustive?\n\t  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n\t  function isBlockElement(node) {\n\t    return blockElementNames.indexOf(node.nodeName) !== -1;\n\t  }\n\t\n\t  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n\t  function isInlineElement(node) {\n\t    return inlineElementNames.indexOf(node.nodeName) !== -1;\n\t  }\n\t\n\t  HTMLJanitor.prototype.clean = function (html) {\n\t    var sandbox = document.createElement('div');\n\t    sandbox.innerHTML = html;\n\t\n\t    this._sanitize(sandbox);\n\t\n\t    return sandbox.innerHTML;\n\t  };\n\t\n\t  HTMLJanitor.prototype._sanitize = function (parentNode) {\n\t    var treeWalker = createTreeWalker(parentNode);\n\t    var node = treeWalker.firstChild();\n\t    if (!node) { return; }\n\t\n\t    do {\n\t      // Ignore nodes that have already been sanitized\n\t      if (node._sanitized) {\n\t        continue;\n\t      }\n\t\n\t      if (node.nodeType === Node.TEXT_NODE) {\n\t        // If this text node is just whitespace and the previous or next element\n\t        // sibling is a block element, remove it\n\t        // N.B.: This heuristic could change. Very specific to a bug with\n\t        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n\t        // FIXME: make this an option?\n\t        if (node.data.trim() === ''\n\t            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n\t                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n\t          parentNode.removeChild(node);\n\t          this._sanitize(parentNode);\n\t          break;\n\t        } else {\n\t          continue;\n\t        }\n\t      }\n\t\n\t      // Remove all comments\n\t      if (node.nodeType === Node.COMMENT_NODE) {\n\t        parentNode.removeChild(node);\n\t        this._sanitize(parentNode);\n\t        break;\n\t      }\n\t\n\t      var isInline = isInlineElement(node);\n\t      var containsBlockElement;\n\t      if (isInline) {\n\t        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n\t      }\n\t\n\t      // Block elements should not be nested (e.g. <li><p>...); if\n\t      // they are, we want to unwrap the inner block element.\n\t      var isNotTopContainer = !! parentNode.parentNode;\n\t      var isNestedBlockElement =\n\t            isBlockElement(parentNode) &&\n\t            isBlockElement(node) &&\n\t            isNotTopContainer;\n\t\n\t      var nodeName = node.nodeName.toLowerCase();\n\t\n\t      var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);\n\t\n\t      var isInvalid = isInline && containsBlockElement;\n\t\n\t      // Drop tag entirely according to the whitelist *and* if the markup\n\t      // is invalid.\n\t      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n\t          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n\t        // Do not keep the inner text of SCRIPT/STYLE elements.\n\t        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n\t          while (node.childNodes.length > 0) {\n\t            parentNode.insertBefore(node.childNodes[0], node);\n\t          }\n\t        }\n\t        parentNode.removeChild(node);\n\t\n\t        this._sanitize(parentNode);\n\t        break;\n\t      }\n\t\n\t      // Sanitize attributes\n\t      for (var a = 0; a < node.attributes.length; a += 1) {\n\t        var attr = node.attributes[a];\n\t\n\t        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n\t          node.removeAttribute(attr.name);\n\t          // Shift the array to continue looping.\n\t          a = a - 1;\n\t        }\n\t      }\n\t\n\t      // Sanitize children\n\t      this._sanitize(node);\n\t\n\t      // Mark node as sanitized so it's ignored in future runs\n\t      node._sanitized = true;\n\t    } while ((node = treeWalker.nextSibling()));\n\t  };\n\t\n\t  function createTreeWalker(node) {\n\t    return document.createTreeWalker(node,\n\t                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n\t                                     null, false);\n\t  }\n\t\n\t  function getAllowedAttrs(config, nodeName, node){\n\t    if (typeof config.tags[nodeName] === 'function') {\n\t      return config.tags[nodeName](node);\n\t    } else {\n\t      return config.tags[nodeName];\n\t    }\n\t  }\n\t\n\t  function shouldRejectNode(node, allowedAttrs){\n\t    if (typeof allowedAttrs === 'undefined') {\n\t      return true;\n\t    } else if (typeof allowedAttrs === 'boolean') {\n\t      return !allowedAttrs;\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  function shouldRejectAttr(attr, allowedAttrs, node){\n\t    var attrName = attr.name.toLowerCase();\n\t\n\t    if (allowedAttrs === true){\n\t      return false;\n\t    } else if (typeof allowedAttrs[attrName] === 'function'){\n\t      return !allowedAttrs[attrName](attr.value, node);\n\t    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n\t      return true;\n\t    } else if (allowedAttrs[attrName] === false) {\n\t      return true;\n\t    } else if (typeof allowedAttrs[attrName] === 'string') {\n\t      return (allowedAttrs[attrName] !== attr.value);\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  return HTMLJanitor;\n\t\n\t}));\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Codex Editor Listeners module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\t/**\n\t * Module-decorator for event listeners assignment\n\t */\n\tmodule.exports = function (listeners) {\n\t\n\t    var allListeners = [];\n\t\n\t    /**\n\t     * Search methods\n\t     *\n\t     * byElement, byType and byHandler returns array of suitable listeners\n\t     * one and all takes element, eventType, and handler and returns first (all) suitable listener\n\t     *\n\t     */\n\t    listeners.search = function () {\n\t\n\t        var byElement = function byElement(element, context) {\n\t\n\t            var listenersOnElement = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.element === element) {\n\t\n\t                    listenersOnElement.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersOnElement;\n\t        };\n\t\n\t        var byType = function byType(eventType, context) {\n\t\n\t            var listenersWithType = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.type === eventType) {\n\t\n\t                    listenersWithType.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersWithType;\n\t        };\n\t\n\t        var byHandler = function byHandler(handler, context) {\n\t\n\t            var listenersWithHandler = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.handler === handler) {\n\t\n\t                    listenersWithHandler.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersWithHandler;\n\t        };\n\t\n\t        var one = function one(element, eventType, handler) {\n\t\n\t            var result = allListeners;\n\t\n\t            if (element) result = byElement(element, result);\n\t\n\t            if (eventType) result = byType(eventType, result);\n\t\n\t            if (handler) result = byHandler(handler, result);\n\t\n\t            return result[0];\n\t        };\n\t\n\t        var all = function all(element, eventType, handler) {\n\t\n\t            var result = allListeners;\n\t\n\t            if (element) result = byElement(element, result);\n\t\n\t            if (eventType) result = byType(eventType, result);\n\t\n\t            if (handler) result = byHandler(handler, result);\n\t\n\t            return result;\n\t        };\n\t\n\t        return {\n\t            byElement: byElement,\n\t            byType: byType,\n\t            byHandler: byHandler,\n\t            one: one,\n\t            all: all\n\t        };\n\t    }();\n\t\n\t    listeners.add = function (element, eventType, handler, isCapture) {\n\t\n\t        element.addEventListener(eventType, handler, isCapture);\n\t\n\t        var data = {\n\t            element: element,\n\t            type: eventType,\n\t            handler: handler\n\t        };\n\t\n\t        var alreadyAddedListener = listeners.search.one(element, eventType, handler);\n\t\n\t        if (!alreadyAddedListener) {\n\t\n\t            allListeners.push(data);\n\t        }\n\t    };\n\t\n\t    listeners.remove = function (element, eventType, handler) {\n\t\n\t        element.removeEventListener(eventType, handler);\n\t\n\t        var existingListeners = listeners.search.all(element, eventType, handler);\n\t\n\t        for (var i = 0; i < existingListeners.length; i++) {\n\t\n\t            var index = allListeners.indexOf(existingListeners[i]);\n\t\n\t            if (index > 0) {\n\t\n\t                allListeners.splice(index, 1);\n\t            }\n\t        }\n\t    };\n\t\n\t    listeners.removeAll = function () {\n\t\n\t        allListeners.map(function (current) {\n\t\n\t            listeners.remove(current.element, current.type, current.handler);\n\t        });\n\t    };\n\t\n\t    listeners.get = function (element, eventType, handler) {\n\t\n\t        return listeners.search.all(element, eventType, handler);\n\t    };\n\t\n\t    return listeners;\n\t}({});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Codex Editor Destroyer module\n\t *\n\t * @auhor Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (destroyer) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    destroyer.removeNodes = function () {\n\t\n\t        editor.nodes.wrapper.remove();\n\t        editor.nodes.notifications.remove();\n\t    };\n\t\n\t    destroyer.destroyPlugins = function () {\n\t\n\t        for (var tool in editor.tools) {\n\t\n\t            if (typeof editor.tools[tool].destroy === 'function') {\n\t\n\t                editor.tools[tool].destroy();\n\t            }\n\t        }\n\t    };\n\t\n\t    destroyer.destroyScripts = function () {\n\t\n\t        var scripts = document.getElementsByTagName('SCRIPT');\n\t\n\t        for (var i = 0; i < scripts.length; i++) {\n\t\n\t            if (scripts[i].id.indexOf(editor.scriptPrefix) + 1) {\n\t\n\t                scripts[i].remove();\n\t                i--;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Delete editor data from webpage.\n\t     * You should send settings argument with boolean flags:\n\t     * @param settings.ui- remove redactor event listeners and DOM nodes\n\t     * @param settings.scripts - remove redactor scripts from DOM\n\t     * @param settings.plugins - remove plugin's objects\n\t     * @param settings.core - remove editor core. You can remove core only if UI and scripts flags is true\n\t     * }\n\t     *\n\t     */\n\t    destroyer.destroy = function (settings) {\n\t\n\t        if (!settings || (typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n\t\n\t            return;\n\t        }\n\t\n\t        if (settings.ui) {\n\t\n\t            destroyer.removeNodes();\n\t            editor.listeners.removeAll();\n\t        }\n\t\n\t        if (settings.scripts) {\n\t\n\t            destroyer.destroyScripts();\n\t        }\n\t\n\t        if (settings.plugins) {\n\t\n\t            destroyer.destroyPlugins();\n\t        }\n\t\n\t        if (settings.ui && settings.scripts && settings.core) {\n\t\n\t            delete codex.editor;\n\t        }\n\t    };\n\t\n\t    return destroyer;\n\t}({});\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Paste module\n\t *\n\t * @author Codex Team\n\t * @version 1.1.1\n\t */\n\t\n\tmodule.exports = function (paste) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    var patterns = [];\n\t\n\t    paste.prepare = function () {\n\t\n\t        var tools = editor.tools;\n\t\n\t        for (var tool in tools) {\n\t\n\t            if (!tools[tool].renderOnPastePatterns || !Array.isArray(tools[tool].renderOnPastePatterns)) {\n\t\n\t                continue;\n\t            }\n\t\n\t            tools[tool].renderOnPastePatterns.map(function (pattern) {\n\t\n\t                patterns.push(pattern);\n\t            });\n\t        }\n\t\n\t        return Promise.resolve();\n\t    };\n\t\n\t    /**\n\t     * Saves data\n\t     * @param event\n\t     */\n\t    paste.pasted = function (event) {\n\t\n\t        var clipBoardData = event.clipboardData || window.clipboardData,\n\t            content = clipBoardData.getData('Text');\n\t\n\t        var result = analize(content);\n\t\n\t        if (result) {\n\t\n\t            event.preventDefault();\n\t            event.stopImmediatePropagation();\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Analizes pated string and calls necessary method\n\t     */\n\t\n\t    var analize = function analize(string) {\n\t\n\t        var result = false,\n\t            content = editor.content.currentNode,\n\t            plugin = content.dataset.tool;\n\t\n\t        patterns.map(function (pattern) {\n\t\n\t            var execArray = pattern.regex.exec(string),\n\t                match = execArray && execArray[0];\n\t\n\t            if (match && match === string.trim()) {\n\t\n\t                /** current block is not empty */\n\t                if (content.textContent.trim() && plugin == editor.settings.initialBlockPlugin) {\n\t\n\t                    pasteToNewBlock_();\n\t                }\n\t\n\t                pattern.callback(string, pattern);\n\t                result = true;\n\t            }\n\t        });\n\t\n\t        return result;\n\t    };\n\t\n\t    var pasteToNewBlock_ = function pasteToNewBlock_() {\n\t\n\t        /** Create new initial block */\n\t        editor.content.insertBlock({\n\t\n\t            type: editor.settings.initialBlockPlugin,\n\t            block: editor.tools[editor.settings.initialBlockPlugin].render({\n\t                text: ''\n\t            })\n\t\n\t        }, false);\n\t    };\n\t\n\t    return paste;\n\t}({});\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// codex-editor.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 200d5d09855b43cc1018","/**\n *\n * Codex Editor\n *\n * @author Codex Team\n */\n\nmodule.exports = (function (editor) {\n\n    'use strict';\n\n    editor.version = VERSION;\n    editor.scriptPrefix = 'cdx-script-';\n\n    var init = function () {\n\n        editor.core          = require('./modules/core');\n        editor.tools         = require('./modules/tools');\n        editor.ui            = require('./modules/ui');\n        editor.transport     = require('./modules/transport');\n        editor.renderer      = require('./modules/renderer');\n        editor.saver         = require('./modules/saver');\n        editor.content       = require('./modules/content');\n        editor.toolbar       = require('./modules/toolbar/toolbar');\n        editor.callback      = require('./modules/callbacks');\n        editor.draw          = require('./modules/draw');\n        editor.caret         = require('./modules/caret');\n        editor.notifications = require('./modules/notifications');\n        editor.parser        = require('./modules/parser');\n        editor.sanitizer     = require('./modules/sanitizer');\n        editor.listeners     = require('./modules/listeners');\n        editor.destroyer     = require('./modules/destroyer');\n        editor.paste         = require('./modules/paste');\n\n    };\n\n    /**\n     * @public\n     * holds initial settings\n     */\n    editor.settings = {\n        tools     : ['paragraph', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n        textareaId: 'codex-editor',\n\n        // Type of block showing on empty editor\n        initialBlockPlugin: 'paragraph'\n    };\n\n    /**\n     * public\n     *\n     * Static nodes\n     */\n    editor.nodes = {\n        textarea          : null,\n        wrapper           : null,\n        toolbar           : null,\n        inlineToolbar     : {\n            wrapper : null,\n            buttons : null,\n            actions : null\n        },\n        toolbox           : null,\n        notifications     : null,\n        plusButton        : null,\n        showSettingsButton: null,\n        showTrashButton   : null,\n        blockSettings     : null,\n        pluginSettings    : null,\n        defaultSettings   : null,\n        toolbarButtons    : {}, // { type : DomEl, ... }\n        redactor          : null\n    };\n\n    /**\n     * @public\n     *\n     * Output state\n     */\n    editor.state = {\n        jsonOutput  : [],\n        blocks      : [],\n        inputs      : []\n    };\n\n    /**\n    * @public\n    * Editor plugins\n    */\n    editor.tools = {};\n\n    /**\n     * Initialization\n     * @uses Promise cEditor.core.prepare\n     * @param {} userSettings are :\n     *          - tools [],\n     *          - textareaId String\n     *          ...\n     *\n     * Load user defined tools\n     * Tools must contain this important objects :\n     *  @param {String} type - this is a type of plugin. It can be used as plugin name\n     *  @param {String} iconClassname - this a icon in toolbar\n     *  @param {Object} make - what should plugin do, when it is clicked\n     *  @param {Object} appendCallback - callback after clicking\n     *  @param {Element} settings - what settings does it have\n     *  @param {Object} render - plugin get JSON, and should return HTML\n     *  @param {Object} save - plugin gets HTML content, returns JSON\n     *  @param {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n     *  @param {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n     *\n     * @example\n     *   -  type             : 'header',\n     *   -  iconClassname    : 'ce-icon-header',\n     *   -  make             : headerTool.make,\n     *   -  appendCallback   : headerTool.appendCallback,\n     *   -  settings         : headerTool.makeSettings(),\n     *   -  render           : headerTool.render,\n     *   -  save             : headerTool.save,\n     *   -  displayInToolbox : true,\n     *   -  enableLineBreaks : false\n     */\n    editor.start = function (userSettings) {\n\n        init();\n\n        editor.core.prepare(userSettings)\n\n        // If all ok, make UI, bind events and parse initial-content\n            .then(editor.ui.prepare)\n            .then(editor.tools.prepare)\n            .then(editor.paste.prepare)\n            .then(editor.transport.prepare)\n            .then(editor.renderer.makeBlocksFromData)\n            .then(editor.ui.saveInputs)\n            .catch(function (error) {\n\n                editor.core.log('Initialization failed with error: %o', 'warn', error);\n\n            });\n\n    };\n\n    return editor;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./codex.js","/**\n * Codex Editor Core\n *\n * @author Codex Team\n * @version 1.1.3\n */\n\nmodule.exports = (function (core) {\n\n    let editor = codex.editor;\n\n    /**\n     * @public\n     *\n     * Editor preparing method\n     * @return Promise\n     */\n    core.prepare = function (userSettings) {\n\n        return new Promise(function (resolve, reject) {\n\n            if ( userSettings ) {\n\n                editor.settings.tools = userSettings.tools || editor.settings.tools;\n\n            }\n\n            if (userSettings.data) {\n\n                editor.state.blocks = userSettings.data;\n\n            }\n\n            if (userSettings.initialBlockPlugin) {\n\n                editor.settings.initialBlockPlugin = userSettings.initialBlockPlugin;\n\n            }\n\n            editor.hideToolbar = userSettings.hideToolbar;\n\n            editor.nodes.textarea = document.getElementById(userSettings.textareaId || editor.settings.textareaId);\n\n            if (typeof editor.nodes.textarea === undefined || editor.nodes.textarea === null) {\n\n                reject(Error(\"Textarea wasn't found by ID: #\" + userSettings.textareaId));\n\n            } else {\n\n                resolve();\n\n            }\n\n        });\n\n    };\n\n    /**\n     * Logging method\n     * @param type = ['log', 'info', 'warn']\n     */\n    core.log = function (msg, type, arg) {\n\n        type = type || 'log';\n\n        if (!arg) {\n\n            arg  = msg || 'undefined';\n            msg  = '[codex-editor]:      %o';\n\n        } else {\n\n            msg  = '[codex-editor]:      ' + msg;\n\n        }\n\n        try{\n\n            if ( 'console' in window && window.console[ type ] ) {\n\n                if ( arg ) window.console[ type ]( msg, arg );\n                else window.console[ type ]( msg );\n\n            }\n\n        }catch(e) {}\n\n    };\n\n    /**\n     * @protected\n     *\n     * Helper for insert one element after another\n     */\n    core.insertAfter = function (target, element) {\n\n        target.parentNode.insertBefore(element, target.nextSibling);\n\n    };\n\n    /**\n     * @const\n     *\n     * Readable DOM-node types map\n     */\n    core.nodeTypes = {\n        TAG     : 1,\n        TEXT    : 3,\n        COMMENT : 8\n    };\n\n    /**\n     * @const\n     * Readable keys map\n     */\n    core.keys = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, DOWN: 40, RIGHT: 39, DELETE: 46, META: 91 };\n\n    /**\n     * @protected\n     *\n     * Check object for DOM node\n     */\n    core.isDomNode = function (el) {\n\n        return el && typeof el === 'object' && el.nodeType && el.nodeType == this.nodeTypes.TAG;\n\n    };\n\n    /**\n    * Checks passed object for emptiness\n    * @require ES5 - Object.keys\n    * @param {object}\n    */\n    core.isEmpty = function ( obj ) {\n\n        return Object.keys(obj).length === 0;\n\n    };\n\n    /**\n     * Native Ajax\n     */\n    core.ajax = function (settings) {\n\n        if (!settings || !settings.url) {\n\n            return;\n\n        }\n\n        var XMLHTTP          = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n            successFunction = function () {},\n            encodedString,\n            isFormData,\n            prop;\n\n        settings.async           = true;\n        settings.type            = settings.type || 'GET';\n        settings.data            = settings.data || '';\n        settings['content-type'] = settings['content-type'] || 'application/json; charset=utf-8';\n        successFunction     = settings.success || successFunction ;\n\n        if (settings.type == 'GET' && settings.data) {\n\n            settings.url = /\\?/.test(settings.url) ? settings.url + '&' + settings.data : settings.url + '?' + settings.data;\n\n        } else {\n\n            encodedString = '';\n            for(prop in settings.data) {\n\n                encodedString += (prop + '=' + encodeURIComponent(settings.data[prop]) + '&');\n\n            }\n\n        }\n\n        if (settings.withCredentials) {\n\n            XMLHTTP.withCredentials = true;\n\n        }\n\n        if (settings.beforeSend && typeof settings.beforeSend == 'function') {\n\n            settings.beforeSend.call();\n\n        }\n\n        XMLHTTP.open( settings.type, settings.url, settings.async );\n\n        /**\n         * If we send FormData, we need no content-type header\n         */\n        isFormData = isFormData_(settings.data);\n\n        if (!isFormData) {\n\n            if (settings.type != 'POST') {\n\n                XMLHTTP.setRequestHeader('Content-type', settings['content-type']);\n\n            } else {\n\n                XMLHTTP.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n            }\n\n        }\n\n        XMLHTTP.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n        XMLHTTP.onreadystatechange = function () {\n\n            if (XMLHTTP.readyState == 4 && XMLHTTP.status == 200) {\n\n                successFunction(XMLHTTP.responseText);\n\n            }\n\n        };\n\n        if (isFormData) {\n\n            // Sending FormData\n            XMLHTTP.send(settings.data);\n\n        } else {\n\n            // POST requests\n            XMLHTTP.send(encodedString);\n\n        }\n\n\n    };\n\n    /**\n    * Appends script to head of document\n    * @return Promise\n    */\n    core.importScript = function (scriptPath, instanceName) {\n\n        return new Promise(function (resolve, reject) {\n\n            let script;\n\n            /** Script is already loaded */\n            if ( !instanceName ) {\n\n                reject('Instance name is missed');\n\n            } else if ( document.getElementById(editor.scriptPrefix + instanceName) ) {\n\n                resolve(scriptPath);\n\n            }\n\n            script = document.createElement('SCRIPT');\n            script.async = true;\n            script.defer = true;\n            script.id = editor.scriptPrefix + instanceName;\n\n            script.onload = function () {\n\n                resolve(scriptPath);\n\n            };\n\n            script.onerror = function () {\n\n                reject(scriptPath);\n\n            };\n\n            script.src = scriptPath;\n            document.head.appendChild(script);\n\n        });\n\n    };\n\n    /**\n     * Function for checking is it FormData object to send.\n     * @param {Object} object to check\n     * @return boolean\n     */\n    var isFormData_ = function (object) {\n\n        return object instanceof FormData;\n\n    };\n\n    return core;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/core.js","/**\n* Module working with plugins\n*/\nmodule.exports = (function () {\n\n    let editor = codex.editor;\n\n    /**\n     * Initialize plugins before using\n     * Ex. Load scripts or call some internal methods\n     * @return Promise\n     */\n    function prepare() {\n\n        return new Promise(function (resolve_, reject_) {\n\n            Promise.resolve()\n\n                /**\n                * Compose a sequence of plugins that requires preparation\n                */\n                .then(function () {\n\n                    let pluginsRequiresPreparation = [],\n                        allPlugins = editor.tools;\n\n                    for ( let pluginName in allPlugins ) {\n\n                        let plugin = allPlugins[pluginName];\n\n                        if (plugin.prepare && typeof plugin.prepare != 'function' || !plugin.prepare) {\n\n                            continue;\n\n                        }\n\n                        pluginsRequiresPreparation.push(plugin);\n\n                    }\n\n                    /**\n                    * If no one passed plugins requires preparation, finish prepare() and go ahead\n                    */\n                    if (!pluginsRequiresPreparation.length) {\n\n                        resolve_();\n\n                    }\n\n                    return pluginsRequiresPreparation;\n\n                })\n\n                /** Wait plugins while they prepares */\n                .then(waitAllPluginsPreparation_)\n\n                .then(function () {\n\n                    editor.core.log('Plugins loaded', 'info');\n                    resolve_();\n\n                }).catch(function (error) {\n\n                    reject_(error);\n\n                });\n\n        });\n\n    }\n\n    /**\n    * @param {array} plugins - list of tools that requires preparation\n    * @return {Promise} resolved while all plugins will be ready or failed\n    */\n    function waitAllPluginsPreparation_(plugins) {\n\n        /**\n        * @calls allPluginsProcessed__ when all plugins prepared or failed\n        */\n        return new Promise (function (allPluginsProcessed__) {\n\n            /**\n             * pluck each element from queue\n             * First, send resolved Promise as previous value\n             * Each plugins \"prepare\" method returns a Promise, that's why\n             * reduce current element will not be able to continue while can't get\n             * a resolved Promise\n             *\n             * If last plugin is \"prepared\" then go to the next stage of initialization\n             */\n            plugins.reduce(function (previousValue, plugin, iteration) {\n\n                return previousValue.then(function () {\n\n                    /**\n                    * Wait till plugins prepared\n                    * @calls pluginIsReady__ when plugin is ready or failed\n                    */\n                    return new Promise ( function (pluginIsReady__) {\n\n                        callPluginsPrepareMethod_( plugin )\n\n                            .then( pluginIsReady__ )\n                            .then( function () {\n\n                                plugin.available = true;\n\n                            })\n\n                            .catch(function (error) {\n\n                                editor.core.log(`Plugin «${plugin.type}» was not loaded. Preparation failed because %o`, 'warn', error);\n                                plugin.available = false;\n                                plugin.loadingMessage = error;\n\n                                /** Go ahead even some plugin has problems */\n                                pluginIsReady__();\n\n                            })\n\n                            .then(function () {\n\n                                /** If last plugin has problems then just ignore and continue */\n                                if (iteration == plugins.length - 1) {\n\n                                    allPluginsProcessed__();\n\n                                }\n\n                            });\n\n                    });\n\n                });\n\n            }, Promise.resolve() );\n\n        });\n\n    }\n\n    var callPluginsPrepareMethod_ = function (plugin) {\n\n        return plugin.prepare( plugin.config || {} );\n\n    };\n\n    return {\n        prepare: prepare\n    };\n\n}());\n\n\n// WEBPACK FOOTER //\n// ./modules/tools.js","/**\n * Codex Editor UI module\n *\n * @author Codex Team\n * @version 1.2.0\n */\n\nmodule.exports = (function (ui) {\n\n    let editor = codex.editor;\n\n    /**\n     * Basic editor classnames\n     */\n    ui.className = {\n\n        /**\n         * @const {string} BLOCK_CLASSNAME - redactor blocks name\n         */\n        BLOCK_CLASSNAME : 'ce-block',\n\n        /**\n         * @const {String} wrapper for plugins content\n         */\n        BLOCK_CONTENT : 'ce-block__content',\n\n        /**\n         * @const {String} BLOCK_STRETCHED - makes block stretched\n         */\n        BLOCK_STRETCHED : 'ce-block--stretched',\n\n        /**\n         * @const {String} BLOCK_HIGHLIGHTED - adds background\n         */\n        BLOCK_HIGHLIGHTED : 'ce-block--focused',\n\n        /**\n         * @const {String} - for all default settings\n         */\n        SETTINGS_ITEM : 'ce-settings__item'\n\n    };\n\n    /**\n     * @protected\n     *\n     * Making main interface\n     */\n    ui.prepare = function () {\n\n        return new Promise(function (resolve) {\n\n            let wrapper  = editor.draw.wrapper(),\n                redactor = editor.draw.redactor(),\n                toolbar  = makeToolBar_();\n\n            wrapper.appendChild(toolbar);\n            wrapper.appendChild(redactor);\n\n            /** Save created ui-elements to static nodes state */\n            editor.nodes.wrapper  = wrapper;\n            editor.nodes.redactor = redactor;\n\n            /** Append editor wrapper with redactor zone  after initial textarea */\n            editor.core.insertAfter(editor.nodes.textarea, wrapper);\n\n            resolve();\n\n        })\n\n        /** Add toolbox tools */\n        .then(addTools_)\n\n        /** Make container for inline toolbar */\n        .then(makeInlineToolbar_)\n\n        /** Add inline toolbar tools */\n        .then(addInlineToolbarTools_)\n\n        /** Draw wrapper for notifications */\n        .then(makeNotificationHolder_)\n\n        /** Add eventlisteners to redactor elements */\n        .then(bindEvents_)\n\n        .catch( function () {\n\n            editor.core.log(\"Can't draw editor interface\");\n\n        });\n\n    };\n\n    /**\n     * @private\n     * Draws inline toolbar zone\n     */\n    var makeInlineToolbar_ = function () {\n\n        var container = editor.draw.inlineToolbar();\n\n        /** Append to redactor new inline block */\n        editor.nodes.inlineToolbar.wrapper = container;\n\n        /** Draw toolbar buttons */\n        editor.nodes.inlineToolbar.buttons = editor.draw.inlineToolbarButtons();\n\n        /** Buttons action or settings */\n        editor.nodes.inlineToolbar.actions = editor.draw.inlineToolbarActions();\n\n        /** Append to inline toolbar buttons as part of it */\n        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.buttons);\n        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.actions);\n\n        editor.nodes.wrapper.appendChild(editor.nodes.inlineToolbar.wrapper);\n\n    };\n\n    var makeToolBar_ = function () {\n\n        let toolbar         = editor.draw.toolbar(),\n            blockButtons    = makeToolbarSettings_(),\n            toolbarContent  = makeToolbarContent_();\n\n        /** Appending first-level block buttons */\n        toolbar.appendChild(blockButtons);\n\n        /** Append toolbarContent to toolbar */\n        toolbar.appendChild(toolbarContent);\n\n        /** Make toolbar global */\n        editor.nodes.toolbar = toolbar;\n\n        return toolbar;\n\n    };\n\n    var makeToolbarContent_ = function () {\n\n        let toolbarContent = editor.draw.toolbarContent(),\n            toolbox        = editor.draw.toolbox(),\n            plusButton     = editor.draw.plusButton();\n\n        /** Append plus button */\n        toolbarContent.appendChild(plusButton);\n\n        /** Appending toolbar tools */\n        toolbarContent.appendChild(toolbox);\n\n        /** Make Toolbox and plusButton global */\n        editor.nodes.toolbox    = toolbox;\n        editor.nodes.plusButton = plusButton;\n\n        return toolbarContent;\n\n    };\n\n    var makeToolbarSettings_ = function () {\n\n        let blockSettings       = editor.draw.blockSettings(),\n            blockButtons        = editor.draw.blockButtons(),\n            defaultSettings     = editor.draw.defaultSettings(),\n            showSettingsButton  = editor.draw.settingsButton(),\n            showTrashButton     = editor.toolbar.settings.makeRemoveBlockButton(),\n            pluginSettings      = editor.draw.pluginsSettings();\n\n        /** Add default and plugins settings */\n        blockSettings.appendChild(pluginSettings);\n        blockSettings.appendChild(defaultSettings);\n\n        /**\n         * Make blocks buttons\n         * This block contains settings button and remove block button\n         */\n        blockButtons.appendChild(showSettingsButton);\n        blockButtons.appendChild(showTrashButton);\n        blockButtons.appendChild(blockSettings);\n\n        /** Make BlockSettings, PluginSettings, DefaultSettings global */\n        editor.nodes.blockSettings      = blockSettings;\n        editor.nodes.pluginSettings     = pluginSettings;\n        editor.nodes.defaultSettings    = defaultSettings;\n        editor.nodes.showSettingsButton = showSettingsButton;\n        editor.nodes.showTrashButton    = showTrashButton;\n\n        return blockButtons;\n\n    };\n\n    /** Draw notifications holder */\n    var makeNotificationHolder_ = function () {\n\n        /** Append block with notifications to the document */\n        editor.nodes.notifications = editor.notifications.createHolder();\n\n    };\n\n    /**\n     * @private\n     * Append tools passed in editor.tools\n     */\n    var addTools_ = function () {\n\n        var tool,\n            toolName,\n            toolButton;\n\n        for ( toolName in editor.settings.tools ) {\n\n            tool = editor.settings.tools[toolName];\n\n            editor.tools[toolName] = tool;\n\n            if (!tool.iconClassname && tool.displayInToolbox) {\n\n                editor.core.log('Toolbar icon classname missed. Tool %o skipped', 'warn', toolName);\n                continue;\n\n            }\n\n            if (typeof tool.render != 'function') {\n\n                editor.core.log('render method missed. Tool %o skipped', 'warn', toolName);\n                continue;\n\n            }\n\n            if (!tool.displayInToolbox) {\n\n                continue;\n\n            } else {\n\n                /** if tools is for toolbox */\n                toolButton = editor.draw.toolbarButton(toolName, tool.iconClassname);\n\n                editor.nodes.toolbox.appendChild(toolButton);\n\n                editor.nodes.toolbarButtons[toolName] = toolButton;\n\n            }\n\n        }\n\n    };\n\n    var addInlineToolbarTools_ = function () {\n\n        var tools = {\n\n            bold: {\n                icon    : 'ce-icon-bold',\n                command : 'bold'\n            },\n\n            italic: {\n                icon    : 'ce-icon-italic',\n                command : 'italic'\n            },\n\n            underline: {\n                icon    : 'ce-icon-underline',\n                command : 'underline'\n            },\n\n            link: {\n                icon    : 'ce-icon-link',\n                command : 'createLink'\n            }\n        };\n\n        var toolButton,\n            tool;\n\n        for(var name in tools) {\n\n            tool = tools[name];\n\n            toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n\n            editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n            /**\n             * Add callbacks to this buttons\n             */\n            editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n\n        }\n\n    };\n\n    /**\n     * @private\n     * Bind editor UI events\n     */\n    var bindEvents_ = function () {\n\n        editor.core.log('ui.bindEvents fired', 'info');\n\n        // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n        //     editor.notifications.errorThrown(errorMsg, event);\n        // }, false );\n\n        /** All keydowns on Document */\n        editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n\n        /** All keydowns on Redactor zone */\n        editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n\n        /** All keydowns on Document */\n        editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false );\n\n        /**\n         * Mouse click to radactor\n         */\n        editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false );\n\n        /**\n         * Clicks to the Plus button\n         */\n        editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n\n        /**\n         * Clicks to SETTINGS button in toolbar\n         */\n        editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false );\n\n        /** Bind click listeners on toolbar buttons */\n        for (var button in editor.nodes.toolbarButtons) {\n\n            editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n\n        }\n\n    };\n\n    ui.addBlockHandlers = function (block) {\n\n        if (!block) return;\n\n        /**\n         * Block keydowns\n         */\n        editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n\n        /**\n         * Pasting content from another source\n         * We have two type of sanitization\n         * First - uses deep-first search algorithm to get sub nodes,\n         * sanitizes whole Block_content and replaces cleared nodes\n         * This method is deprecated\n         * Method is used in editor.callback.blockPaste(event)\n         *\n         * Secont - uses Mutation observer.\n         * Observer \"observe\" DOM changes and send changings to callback.\n         * Callback gets changed node, not whole Block_content.\n         * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n         *\n         * Method is used in editor.callback.blockPasteViaSanitize(event)\n         *\n         * @uses html-janitor\n         * @example editor.callback.blockPasteViaSanitize(event), the second method.\n         *\n         */\n        editor.listeners.add(block, 'paste', editor.callback.blockPasteCallback, false);\n\n        editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n\n    };\n\n    /** getting all contenteditable elements */\n    ui.saveInputs = function () {\n\n        var redactor = editor.nodes.redactor;\n\n        editor.state.inputs = [];\n\n        /** Save all inputs in global variable state */\n        var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n\n        Array.prototype.map.call(inputs, function (current) {\n\n            if (!current.type || current.type == 'text' || current.type == 'textarea') {\n\n                editor.state.inputs.push(current);\n\n            }\n\n        });\n\n    };\n\n    /**\n     * Adds first initial block on empty redactor\n     */\n    ui.addInitialBlock = function () {\n\n        var initialBlockType = editor.settings.initialBlockPlugin,\n            initialBlock;\n\n        if ( !editor.tools[initialBlockType] ) {\n\n            editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n            return;\n\n        }\n\n        initialBlock = editor.tools[initialBlockType].render();\n\n        initialBlock.setAttribute('data-placeholder', 'Расскажите свою историю...');\n\n        editor.content.insertBlock({\n            type  : initialBlockType,\n            block : initialBlock\n        });\n\n        editor.content.workingNodeChanged(initialBlock);\n\n    };\n\n    ui.setInlineToolbarButtonBehaviour = function (button, type) {\n\n        editor.listeners.add(button, 'mousedown', function (event) {\n\n            editor.toolbar.inline.toolClicked(event, type);\n\n        }, false);\n\n    };\n\n    return ui;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/ui.js","/**\n *\n * Codex.Editor Transport Module\n *\n * @copyright 2017 Codex-Team\n * @version 1.2.0\n */\n\nmodule.exports = (function (transport) {\n\n    let editor = codex.editor;\n\n    /**\n     * @type {null} | {DOMElement} input - keeps input element in memory\n     */\n    transport.input = null;\n\n    /**\n     * @property {Object} arguments - keep plugin settings and defined callbacks\n     */\n    transport.arguments = null;\n\n    /**\n     * Prepares input element where will be files\n     */\n    transport.prepare = function () {\n\n        let input = editor.draw.node( 'INPUT', '', { type : 'file' } );\n\n        editor.listeners.add(input, 'change', editor.transport.fileSelected);\n        editor.transport.input = input;\n\n    };\n\n    /** Clear input when files is uploaded */\n    transport.clearInput = function () {\n\n        /** Remove old input */\n        transport.input = null;\n\n        /** Prepare new one */\n        transport.prepare();\n\n    };\n\n    /**\n     * Callback for file selection\n     * @param {Event} event\n     */\n    transport.fileSelected = function () {\n\n        var input       = this,\n            i,\n            files       = input.files,\n            formData   = new FormData();\n\n        if (editor.transport.arguments.multiple === false) {\n\n            formData.append('files', files[0], files[0].name);\n\n        } else {\n\n            for ( i = 0; i < files.length; i++) {\n\n                formData.append('files[]', files[i], files[i].name);\n\n            }\n\n        }\n\n        editor.core.ajax({\n            type : 'POST',\n            data : formData,\n            url        : editor.transport.arguments.url,\n            beforeSend : editor.transport.arguments.beforeSend,\n            success    : editor.transport.arguments.success,\n            error      : editor.transport.arguments.error\n        });\n\n        /** Clear input */\n        transport.clearInput();\n\n    };\n\n    /**\n     * Use plugin callbacks\n     * @protected\n     *\n     * @param {Object} args - can have :\n     * @param {String} args.url - fetch URL\n     * @param {Function} args.beforeSend - function calls before sending ajax\n     * @param {Function} args.success - success callback\n     * @param {Function} args.error - on error handler\n     * @param {Boolean} args.multiple - allow select several files\n     * @param {String} args.accept - adds accept attribute\n     */\n    transport.selectAndUpload = function (args) {\n\n        transport.arguments = args;\n\n        if ( args.multiple === true) {\n\n            transport.input.setAttribute('multiple', 'multiple');\n\n        }\n\n        if ( args.accept ) {\n\n            transport.input.setAttribute('accept', args.accept);\n\n        }\n\n        transport.input.click();\n\n    };\n\n    return transport;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/transport.js","/**\n * Codex Editor Renderer Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (renderer) {\n\n    let editor = codex.editor;\n\n    /**\n     * Asyncronously parses input JSON to redactor blocks\n     */\n    renderer.makeBlocksFromData = function () {\n\n        /**\n         * If redactor is empty, add first paragraph to start writing\n         */\n        if (editor.core.isEmpty(editor.state.blocks) || !editor.state.blocks.items.length) {\n\n            editor.ui.addInitialBlock();\n            return;\n\n        }\n\n        Promise.resolve()\n\n        /** First, get JSON from state */\n            .then(function () {\n\n                return editor.state.blocks;\n\n            })\n\n            /** Then, start to iterate they */\n            .then(editor.renderer.appendBlocks)\n\n            /** Write log if something goes wrong */\n            .catch(function (error) {\n\n                editor.core.log('Error while parsing JSON: %o', 'error', error);\n\n            });\n\n    };\n\n    /**\n     * Parses JSON to blocks\n     * @param {object} data\n     * @return Primise -> nodeList\n     */\n    renderer.appendBlocks = function (data) {\n\n        var blocks = data.items;\n\n        /**\n         * Sequence of one-by-one blocks appending\n         * Uses to save blocks order after async-handler\n         */\n        var nodeSequence = Promise.resolve();\n\n        for (var index = 0; index < blocks.length ; index++ ) {\n\n            /** Add node to sequence at specified index */\n            editor.renderer.appendNodeAtIndex(nodeSequence, blocks, index);\n\n        }\n\n    };\n\n    /**\n     * Append node at specified index\n     */\n    renderer.appendNodeAtIndex = function (nodeSequence, blocks, index) {\n\n        /** We need to append node to sequence */\n        nodeSequence\n\n        /** first, get node async-aware */\n            .then(function () {\n\n                return editor.renderer.getNodeAsync(blocks, index);\n\n            })\n\n            /**\n             * second, compose editor-block from JSON object\n             */\n            .then(editor.renderer.createBlockFromData)\n\n            /**\n             * now insert block to redactor\n             */\n            .then(function (blockData) {\n\n                /**\n                 * blockData has 'block', 'type' and 'stretched' information\n                 */\n                editor.content.insertBlock(blockData);\n\n                /** Pass created block to next step */\n                return blockData.block;\n\n            })\n\n            /** Log if something wrong with node */\n            .catch(function (error) {\n\n                editor.core.log('Node skipped while parsing because %o', 'error', error);\n\n            });\n\n    };\n\n    /**\n     * Asynchronously returns block data from blocksList by index\n     * @return Promise to node\n     */\n    renderer.getNodeAsync = function (blocksList, index) {\n\n        return Promise.resolve().then(function () {\n\n            return {\n                tool : blocksList[index],\n                position : index\n            };\n\n        });\n\n    };\n\n    /**\n     * Creates editor block by JSON-data\n     *\n     * @uses render method of each plugin\n     *\n     * @param {Object} toolData.tool\n     *                              { header : {\n     *                                                text: '',\n     *                                                type: 'H3', ...\n     *                                            }\n     *                               }\n     * @param {Number} toolData.position - index in input-blocks array\n     * @return {Object} with type and Element\n     */\n    renderer.createBlockFromData = function ( toolData ) {\n\n        /** New parser */\n        var block,\n            tool = toolData.tool,\n            pluginName = tool.type;\n\n        /** Get first key of object that stores plugin name */\n        // for (var pluginName in blockData) break;\n\n        /** Check for plugin existance */\n        if (!editor.tools[pluginName]) {\n\n            throw Error(`Plugin «${pluginName}» not found`);\n\n        }\n\n        /** Check for plugin having render method */\n        if (typeof editor.tools[pluginName].render != 'function') {\n\n            throw Error(`Plugin «${pluginName}» must have «render» method`);\n\n        }\n\n        if ( editor.tools[pluginName].available === false ) {\n\n            block = editor.draw.unavailableBlock();\n\n            block.innerHTML = editor.tools[pluginName].loadingMessage;\n\n            /**\n            * Saver will extract data from initial block data by position in array\n            */\n            block.dataset.inputPosition = toolData.position;\n\n        } else {\n\n            /** New Parser */\n            block = editor.tools[pluginName].render(tool.data);\n\n        }\n\n        /** is first-level block stretched */\n        var stretched = editor.tools[pluginName].isStretched || false;\n\n        /** Retrun type and block */\n        return {\n            type      : pluginName,\n            block     : block,\n            stretched : stretched\n        };\n\n    };\n\n    return renderer;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/renderer.js","/**\n * Codex Editor Saver\n *\n * @author Codex Team\n * @version 1.0.2\n */\n\nmodule.exports = (function (saver) {\n\n    let editor = codex.editor;\n\n    /**\n     * Saves blocks\n     * @private\n     */\n    saver.saveBlocks = function () {\n\n        /** Save html content of redactor to memory */\n        editor.state.html = editor.nodes.redactor.innerHTML;\n\n        /** Empty jsonOutput state */\n        editor.state.jsonOutput = [];\n\n        Promise.resolve()\n\n            .then(function () {\n\n                return editor.nodes.redactor.childNodes;\n\n            })\n            /** Making a sequence from separate blocks */\n            .then(editor.saver.makeQueue)\n\n            .then(function () {\n                // editor.nodes.textarea.innerHTML = editor.state.html;\n            })\n\n            .catch( function (error) {\n\n                editor.core.log(error);\n\n            });\n\n    };\n\n    saver.makeQueue = function (blocks) {\n\n        var queue = Promise.resolve();\n\n        for(var index = 0; index < blocks.length; index++) {\n\n            /** Add node to sequence at specified index */\n            editor.saver.getBlockData(queue, blocks, index);\n\n        }\n\n    };\n\n    /** Gets every block and makes From Data */\n    saver.getBlockData = function (queue, blocks, index) {\n\n        queue.then(function () {\n\n            return editor.saver.getNodeAsync(blocks, index);\n\n        })\n\n            .then(editor.saver.makeFormDataFromBlocks);\n\n    };\n\n\n    /**\n     * Asynchronously returns block data from blocksList by index\n     * @return Promise to node\n     */\n    saver.getNodeAsync = function (blocksList, index) {\n\n        return Promise.resolve().then(function () {\n\n            return blocksList[index];\n\n        });\n\n    };\n\n    saver.makeFormDataFromBlocks = function (block) {\n\n        var pluginName = block.dataset.tool;\n\n        /** Check for plugin existance */\n        if (!editor.tools[pluginName]) {\n\n            throw Error(`Plugin «${pluginName}» not found`);\n\n        }\n\n        /** Check for plugin having render method */\n        if (typeof editor.tools[pluginName].save != 'function') {\n\n            throw Error(`Plugin «${pluginName}» must have save method`);\n\n        }\n\n        /** Result saver */\n        var blockContent   = block.childNodes[0],\n            pluginsContent = blockContent.childNodes[0],\n            savedData,\n            position,\n            output;\n\n        /** If plugin wasn't available then return data from cache */\n        if ( editor.tools[pluginName].available === false ) {\n\n            position = pluginsContent.dataset.inputPosition;\n            savedData = codex.editor.state.blocks.items[position].data;\n\n        } else {\n\n            savedData = editor.tools[pluginName].save(pluginsContent);\n\n            if (editor.tools[pluginName].validate) {\n\n                var result = editor.tools[pluginName].validate(savedData);\n\n                /**\n                 * Do not allow invalid data\n                 */\n                if (!result)\n                    return;\n\n            }\n\n        }\n\n        output = {\n            type   : pluginName,\n            data   : savedData\n        };\n\n        editor.state.jsonOutput.push(output);\n\n    };\n\n    return saver;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/saver.js","/**\n * Codex Editor Content Module\n * Works with DOM\n *\n * @module Codex Editor content module\n *\n * @author Codex Team\n * @version 1.3.13\n *\n * @description Module works with Elements that have been appended to the main DOM\n */\n\nmodule.exports = (function (content) {\n\n    let editor = codex.editor;\n\n    /**\n     * Links to current active block\n     * @type {null | Element}\n     */\n    content.currentNode = null;\n\n    /**\n     * clicked in redactor area\n     * @type {null | Boolean}\n     */\n    content.editorAreaHightlighted = null;\n\n    /**\n     * @deprecated\n     * Synchronizes redactor with original textarea\n     */\n    content.sync = function () {\n\n        editor.core.log('syncing...');\n\n        /**\n         * Save redactor content to editor.state\n         */\n        editor.state.html = editor.nodes.redactor.innerHTML;\n\n    };\n\n    /**\n     * Appends background to the block\n     *\n     * @description add CSS class to highlight visually first-level block area\n     */\n    content.markBlock = function () {\n\n        editor.content.currentNode.classList.add(editor.ui.className.BLOCK_HIGHLIGHTED);\n\n    };\n\n    /**\n     * Clear background\n     *\n     * @description clears styles that highlights block\n     */\n    content.clearMark = function () {\n\n        if (editor.content.currentNode) {\n\n            editor.content.currentNode.classList.remove(editor.ui.className.BLOCK_HIGHLIGHTED);\n\n        }\n\n    };\n\n    /**\n     * Finds first-level block\n     *\n     * @param {Element} node - selected or clicked in redactors area node\n     * @protected\n     *\n     * @description looks for first-level block.\n     * gets parent while node is not first-level\n     */\n    content.getFirstLevelBlock = function (node) {\n\n        if (!editor.core.isDomNode(node)) {\n\n            node = node.parentNode;\n\n        }\n\n        if (node === editor.nodes.redactor || node === document.body) {\n\n            return null;\n\n        } else {\n\n            while(!node.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\n                node = node.parentNode;\n\n            }\n\n            return node;\n\n        }\n\n    };\n\n    /**\n     * Trigger this event when working node changed\n     * @param {Element} targetNode - first-level of this node will be current\n     * @protected\n     *\n     * @description If targetNode is first-level then we set it as current else we look for parents to find first-level\n     */\n    content.workingNodeChanged = function (targetNode) {\n\n        /** Clear background from previous marked block before we change */\n        editor.content.clearMark();\n\n        if (!targetNode) {\n\n            return;\n\n        }\n\n        this.currentNode = this.getFirstLevelBlock(targetNode);\n\n    };\n\n    /**\n     * Replaces one redactor block with another\n     * @protected\n     * @param {Element} targetBlock - block to replace. Mostly currentNode.\n     * @param {Element} newBlock\n     * @param {string} newBlockType - type of new block; we need to store it to data-attribute\n     *\n     * [!] Function does not saves old block content.\n     *     You can get it manually and pass with newBlock.innerHTML\n     */\n    content.replaceBlock = function (targetBlock, newBlock) {\n\n        if (!targetBlock || !newBlock) {\n\n            editor.core.log('replaceBlock: missed params');\n            return;\n\n        }\n\n        /** If target-block is not a frist-level block, then we iterate parents to find it */\n        while(!targetBlock.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\n            targetBlock = targetBlock.parentNode;\n\n        }\n\n        /** Replacing */\n        editor.nodes.redactor.replaceChild(newBlock, targetBlock);\n\n        /**\n         * Set new node as current\n         */\n        editor.content.workingNodeChanged(newBlock);\n\n        /**\n         * Add block handlers\n         */\n        editor.ui.addBlockHandlers(newBlock);\n\n        /**\n         * Save changes\n         */\n        editor.ui.saveInputs();\n\n    };\n\n    /**\n     * @protected\n     *\n     * Inserts new block to redactor\n     * Wrapps block into a DIV with BLOCK_CLASSNAME class\n     *\n     * @param blockData          {object}\n     * @param blockData.block    {Element}   element with block content\n     * @param blockData.type     {string}    block plugin\n     * @param needPlaceCaret     {bool}      pass true to set caret in new block\n     *\n     */\n    content.insertBlock = function ( blockData, needPlaceCaret ) {\n\n        var workingBlock    = editor.content.currentNode,\n            newBlockContent = blockData.block,\n            blockType       = blockData.type,\n            isStretched     = blockData.stretched;\n\n        var newBlock = composeNewBlock_(newBlockContent, blockType, isStretched);\n\n        if (workingBlock) {\n\n            editor.core.insertAfter(workingBlock, newBlock);\n\n        } else {\n\n            /**\n             * If redactor is empty, append as first child\n             */\n            editor.nodes.redactor.appendChild(newBlock);\n\n        }\n\n        /**\n         * Block handler\n         */\n        editor.ui.addBlockHandlers(newBlock);\n\n        /**\n         * Set new node as current\n         */\n        editor.content.workingNodeChanged(newBlock);\n\n        /**\n         * Save changes\n         */\n        editor.ui.saveInputs();\n\n\n        if ( needPlaceCaret ) {\n\n            /**\n             * If we don't know input index then we set default value -1\n             */\n            var currentInputIndex = editor.caret.getCurrentInputIndex() || -1;\n\n\n            if (currentInputIndex == -1) {\n\n\n                var editableElement = newBlock.querySelector('[contenteditable]'),\n                    emptyText       = document.createTextNode('');\n\n                editableElement.appendChild(emptyText);\n                editor.caret.set(editableElement, 0, 0);\n\n                editor.toolbar.move();\n                editor.toolbar.showPlusButton();\n\n\n            } else {\n\n                if (currentInputIndex === editor.state.inputs.length - 1)\n                    return;\n\n                /** Timeout for browsers execution */\n                window.setTimeout(function () {\n\n                    /** Setting to the new input */\n                    editor.caret.setToNextBlock(currentInputIndex);\n                    editor.toolbar.move();\n                    editor.toolbar.open();\n\n                }, 10);\n\n            }\n\n        }\n\n        /**\n         * Block is inserted, wait for new click that defined focusing on editors area\n         * @type {boolean}\n         */\n        content.editorAreaHightlighted = false;\n\n    };\n\n    /**\n     * Replaces blocks with saving content\n     * @protected\n     * @param {Element} noteToReplace\n     * @param {Element} newNode\n     * @param {Element} blockType\n     */\n    content.switchBlock = function (blockToReplace, newBlock, tool) {\n\n        tool = tool || editor.content.currentNode.dataset.tool;\n        var newBlockComposed = composeNewBlock_(newBlock, tool);\n\n        /** Replacing */\n        editor.content.replaceBlock(blockToReplace, newBlockComposed);\n\n        /** Save new Inputs when block is changed */\n        editor.ui.saveInputs();\n\n    };\n\n    /**\n     * Iterates between child noted and looking for #text node on deepest level\n     * @protected\n     *\n     * @param {Element} block - node where find\n     * @param {int} postiton - starting postion\n     *      Example: childNodex.length to find from the end\n     *               or 0 to find from the start\n     * @return {Text} block\n     * @uses DFS\n     */\n    content.getDeepestTextNodeFromPosition = function (block, position) {\n\n        /**\n         * Clear Block from empty and useless spaces with trim.\n         * Such nodes we should remove\n         */\n        var blockChilds = block.childNodes,\n            index,\n            node,\n            text;\n\n        for(index = 0; index < blockChilds.length; index++) {\n\n            node = blockChilds[index];\n\n            if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n                text = node.textContent.trim();\n\n                /** Text is empty. We should remove this child from node before we start DFS\n                 * decrease the quantity of childs.\n                 */\n                if (text === '') {\n\n                    block.removeChild(node);\n                    position--;\n\n                }\n\n            }\n\n        }\n\n        if (block.childNodes.length === 0) {\n\n            return document.createTextNode('');\n\n        }\n\n        /** Setting default position when we deleted all empty nodes */\n        if ( position < 0 )\n            position = 1;\n\n        var lookingFromStart = false;\n\n        /** For looking from START */\n        if (position === 0) {\n\n            lookingFromStart = true;\n            position = 1;\n\n        }\n\n        while ( position ) {\n\n            /** initial verticle of node. */\n            if ( lookingFromStart ) {\n\n                block = block.childNodes[0];\n\n            } else {\n\n                block = block.childNodes[position - 1];\n\n            }\n\n            if ( block.nodeType == editor.core.nodeTypes.TAG ) {\n\n                position = block.childNodes.length;\n\n            } else if (block.nodeType == editor.core.nodeTypes.TEXT ) {\n\n                position = 0;\n\n            }\n\n        }\n\n        return block;\n\n    };\n\n    /**\n     * @private\n     * @param {Element} block - current plugins render\n     * @param {String} tool - plugins name\n     * @param {Boolean} isStretched - make stretched block or not\n     *\n     * @description adds necessary information to wrap new created block by first-level holder\n     */\n    var composeNewBlock_ = function (block, tool, isStretched) {\n\n        var newBlock     = editor.draw.node('DIV', editor.ui.className.BLOCK_CLASSNAME, {}),\n            blockContent = editor.draw.node('DIV', editor.ui.className.BLOCK_CONTENT, {});\n\n        blockContent.appendChild(block);\n        newBlock.appendChild(blockContent);\n\n        if (isStretched) {\n\n            blockContent.classList.add(editor.ui.className.BLOCK_STRETCHED);\n\n        }\n\n        newBlock.dataset.tool   = tool;\n        return newBlock;\n\n    };\n\n    /**\n     * Returns Range object of current selection\n     * @protected\n     */\n    content.getRange = function () {\n\n        var selection = window.getSelection().getRangeAt(0);\n\n        return selection;\n\n    };\n\n    /**\n     * Divides block in two blocks (after and before caret)\n     *\n     * @protected\n     * @param {int} inputIndex - target input index\n     *\n     * @description splits current input content to the separate blocks\n     * When enter is pressed among the words, that text will be splited.\n     */\n    content.splitBlock = function (inputIndex) {\n\n        var selection      = window.getSelection(),\n            anchorNode     = selection.anchorNode,\n            anchorNodeText = anchorNode.textContent,\n            caretOffset    = selection.anchorOffset,\n            textBeforeCaret,\n            textNodeBeforeCaret,\n            textAfterCaret,\n            textNodeAfterCaret;\n\n        var currentBlock = editor.content.currentNode.querySelector('[contentEditable]');\n\n\n        textBeforeCaret     = anchorNodeText.substring(0, caretOffset);\n        textAfterCaret      = anchorNodeText.substring(caretOffset);\n\n        textNodeBeforeCaret = document.createTextNode(textBeforeCaret);\n\n        if (textAfterCaret) {\n\n            textNodeAfterCaret  = document.createTextNode(textAfterCaret);\n\n        }\n\n        var previousChilds = [],\n            nextChilds     = [],\n            reachedCurrent = false;\n\n        if (textNodeAfterCaret) {\n\n            nextChilds.push(textNodeAfterCaret);\n\n        }\n\n        for ( var i = 0, child; !!(child = currentBlock.childNodes[i]); i++) {\n\n            if ( child != anchorNode ) {\n\n                if ( !reachedCurrent ) {\n\n                    previousChilds.push(child);\n\n                } else {\n\n                    nextChilds.push(child);\n\n                }\n\n            } else {\n\n                reachedCurrent = true;\n\n            }\n\n        }\n\n        /** Clear current input */\n        editor.state.inputs[inputIndex].innerHTML = '';\n\n        /**\n         * Append all childs founded before anchorNode\n         */\n        var previousChildsLength = previousChilds.length;\n\n        for(i = 0; i < previousChildsLength; i++) {\n\n            editor.state.inputs[inputIndex].appendChild(previousChilds[i]);\n\n        }\n\n        editor.state.inputs[inputIndex].appendChild(textNodeBeforeCaret);\n\n        /**\n         * Append text node which is after caret\n         */\n        var nextChildsLength = nextChilds.length,\n            newNode          = document.createElement('div');\n\n        for(i = 0; i < nextChildsLength; i++) {\n\n            newNode.appendChild(nextChilds[i]);\n\n        }\n\n        newNode = newNode.innerHTML;\n\n        /** This type of block creates when enter is pressed */\n        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n        /**\n         * Make new paragraph with text after caret\n         */\n        editor.content.insertBlock({\n            type  : NEW_BLOCK_TYPE,\n            block : editor.tools[NEW_BLOCK_TYPE].render({\n                text : newNode\n            })\n        }, true );\n\n    };\n\n    /**\n     * Merges two blocks — current and target\n     * If target index is not exist, then previous will be as target\n     *\n     * @protected\n     * @param {int} currentInputIndex\n     * @param {int} targetInputIndex\n     *\n     * @description gets two inputs indexes and merges into one\n     */\n    content.mergeBlocks = function (currentInputIndex, targetInputIndex) {\n\n        /** If current input index is zero, then prevent method execution */\n        if (currentInputIndex === 0) {\n\n            return;\n\n        }\n\n        var targetInput,\n            currentInputContent = editor.state.inputs[currentInputIndex].innerHTML;\n\n        if (!targetInputIndex) {\n\n            targetInput = editor.state.inputs[currentInputIndex - 1];\n\n        } else {\n\n            targetInput = editor.state.inputs[targetInputIndex];\n\n        }\n\n        targetInput.innerHTML += currentInputContent;\n\n    };\n\n    /**\n     * @deprecated\n     *\n     * Callback for HTML Mutations\n     * @param {Array} mutation - Mutation Record\n     */\n    content.paste = function (mutation) {\n\n        var workingNode = editor.content.currentNode,\n            tool        = workingNode.dataset.tool;\n\n        if (editor.tools[tool].allowedToPaste) {\n\n            editor.content.sanitize.call(this, mutation.target);\n\n        } else {\n\n            editor.content.pasteTextContent(mutation.addedNodes);\n\n        }\n\n    };\n\n    /**\n     * @deprecated\n     *\n     * gets only text/plain content of node\n     * @param {Element} target - HTML node\n     */\n    content.pasteTextContent = function (nodes) {\n\n        var node = nodes[0],\n            textNode;\n\n        if (!node) {\n\n            return;\n\n        }\n\n        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n            textNode = document.createTextNode(node);\n\n        } else {\n\n            textNode = document.createTextNode(node.textContent);\n\n        }\n\n        if (editor.core.isDomNode(node)) {\n\n            node.parentNode.replaceChild(textNode, node);\n\n        }\n\n    };\n\n    /**\n     * @deprecated\n     *\n     * Sanitizes HTML content\n     * @param {Element} target - inserted element\n     * @uses Sanitize library html-janitor\n     */\n    content.sanitize = function (target) {\n\n        if (!target) {\n\n            return;\n\n        }\n\n        var node = target[0];\n\n        if (!node) {\n\n            return;\n\n        }\n\n        /**\n         * Disconnect Observer\n         * hierarchy of function calls inherits context of observer\n         */\n        this.disconnect();\n\n        /**\n         * Don't sanitize text node\n         */\n        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n            return;\n\n        }\n\n        /**\n         * Clear dirty content\n         */\n        var cleaner = editor.sanitizer.init(editor.satinizer.Config.BASIC),\n            clean = cleaner.clean(target.outerHTML);\n\n        var div = editor.draw.node('DIV', [], { innerHTML: clean });\n\n        node.replaceWith(div.childNodes[0]);\n\n\n    };\n\n    /**\n     * Iterates all right siblings and parents, which has right siblings\n     * while it does not reached the first-level block\n     *\n     * @param {Element} node\n     * @return {boolean}\n     */\n    content.isLastNode = function (node) {\n\n        // console.log('погнали перебор родителей');\n\n        var allChecked = false;\n\n        while ( !allChecked ) {\n\n            // console.log('Смотрим на %o', node);\n            // console.log('Проверим, пустые ли соседи справа');\n\n            if ( !allSiblingsEmpty_(node) ) {\n\n                // console.log('Есть непустые соседи. Узел не последний. Выходим.');\n                return false;\n\n            }\n\n            node = node.parentNode;\n\n            /**\n             * Проверяем родителей до тех пор, пока не найдем блок первого уровня\n             */\n            if ( node.classList.contains(editor.ui.className.BLOCK_CONTENT) ) {\n\n                allChecked = true;\n\n            }\n\n        }\n\n        return true;\n\n    };\n\n    /**\n     * Checks if all element right siblings is empty\n     * @param node\n     */\n    var allSiblingsEmpty_ = function (node) {\n\n        /**\n         * Нужно убедиться, что после пустого соседа ничего нет\n         */\n        var sibling = node.nextSibling;\n\n        while ( sibling ) {\n\n            if (sibling.textContent.length) {\n\n                return false;\n\n            }\n\n            sibling = sibling.nextSibling;\n\n        }\n\n        return true;\n\n    };\n\n    /**\n     * @public\n     *\n     * @param [String] htmlString - html content as string\n     * @return {string} - html content as string\n     */\n    content.wrapTextWithParagraphs = function (htmlString) {\n\n        var wrapper = document.createElement('DIV'),\n            newWrapper = document.createElement('DIV'),\n            i,\n            paragraph,\n            firstLevelBlocks = ['DIV', 'P'],\n            blockTyped,\n            node;\n\n        /**\n         * Make HTML Element to Wrap Text\n         * It allows us to work with input data as HTML content\n         */\n        wrapper.innerHTML = htmlString;\n        paragraph = document.createElement('P');\n\n        for (i = 0; i < wrapper.childNodes.length; i++) {\n\n            node = wrapper.childNodes[i];\n\n            blockTyped = firstLevelBlocks.indexOf(node.tagName) != -1;\n\n            /**\n             * If node is first-levet\n             * we add this node to our new wrapper\n             */\n            if ( blockTyped ) {\n\n                /**\n                 * If we had splitted inline nodes to paragraph before\n                 */\n                if ( paragraph.childNodes.length ) {\n\n                    newWrapper.appendChild(paragraph.cloneNode(true));\n\n                    /** empty paragraph */\n                    paragraph = null;\n                    paragraph = document.createElement('P');\n\n                }\n\n                newWrapper.appendChild(node.cloneNode(true));\n\n            } else {\n\n                /** Collect all inline nodes to one as paragraph */\n                paragraph.appendChild(node.cloneNode(true));\n\n                /** if node is last we should append this node to paragraph and paragraph to new wrapper */\n                if ( i == wrapper.childNodes.length - 1 ) {\n\n                    newWrapper.appendChild(paragraph.cloneNode(true));\n\n                }\n\n            }\n\n        }\n\n        return newWrapper.innerHTML;\n\n    };\n\n    /**\n    * Finds closest Contenteditable parent from Element\n    * @param {Element} node     element looking from\n    * @return {Element} node    contenteditable\n    */\n    content.getEditableParent = function (node) {\n\n        while (node && node.contentEditable != 'true') {\n\n            node = node.parentNode;\n\n        }\n\n        return node;\n\n    };\n\n    return content;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/content.js","/**\n * Codex Editor toolbar module\n *\n * Contains:\n *  - Inline toolbox\n *  - Toolbox within plus button\n *  - Settings section\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (toolbar) {\n\n    let editor = codex.editor;\n\n    toolbar.settings = require('./settings');\n    toolbar.inline   = require('./inline');\n    toolbar.toolbox  = require('./toolbox');\n\n    /**\n     * Margin between focused node and toolbar\n     */\n    toolbar.defaultToolbarHeight = 49;\n\n    toolbar.defaultOffset = 34;\n\n    toolbar.opened = false;\n\n    toolbar.current = null;\n\n    /**\n     * @protected\n     */\n    toolbar.open = function () {\n\n        if (editor.hideToolbar) {\n\n            return;\n\n        }\n\n        editor.nodes.toolbar.classList.add('opened');\n        this.opened = true;\n\n    };\n\n    /**\n     * @protected\n     */\n    toolbar.close = function () {\n\n        editor.nodes.toolbar.classList.remove('opened');\n\n        toolbar.opened  = false;\n        toolbar.current = null;\n\n        for (var button in editor.nodes.toolbarButtons) {\n\n            editor.nodes.toolbarButtons[button].classList.remove('selected');\n\n        }\n\n        /** Close toolbox when toolbar is not displayed */\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.close();\n\n    };\n\n    toolbar.toggle = function () {\n\n        if ( !this.opened ) {\n\n            this.open();\n\n        } else {\n\n            this.close();\n\n        }\n\n    };\n\n    toolbar.hidePlusButton = function () {\n\n        editor.nodes.plusButton.classList.add('hide');\n\n    };\n\n    toolbar.showPlusButton = function () {\n\n        editor.nodes.plusButton.classList.remove('hide');\n\n    };\n\n    /**\n     * Moving toolbar to the specified node\n     */\n    toolbar.move = function () {\n\n        /** Close Toolbox when we move toolbar */\n        editor.toolbar.toolbox.close();\n\n        if (!editor.content.currentNode) {\n\n            return;\n\n        }\n\n        var newYCoordinate = editor.content.currentNode.offsetTop - (editor.toolbar.defaultToolbarHeight / 2) + editor.toolbar.defaultOffset;\n\n        editor.nodes.toolbar.style.transform = `translate3D(0, ${Math.floor(newYCoordinate)}px, 0)`;\n\n        /** Close trash actions */\n        editor.toolbar.settings.hideRemoveActions();\n\n    };\n\n    return toolbar;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/toolbar.js","/**\n * Toolbar settings\n *\n * @version 1.0.4\n */\n\nmodule.exports = (function (settings) {\n\n    let editor = codex.editor;\n\n    settings.opened = false;\n\n    settings.setting = null;\n    settings.actions = null;\n\n    /**\n     * Append and open settings\n     */\n    settings.open = function (toolType) {\n\n        /**\n         * Append settings content\n         * It's stored in tool.settings\n         */\n        if (!editor.tools[toolType] || !editor.tools[toolType].makeSettings ) {\n\n            editor.core.log(`Plugin «${toolType}» has no settings`, 'warn');\n            editor.nodes.pluginSettings.innerHTML = `Плагин «${toolType}» не имеет настроек`;\n\n        } else {\n\n            /**\n             * Draw settings block\n             */\n            var settingsBlock = editor.tools[toolType].makeSettings();\n\n            editor.nodes.pluginSettings.appendChild(settingsBlock);\n\n        }\n\n        /** Open settings block */\n        editor.nodes.blockSettings.classList.add('opened');\n        this.opened = true;\n\n    };\n\n    /**\n     * Close and clear settings\n     */\n    settings.close = function () {\n\n        editor.nodes.blockSettings.classList.remove('opened');\n        editor.nodes.pluginSettings.innerHTML = '';\n\n        this.opened = false;\n\n    };\n\n    /**\n     * @param {string} toolType - plugin type\n     */\n    settings.toggle = function ( toolType ) {\n\n        if ( !this.opened ) {\n\n            this.open(toolType);\n\n        } else {\n\n            this.close();\n\n        }\n\n    };\n\n    /**\n     * Here we will draw buttons and add listeners to components\n     */\n    settings.makeRemoveBlockButton = function () {\n\n        var removeBlockWrapper  = editor.draw.node('SPAN', 'ce-toolbar__remove-btn', {}),\n            settingButton = editor.draw.node('SPAN', 'ce-toolbar__remove-setting', { innerHTML : '<i class=\"ce-icon-trash\"></i>' }),\n            actionWrapper = editor.draw.node('DIV', 'ce-toolbar__remove-confirmation', {}),\n            confirmAction = editor.draw.node('DIV', 'ce-toolbar__remove-confirm', { textContent : 'Удалить блок' }),\n            cancelAction  = editor.draw.node('DIV', 'ce-toolbar__remove-cancel', { textContent : 'Отмена' });\n\n        editor.listeners.add(settingButton, 'click', editor.toolbar.settings.removeButtonClicked, false);\n\n        editor.listeners.add(confirmAction, 'click', editor.toolbar.settings.confirmRemovingRequest, false);\n\n        editor.listeners.add(cancelAction, 'click', editor.toolbar.settings.cancelRemovingRequest, false);\n\n        actionWrapper.appendChild(confirmAction);\n        actionWrapper.appendChild(cancelAction);\n\n        removeBlockWrapper.appendChild(settingButton);\n        removeBlockWrapper.appendChild(actionWrapper);\n\n        /** Save setting */\n        editor.toolbar.settings.setting = settingButton;\n        editor.toolbar.settings.actions = actionWrapper;\n\n        return removeBlockWrapper;\n\n    };\n\n    settings.removeButtonClicked = function () {\n\n        var action = editor.toolbar.settings.actions;\n\n        if (action.classList.contains('opened')) {\n\n            editor.toolbar.settings.hideRemoveActions();\n\n        } else {\n\n            editor.toolbar.settings.showRemoveActions();\n\n        }\n\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.close();\n\n    };\n\n    settings.cancelRemovingRequest = function () {\n\n        editor.toolbar.settings.actions.classList.remove('opened');\n\n    };\n\n    settings.confirmRemovingRequest = function () {\n\n        var currentBlock = editor.content.currentNode,\n            firstLevelBlocksCount;\n\n        currentBlock.remove();\n\n        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\n        /**\n         * If all blocks are removed\n         */\n        if (firstLevelBlocksCount === 0) {\n\n            /** update currentNode variable */\n            editor.content.currentNode = null;\n\n            /** Inserting new empty initial block */\n            editor.ui.addInitialBlock();\n\n        }\n\n        editor.ui.saveInputs();\n\n        editor.toolbar.close();\n\n    };\n\n    settings.showRemoveActions = function () {\n\n        editor.toolbar.settings.actions.classList.add('opened');\n\n    };\n\n    settings.hideRemoveActions = function () {\n\n        editor.toolbar.settings.actions.classList.remove('opened');\n\n    };\n\n    return settings;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/settings.js","/**\n * Inline toolbar\n *\n * Contains from tools:\n * Bold, Italic, Underline and Anchor\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (inline) {\n\n    let editor = codex.editor;\n\n    inline.buttonsOpened = null;\n    inline.actionsOpened = null;\n    inline.wrappersOffset = null;\n\n    /**\n     * saving selection that need for execCommand for styling\n     *\n     */\n    inline.storedSelection = null;\n\n    /**\n     * @protected\n     *\n     * Open inline toobar\n     */\n    inline.show = function () {\n\n        var currentNode = editor.content.currentNode,\n            tool = currentNode.dataset.tool,\n            plugin;\n\n        /**\n         * tool allowed to open inline toolbar\n         */\n        plugin = editor.tools[tool];\n\n        if (!plugin.showInlineToolbar)\n            return;\n\n        var selectedText = inline.getSelectionText(),\n            toolbar      = editor.nodes.inlineToolbar.wrapper;\n\n        if (selectedText.length > 0) {\n\n            /** Move toolbar and open */\n            editor.toolbar.inline.move();\n\n            /** Open inline toolbar */\n            toolbar.classList.add('opened');\n\n            /** show buttons of inline toolbar */\n            editor.toolbar.inline.showButtons();\n\n        }\n\n    };\n\n    /**\n     * @protected\n     *\n     * Closes inline toolbar\n     */\n    inline.close = function () {\n\n        var toolbar = editor.nodes.inlineToolbar.wrapper;\n\n        toolbar.classList.remove('opened');\n\n    };\n\n    /**\n     * @private\n     *\n     * Moving toolbar\n     */\n    inline.move = function () {\n\n        if (!this.wrappersOffset) {\n\n            this.wrappersOffset = this.getWrappersOffset();\n\n        }\n\n        var coords          = this.getSelectionCoords(),\n            defaultOffset   = 0,\n            toolbar         = editor.nodes.inlineToolbar.wrapper,\n            newCoordinateX,\n            newCoordinateY;\n\n        if (toolbar.offsetHeight === 0) {\n\n            defaultOffset = 40;\n\n        }\n\n        newCoordinateX = coords.x - this.wrappersOffset.left;\n        newCoordinateY = coords.y + window.scrollY - this.wrappersOffset.top - defaultOffset - toolbar.offsetHeight;\n\n        toolbar.style.transform = `translate3D(${Math.floor(newCoordinateX)}px, ${Math.floor(newCoordinateY)}px, 0)`;\n\n        /** Close everything */\n        editor.toolbar.inline.closeButtons();\n        editor.toolbar.inline.closeAction();\n\n    };\n\n    /**\n     * @private\n     *\n     * Tool Clicked\n     */\n\n    inline.toolClicked = function (event, type) {\n\n        /**\n         * For simple tools we use default browser function\n         * For more complicated tools, we should write our own behavior\n         */\n        switch (type) {\n            case 'createLink' : editor.toolbar.inline.createLinkAction(event, type); break;\n            default           : editor.toolbar.inline.defaultToolAction(type); break;\n        }\n\n        /**\n         * highlight buttons\n         * after making some action\n         */\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\n    };\n\n    /**\n     * @private\n     *\n     * Saving wrappers offset in DOM\n     */\n    inline.getWrappersOffset = function () {\n\n        var wrapper = editor.nodes.wrapper,\n            offset  = this.getOffset(wrapper);\n\n        this.wrappersOffset = offset;\n        return offset;\n\n    };\n\n    /**\n     * @private\n     *\n     * Calculates offset of DOM element\n     *\n     * @param el\n     * @returns {{top: number, left: number}}\n     */\n    inline.getOffset = function ( el ) {\n\n        var _x = 0;\n        var _y = 0;\n\n        while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {\n\n            _x += (el.offsetLeft + el.clientLeft);\n            _y += (el.offsetTop + el.clientTop);\n            el = el.offsetParent;\n\n        }\n        return { top: _y, left: _x };\n\n    };\n\n    /**\n     * @private\n     *\n     * Calculates position of selected text\n     * @returns {{x: number, y: number}}\n     */\n    inline.getSelectionCoords = function () {\n\n        var sel = document.selection, range;\n        var x = 0, y = 0;\n\n        if (sel) {\n\n            if (sel.type != 'Control') {\n\n                range = sel.createRange();\n                range.collapse(true);\n                x = range.boundingLeft;\n                y = range.boundingTop;\n\n            }\n\n        } else if (window.getSelection) {\n\n            sel = window.getSelection();\n\n            if (sel.rangeCount) {\n\n                range = sel.getRangeAt(0).cloneRange();\n                if (range.getClientRects) {\n\n                    range.collapse(true);\n                    var rect = range.getClientRects()[0];\n\n                    if (!rect) {\n\n                        return;\n\n                    }\n\n                    x = rect.left;\n                    y = rect.top;\n\n                }\n\n            }\n\n        }\n        return { x: x, y: y };\n\n    };\n\n    /**\n     * @private\n     *\n     * Returns selected text as String\n     * @returns {string}\n     */\n    inline.getSelectionText = function () {\n\n        var selectedText = '';\n\n        // all modern browsers and IE9+\n        if (window.getSelection) {\n\n            selectedText = window.getSelection().toString();\n\n        }\n\n        return selectedText;\n\n    };\n\n    /** Opens buttons block */\n    inline.showButtons = function () {\n\n        var buttons = editor.nodes.inlineToolbar.buttons;\n\n        buttons.classList.add('opened');\n\n        editor.toolbar.inline.buttonsOpened = true;\n\n        /** highlight buttons */\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\n    };\n\n    /** Makes buttons disappear */\n    inline.closeButtons = function () {\n\n        var buttons = editor.nodes.inlineToolbar.buttons;\n\n        buttons.classList.remove('opened');\n\n        editor.toolbar.inline.buttonsOpened = false;\n\n    };\n\n    /** Open buttons defined action if exist */\n    inline.showActions = function () {\n\n        var action = editor.nodes.inlineToolbar.actions;\n\n        action.classList.add('opened');\n\n        editor.toolbar.inline.actionsOpened = true;\n\n    };\n\n    /** Close actions block */\n    inline.closeAction = function () {\n\n        var action = editor.nodes.inlineToolbar.actions;\n\n        action.innerHTML = '';\n        action.classList.remove('opened');\n        editor.toolbar.inline.actionsOpened = false;\n\n    };\n\n\n    /**\n    * Callback for keydowns in inline toolbar \"Insert link...\" input\n    */\n    let inlineToolbarAnchorInputKeydown_ = function (event) {\n\n        if (event.keyCode != editor.core.keys.ENTER) {\n\n            return;\n\n        }\n\n        let editable        = editor.content.currentNode,\n            storedSelection = editor.toolbar.inline.storedSelection;\n\n        editor.toolbar.inline.restoreSelection(editable, storedSelection);\n        editor.toolbar.inline.setAnchor(this.value);\n\n        /**\n         * Preventing events that will be able to happen\n         */\n        event.preventDefault();\n        event.stopImmediatePropagation();\n\n        editor.toolbar.inline.clearRange();\n\n    };\n\n    /** Action for link creation or for setting anchor */\n    inline.createLinkAction = function (event) {\n\n        var isActive = this.isLinkActive();\n\n        var editable        = editor.content.currentNode,\n            storedSelection = editor.toolbar.inline.saveSelection(editable);\n\n        /** Save globally selection */\n        editor.toolbar.inline.storedSelection = storedSelection;\n\n        if (isActive) {\n\n\n            /**\n             * Changing stored selection. if we want to remove anchor from word\n             * we should remove anchor from whole word, not only selected part.\n             * The solution is than we get the length of current link\n             * Change start position to - end of selection minus length of anchor\n             */\n            editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\n            editor.toolbar.inline.defaultToolAction('unlink');\n\n        } else {\n\n            /** Create input and close buttons */\n            var action = editor.draw.inputForLink();\n\n            editor.nodes.inlineToolbar.actions.appendChild(action);\n\n            editor.toolbar.inline.closeButtons();\n            editor.toolbar.inline.showActions();\n\n            /**\n             * focus to input\n             * Solution: https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/focus\n             * Prevents event after showing input and when we need to focus an input which is in unexisted form\n             */\n            action.focus();\n            event.preventDefault();\n\n            /** Callback to link action */\n            editor.listeners.add(action, 'keydown', inlineToolbarAnchorInputKeydown_, false);\n\n        }\n\n    };\n\n    inline.isLinkActive = function () {\n\n        var isActive = false;\n\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(function (tool) {\n\n            var dataType = tool.dataset.type;\n\n            if (dataType == 'link' && tool.classList.contains('hightlighted')) {\n\n                isActive = true;\n\n            }\n\n        });\n\n        return isActive;\n\n    };\n\n    /** default action behavior of tool */\n    inline.defaultToolAction = function (type) {\n\n        document.execCommand(type, false, null);\n\n    };\n\n    /**\n     * @private\n     *\n     * Sets URL\n     *\n     * @param {String} url - URL\n     */\n    inline.setAnchor = function (url) {\n\n        document.execCommand('createLink', false, url);\n\n        /** Close after URL inserting */\n        editor.toolbar.inline.closeAction();\n\n    };\n\n    /**\n     * @private\n     *\n     * Saves selection\n     */\n    inline.saveSelection = function (containerEl) {\n\n        var range = window.getSelection().getRangeAt(0),\n            preSelectionRange = range.cloneRange(),\n            start;\n\n        preSelectionRange.selectNodeContents(containerEl);\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n\n        start = preSelectionRange.toString().length;\n\n        return {\n            start: start,\n            end: start + range.toString().length\n        };\n\n    };\n\n    /**\n     * @private\n     *\n     * Sets to previous selection (Range)\n     *\n     * @param {Element} containerEl - editable element where we restore range\n     * @param {Object} savedSel - range basic information to restore\n     */\n    inline.restoreSelection = function (containerEl, savedSel) {\n\n        var range     = document.createRange(),\n            charIndex = 0;\n\n        range.setStart(containerEl, 0);\n        range.collapse(true);\n\n        var nodeStack = [ containerEl ],\n            node,\n            foundStart = false,\n            stop = false,\n            nextCharIndex;\n\n        while (!stop && (node = nodeStack.pop())) {\n\n            if (node.nodeType == 3) {\n\n                nextCharIndex = charIndex + node.length;\n\n                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\n\n                    range.setStart(node, savedSel.start - charIndex);\n                    foundStart = true;\n\n                }\n                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\n\n                    range.setEnd(node, savedSel.end - charIndex);\n                    stop = true;\n\n                }\n                charIndex = nextCharIndex;\n\n            } else {\n\n                var i = node.childNodes.length;\n\n                while (i--) {\n\n                    nodeStack.push(node.childNodes[i]);\n\n                }\n\n            }\n\n        }\n\n        var sel = window.getSelection();\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n    };\n\n    /**\n     * @private\n     *\n     * Removes all ranges from window selection\n     */\n    inline.clearRange = function () {\n\n        var selection = window.getSelection();\n\n        selection.removeAllRanges();\n\n    };\n\n    /**\n     * @private\n     *\n     * sets or removes hightlight\n     */\n    inline.hightlight = function (tool) {\n\n        var dataType = tool.dataset.type;\n\n        if (document.queryCommandState(dataType)) {\n\n            editor.toolbar.inline.setButtonHighlighted(tool);\n\n        } else {\n\n            editor.toolbar.inline.removeButtonsHighLight(tool);\n\n        }\n\n        /**\n         *\n         * hightlight for anchors\n         */\n        var selection = window.getSelection(),\n            tag = selection.anchorNode.parentNode;\n\n        if (tag.tagName == 'A' && dataType == 'link') {\n\n            editor.toolbar.inline.setButtonHighlighted(tool);\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Mark button if text is already executed\n     */\n    inline.setButtonHighlighted = function (button) {\n\n        button.classList.add('hightlighted');\n\n        /** At link tool we also change icon */\n        if (button.dataset.type == 'link') {\n\n            var icon = button.childNodes[0];\n\n            icon.classList.remove('ce-icon-link');\n            icon.classList.add('ce-icon-unlink');\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Removes hightlight\n     */\n    inline.removeButtonsHighLight = function (button) {\n\n        button.classList.remove('hightlighted');\n\n        /** At link tool we also change icon */\n        if (button.dataset.type == 'link') {\n\n            var icon = button.childNodes[0];\n\n            icon.classList.remove('ce-icon-unlink');\n            icon.classList.add('ce-icon-link');\n\n        }\n\n    };\n\n\n    return inline;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/inline.js","/**\n * Codex Editor toolbox\n *\n * All tools be able to appended here\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (toolbox) {\n\n    let editor = codex.editor;\n\n    toolbox.opened = false;\n\n    /** Shows toolbox */\n    toolbox.open = function () {\n\n        /** Close setting if toolbox is opened */\n        if (editor.toolbar.settings.opened) {\n\n            editor.toolbar.settings.close();\n\n        }\n\n        /** display toolbox */\n        editor.nodes.toolbox.classList.add('opened');\n\n        /** Animate plus button */\n        editor.nodes.plusButton.classList.add('clicked');\n\n        /** toolbox state */\n        editor.toolbar.toolbox.opened = true;\n\n    };\n\n    /** Closes toolbox */\n    toolbox.close = function () {\n\n        /** Makes toolbox disapear */\n        editor.nodes.toolbox.classList.remove('opened');\n\n        /** Rotate plus button */\n        editor.nodes.plusButton.classList.remove('clicked');\n\n        /** toolbox state */\n        editor.toolbar.toolbox.opened = false;\n\n        editor.toolbar.current = null;\n\n    };\n\n    toolbox.leaf = function () {\n\n        let currentTool = editor.toolbar.current,\n            tools       = Object.keys(editor.tools),\n            barButtons  = editor.nodes.toolbarButtons,\n            nextToolIndex = 0,\n            toolToSelect,\n            visibleTool,\n            tool;\n\n        if ( !currentTool ) {\n\n            /** Get first tool from object*/\n            for(tool in editor.tools) {\n\n                if (editor.tools[tool].displayInToolbox) {\n\n                    break;\n\n                }\n\n                nextToolIndex ++;\n\n            }\n\n        } else {\n\n            nextToolIndex = (tools.indexOf(currentTool) + 1) % tools.length;\n            visibleTool = tools[nextToolIndex];\n\n            while (!editor.tools[visibleTool].displayInToolbox) {\n\n                nextToolIndex = (nextToolIndex + 1) % tools.length;\n                visibleTool = tools[nextToolIndex];\n\n            }\n\n        }\n\n        toolToSelect = tools[nextToolIndex];\n\n        for ( var button in barButtons ) {\n\n            barButtons[button].classList.remove('selected');\n\n        }\n\n        barButtons[toolToSelect].classList.add('selected');\n        editor.toolbar.current = toolToSelect;\n\n    };\n\n    /**\n     * Transforming selected node type into selected toolbar element type\n     * @param {event} event\n     */\n    toolbox.toolClicked = function (event) {\n\n        /**\n         * UNREPLACEBLE_TOOLS this types of tools are forbidden to replace even they are empty\n         */\n        var UNREPLACEBLE_TOOLS = ['image', 'link', 'list', 'instagram', 'twitter', 'embed'],\n            tool               = editor.tools[editor.toolbar.current],\n            workingNode        = editor.content.currentNode,\n            currentInputIndex  = editor.caret.inputIndex,\n            newBlockContent,\n            appendCallback,\n            blockData;\n\n        /** Make block from plugin */\n        newBlockContent = tool.render();\n\n        /** information about block */\n        blockData = {\n            block     : newBlockContent,\n            type      : tool.type,\n            stretched : false\n        };\n\n        if (\n            workingNode &&\n            UNREPLACEBLE_TOOLS.indexOf(workingNode.dataset.tool) === -1 &&\n            workingNode.textContent.trim() === ''\n        ) {\n\n            /** Replace current block */\n            editor.content.switchBlock(workingNode, newBlockContent, tool.type);\n\n        } else {\n\n            /** Insert new Block from plugin */\n            editor.content.insertBlock(blockData);\n\n            /** increase input index */\n            currentInputIndex++;\n\n        }\n\n        /** Fire tool append callback  */\n        appendCallback = tool.appendCallback;\n\n        if (appendCallback && typeof appendCallback == 'function') {\n\n            appendCallback.call(event);\n\n        }\n\n        window.setTimeout(function () {\n\n            /** Set caret to current block */\n            editor.caret.setToBlock(currentInputIndex);\n\n        }, 10);\n\n\n        /**\n         * Changing current Node\n         */\n        editor.content.workingNodeChanged();\n\n        /**\n         * Move toolbar when node is changed\n         */\n        editor.toolbar.move();\n\n    };\n\n    return toolbox;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/toolbox.js","/**\n * @module Codex Editor Callbacks module\n * @description Module works with editor added Elements\n *\n * @author Codex Team\n * @version 1.3.12\n */\n\nmodule.exports = (function (callbacks) {\n\n    let editor = codex.editor;\n\n    /**\n     * used by UI module\n     * @description Routes all keydowns on document\n     * @param {Object} event\n     */\n    callbacks.globalKeydown = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.ENTER : enterKeyPressed_(event);     break;\n        }\n\n    };\n\n    /**\n     * used by UI module\n     * @description Routes all keydowns on redactors area\n     * @param {Object} event\n     */\n    callbacks.redactorKeyDown = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.TAB   : tabKeyPressedOnRedactorsZone_(event);                     break;\n            case editor.core.keys.ENTER : enterKeyPressedOnRedactorsZone_(event);                   break;\n            case editor.core.keys.ESC   : escapeKeyPressedOnRedactorsZone_(event);                  break;\n            default                     : defaultKeyPressedOnRedactorsZone_(event);                 break;\n        }\n\n    };\n\n    /**\n     * used by UI module\n     * @description Routes all keyup events\n     * @param {Object} event\n     */\n    callbacks.globalKeyup = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.UP    :\n            case editor.core.keys.LEFT  :\n            case editor.core.keys.RIGHT :\n            case editor.core.keys.DOWN  : arrowKeyPressed_(event); break;\n        }\n\n    };\n\n    /**\n     * @param {Object} event\n     * @private\n     *\n     * Handles behaviour when tab pressed\n     * @description if Content is empty show toolbox (if it is closed) or leaf tools\n     * uses Toolbars toolbox module to handle the situation\n     */\n    var tabKeyPressedOnRedactorsZone_ = function (event) {\n\n        /**\n         * Wait for solution. Would like to know the behaviour\n         * @todo Add spaces\n         */\n        event.preventDefault();\n\n        var nativeInputs = editor.content.currentNode.querySelectorAll('textarea, input'),\n            nativeInputsAreEmpty   = true,\n            textContentIsEmpty = !editor.content.currentNode.textContent.trim();\n\n        Array.prototype.map.call(nativeInputs, function (input) {\n\n            if (input.type == 'textarea' || input.type == 'text') {\n\n                nativeInputsAreEmpty = nativeInputsAreEmpty && !input.value.trim();\n\n            }\n\n        });\n\n        var blockIsEmpty = textContentIsEmpty && nativeInputsAreEmpty;\n\n        if (!blockIsEmpty) {\n\n            return;\n\n        }\n\n        if ( !editor.toolbar.opened  ) {\n\n            editor.toolbar.open();\n\n        }\n\n        if (editor.toolbar.opened && !editor.toolbar.toolbox.opened) {\n\n            editor.toolbar.toolbox.open();\n\n        } else {\n\n            editor.toolbar.toolbox.leaf();\n\n        }\n\n    };\n\n    /**\n     * Handles global EnterKey Press\n     * @see enterPressedOnBlock_\n     * @param {Object} event\n     */\n    var enterKeyPressed_ = function () {\n\n        if (editor.content.editorAreaHightlighted) {\n\n            /**\n             * it means that we lose input index, saved index before is not correct\n             * therefore we need to set caret when we insert new block\n             */\n            editor.caret.inputIndex = -1;\n\n            enterPressedOnBlock_();\n\n        }\n\n    };\n\n    /**\n     * Callback for enter key pressing in first-level block area\n     *\n     * @param {Event} event\n     * @private\n     *\n     * @description Inserts new block with initial type from settings\n     */\n    var enterPressedOnBlock_ = function () {\n\n        var NEW_BLOCK_TYPE  = editor.settings.initialBlockPlugin;\n\n        editor.content.insertBlock({\n            type  : NEW_BLOCK_TYPE,\n            block : editor.tools[NEW_BLOCK_TYPE].render()\n        }, true );\n\n        editor.toolbar.move();\n        editor.toolbar.open();\n\n    };\n\n\n    /**\n     * ENTER key handler\n     *\n     * @param {Object} event\n     * @private\n     *\n     * @description Makes new block with initial type from settings\n     */\n    var enterKeyPressedOnRedactorsZone_ = function (event) {\n\n        if (event.target.contentEditable == 'true') {\n\n            /** Update input index */\n            editor.caret.saveCurrentInputIndex();\n\n        }\n\n        var currentInputIndex       = editor.caret.getCurrentInputIndex() || 0,\n            workingNode             = editor.content.currentNode,\n            tool                    = workingNode.dataset.tool,\n            isEnterPressedOnToolbar = editor.toolbar.opened &&\n                                        editor.toolbar.current &&\n                                        event.target == editor.state.inputs[currentInputIndex];\n\n        /** The list of tools which needs the default browser behaviour */\n        var enableLineBreaks = editor.tools[tool].enableLineBreaks;\n\n        /** This type of block creates when enter is pressed */\n        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n        /**\n         * When toolbar is opened, select tool instead of making new paragraph\n         */\n        if ( isEnterPressedOnToolbar ) {\n\n            event.preventDefault();\n\n            editor.toolbar.toolbox.toolClicked(event);\n\n            editor.toolbar.close();\n\n            /**\n             * Stop other listeners callback executions\n             */\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n\n            return;\n\n        }\n\n        /**\n         * Allow paragraph lineBreaks with shift enter\n         * Or if shiftkey pressed and enter and enabledLineBreaks, the let new block creation\n         */\n        if ( event.shiftKey || enableLineBreaks ) {\n\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n            return;\n\n        }\n\n        var currentSelection = window.getSelection(),\n            currentSelectedNode = currentSelection.anchorNode,\n            caretAtTheEndOfText = editor.caret.position.atTheEnd(),\n            isTextNodeHasParentBetweenContenteditable = false;\n\n        /**\n         * Allow making new <p> in same block by SHIFT+ENTER and forbids to prevent default browser behaviour\n         */\n        if ( event.shiftKey && !enableLineBreaks ) {\n\n            editor.callback.enterPressedOnBlock(editor.content.currentBlock, event);\n            event.preventDefault();\n            return;\n\n        }\n\n        /**\n         * Workaround situation when caret at the Text node that has some wrapper Elements\n         * Split block cant handle this.\n         * We need to save default behavior\n         */\n        isTextNodeHasParentBetweenContenteditable = currentSelectedNode && currentSelectedNode.parentNode.contentEditable != 'true';\n\n        /**\n         * Split blocks when input has several nodes and caret placed in textNode\n         */\n        if (\n            currentSelectedNode.nodeType == editor.core.nodeTypes.TEXT &&\n            !isTextNodeHasParentBetweenContenteditable &&\n            !caretAtTheEndOfText\n        ) {\n\n            event.preventDefault();\n\n            editor.core.log('Splitting Text node...');\n\n            editor.content.splitBlock(currentInputIndex);\n\n            /** Show plus button when next input after split is empty*/\n            if (!editor.state.inputs[currentInputIndex + 1].textContent.trim()) {\n\n                editor.toolbar.showPlusButton();\n\n            }\n\n        } else {\n\n            var islastNode = editor.content.isLastNode(currentSelectedNode);\n\n            if ( islastNode && caretAtTheEndOfText ) {\n\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n\n                editor.core.log('ENTER clicked in last textNode. Create new BLOCK');\n\n                editor.content.insertBlock({\n                    type: NEW_BLOCK_TYPE,\n                    block: editor.tools[NEW_BLOCK_TYPE].render()\n                }, true);\n\n                editor.toolbar.move();\n                editor.toolbar.open();\n\n                /** Show plus button with empty block */\n                editor.toolbar.showPlusButton();\n\n            }\n\n        }\n\n        /** get all inputs after new appending block */\n        editor.ui.saveInputs();\n\n    };\n\n    /**\n     * Escape behaviour\n     * @param event\n     * @private\n     *\n     * @description Closes toolbox and toolbar. Prevents default behaviour\n     */\n    var escapeKeyPressedOnRedactorsZone_ = function (event) {\n\n        /** Close all toolbar */\n        editor.toolbar.close();\n\n        /** Close toolbox */\n        editor.toolbar.toolbox.close();\n\n        event.preventDefault();\n\n    };\n\n    /**\n     * @param {Event} event\n     * @private\n     *\n     * closes and moves toolbar\n     */\n    var arrowKeyPressed_ = function (event) {\n\n        editor.content.workingNodeChanged();\n\n        /* Closing toolbar */\n        editor.toolbar.close();\n        editor.toolbar.move();\n\n    };\n\n    /**\n     * @private\n     * @param {Event} event\n     *\n     * @description Closes all opened bars from toolbar.\n     * If block is mark, clears highlightning\n     */\n    var defaultKeyPressedOnRedactorsZone_ = function () {\n\n        editor.toolbar.close();\n\n        if (!editor.toolbar.inline.actionsOpened) {\n\n            editor.toolbar.inline.close();\n            editor.content.clearMark();\n\n        }\n\n    };\n\n    /**\n     * Handler when clicked on redactors area\n     *\n     * @protected\n     * @param event\n     *\n     * @description Detects clicked area. If it is first-level block area, marks as detected and\n     * on next enter press will be inserted new block\n     * Otherwise, save carets position (input index) and put caret to the editable zone.\n     *\n     * @see detectWhenClickedOnFirstLevelBlockArea_\n     *\n     */\n    callbacks.redactorClicked = function (event) {\n\n        detectWhenClickedOnFirstLevelBlockArea_();\n\n        editor.content.workingNodeChanged(event.target);\n        editor.ui.saveInputs();\n\n        var selectedText = editor.toolbar.inline.getSelectionText(),\n            firstLevelBlock;\n\n        /** If selection range took off, then we hide inline toolbar */\n        if (selectedText.length === 0) {\n\n            editor.toolbar.inline.close();\n\n        }\n\n        /** Update current input index in memory when caret focused into existed input */\n        if (event.target.contentEditable == 'true') {\n\n            editor.caret.saveCurrentInputIndex();\n\n        }\n\n        if (editor.content.currentNode === null) {\n\n            /**\n             * If inputs in redactor does not exits, then we put input index 0 not -1\n             */\n            var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n\n            /** If we have any inputs */\n            if (editor.state.inputs.length) {\n\n                /** getting firstlevel parent of input */\n                firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n\n            }\n\n            /** If input is empty, then we set caret to the last input */\n            if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n\n                editor.caret.setToBlock(indexOfLastInput);\n\n            } else {\n\n                /** Create new input when caret clicked in redactors area */\n                var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n                editor.content.insertBlock({\n                    type  : NEW_BLOCK_TYPE,\n                    block : editor.tools[NEW_BLOCK_TYPE].render()\n                });\n\n                /** If there is no inputs except inserted */\n                if (editor.state.inputs.length === 1) {\n\n                    editor.caret.setToBlock(indexOfLastInput);\n\n                } else {\n\n                    /** Set caret to this appended input */\n                    editor.caret.setToNextBlock(indexOfLastInput);\n\n                }\n\n            }\n\n        } else {\n\n            /** Close all panels */\n            editor.toolbar.settings.close();\n            editor.toolbar.toolbox.close();\n\n        }\n\n        /**\n         * Move toolbar and open\n         */\n        editor.toolbar.move();\n        editor.toolbar.open();\n\n        var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n            currentNodeType = editor.content.currentNode.dataset.tool,\n            isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n\n\n        /** Hide plus buttons */\n        editor.toolbar.hidePlusButton();\n\n        if (!inputIsEmpty) {\n\n            /** Mark current block */\n            editor.content.markBlock();\n\n        }\n\n        if ( isInitialType && inputIsEmpty ) {\n\n            /** Show plus button */\n            editor.toolbar.showPlusButton();\n\n        }\n\n\n    };\n\n    /**\n     * This method allows to define, is caret in contenteditable element or not.\n     *\n     * @private\n     *\n     * @description Otherwise, if we get TEXT node from range container, that will means we have input index.\n     * In this case we use default browsers behaviour (if plugin allows that) or overwritten action.\n     * Therefore, to be sure that we've clicked first-level block area, we should have currentNode, which always\n     * specifies to the first-level block. Other cases we just ignore.\n     */\n    var detectWhenClickedOnFirstLevelBlockArea_ = function () {\n\n        var selection  = window.getSelection(),\n            anchorNode = selection.anchorNode,\n            flag = false;\n\n        if (selection.rangeCount === 0) {\n\n            editor.content.editorAreaHightlighted = true;\n\n        } else {\n\n            if (!editor.core.isDomNode(anchorNode)) {\n\n                anchorNode = anchorNode.parentNode;\n\n            }\n\n            /** Already founded, without loop */\n            if (anchorNode.contentEditable == 'true') {\n\n                flag = true;\n\n            }\n\n            while (anchorNode.contentEditable != 'true') {\n\n                anchorNode = anchorNode.parentNode;\n\n                if (anchorNode.contentEditable == 'true') {\n\n                    flag = true;\n\n                }\n\n                if (anchorNode == document.body) {\n\n                    break;\n\n                }\n\n            }\n\n            /** If editable element founded, flag is \"TRUE\", Therefore we return \"FALSE\" */\n            editor.content.editorAreaHightlighted = !flag;\n\n        }\n\n    };\n\n    /**\n     * Toolbar button click handler\n     *\n     * @param {Object} event - cursor to the button\n     * @protected\n     *\n     * @description gets current tool and calls render method\n     */\n    callbacks.toolbarButtonClicked = function (event) {\n\n        var button = this;\n\n        editor.toolbar.current = button.dataset.type;\n\n        editor.toolbar.toolbox.toolClicked(event);\n        editor.toolbar.close();\n\n    };\n\n    /**\n     * Show or Hide toolbox when plus button is clicked\n     */\n    callbacks.plusButtonClicked = function () {\n\n        if (!editor.nodes.toolbox.classList.contains('opened')) {\n\n            editor.toolbar.toolbox.open();\n\n        } else {\n\n            editor.toolbar.toolbox.close();\n\n        }\n\n    };\n\n    /**\n     * Block handlers for KeyDown events\n     *\n     * @protected\n     * @param {Object} event\n     *\n     * Handles keydowns on block\n     * @see blockRightOrDownArrowPressed_\n     * @see backspacePressed_\n     * @see blockLeftOrUpArrowPressed_\n     */\n    callbacks.blockKeydown = function (event) {\n\n        let block = event.target; // event.target is input\n\n        switch (event.keyCode) {\n\n            case editor.core.keys.DOWN:\n            case editor.core.keys.RIGHT:\n                blockRightOrDownArrowPressed_(event);\n                break;\n\n            case editor.core.keys.BACKSPACE:\n                backspacePressed_(block, event);\n                break;\n\n            case editor.core.keys.UP:\n            case editor.core.keys.LEFT:\n                blockLeftOrUpArrowPressed_(event);\n                break;\n\n        }\n\n    };\n\n    /**\n     * RIGHT or DOWN keydowns on block\n     *\n     * @param {Object} event\n     * @private\n     *\n     * @description watches the selection and gets closest editable element.\n     * Uses method getDeepestTextNodeFromPosition to get the last node of next block\n     * Sets caret if it is contenteditable\n     */\n    var blockRightOrDownArrowPressed_ = function (event) {\n\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        /** Check for caret existance */\n        if (!focusedNode) {\n\n            return false;\n\n        }\n\n        /** Looking for closest (parent) contentEditable element of focused node */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        /**\n         * Founded contentEditable element doesn't have childs\n         * Or maybe New created block\n         */\n        if (!focusedNode.textContent) {\n\n            editor.caret.setToNextBlock(editableElementIndex);\n            return;\n\n        }\n\n        /**\n         * Do nothing when caret doesn not reaches the end of last child\n         */\n        var caretInLastChild    = false,\n            caretAtTheEndOfText = false;\n\n        var lastChild,\n            deepestTextnode;\n\n        lastChild = focusedNode.childNodes[focusedNode.childNodes.length - 1 ];\n\n        if (editor.core.isDomNode(lastChild)) {\n\n            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(lastChild, lastChild.childNodes.length);\n\n        } else {\n\n            deepestTextnode = lastChild;\n\n        }\n\n        caretInLastChild = selection.anchorNode == deepestTextnode;\n        caretAtTheEndOfText = deepestTextnode.length == selection.anchorOffset;\n\n        if ( !caretInLastChild  || !caretAtTheEndOfText ) {\n\n            editor.core.log('arrow [down|right] : caret does not reached the end');\n            return false;\n\n        }\n\n        editor.caret.setToNextBlock(editableElementIndex);\n\n    };\n\n    /**\n     * LEFT or UP keydowns on block\n     *\n     * @param {Object} event\n     * @private\n     *\n     * watches the selection and gets closest editable element.\n     * Uses method getDeepestTextNodeFromPosition to get the last node of previous block\n     * Sets caret if it is contenteditable\n     *\n     */\n    var blockLeftOrUpArrowPressed_ = function (event) {\n\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        /** Check for caret existance */\n        if (!focusedNode) {\n\n            return false;\n\n        }\n\n        /**\n         * LEFT or UP not at the beginning\n         */\n        if ( selection.anchorOffset !== 0) {\n\n            return false;\n\n        }\n\n        /** Looking for parent contentEditable block */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        /**\n         * Do nothing if caret is not at the beginning of first child\n         */\n        var caretInFirstChild   = false,\n            caretAtTheBeginning = false;\n\n        var firstChild,\n            deepestTextnode;\n\n        /**\n         * Founded contentEditable element doesn't have childs\n         * Or maybe New created block\n         */\n        if (!focusedNode.textContent) {\n\n            editor.caret.setToPreviousBlock(editableElementIndex);\n            return;\n\n        }\n\n        firstChild = focusedNode.childNodes[0];\n\n        if (editor.core.isDomNode(firstChild)) {\n\n            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(firstChild, 0);\n\n        } else {\n\n            deepestTextnode = firstChild;\n\n        }\n\n        caretInFirstChild   = selection.anchorNode == deepestTextnode;\n        caretAtTheBeginning = selection.anchorOffset === 0;\n\n        if ( caretInFirstChild && caretAtTheBeginning ) {\n\n            editor.caret.setToPreviousBlock(editableElementIndex);\n\n        }\n\n    };\n\n    /**\n     * Handles backspace keydown\n     *\n     * @param {Element} block\n     * @param {Object} event\n     * @private\n     *\n     * @description if block is empty, delete the block and set caret to the previous block\n     * If block is not empty, try to merge two blocks - current and previous\n     * But it we try'n to remove first block, then we should set caret to the next block, not previous.\n     * If we removed the last block, create new one\n     */\n    var backspacePressed_ = function (block, event) {\n\n        var currentInputIndex = editor.caret.getCurrentInputIndex(),\n            range,\n            selectionLength,\n            firstLevelBlocksCount;\n\n        if (isNativeInput_(event.target)) {\n\n            /** If input value is empty - remove block */\n            if (event.target.value.trim() == '') {\n\n                block.remove();\n\n            } else {\n\n                return;\n\n            }\n\n        }\n\n        if (block.textContent.trim()) {\n\n            range           = editor.content.getRange();\n            selectionLength = range.endOffset - range.startOffset;\n\n            if (editor.caret.position.atStart() && !selectionLength && editor.state.inputs[currentInputIndex - 1]) {\n\n                editor.content.mergeBlocks(currentInputIndex);\n\n            } else {\n\n                return;\n\n            }\n\n        }\n\n        if (!selectionLength) {\n\n            block.remove();\n\n        }\n\n\n        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\n        /**\n         * If all blocks are removed\n         */\n        if (firstLevelBlocksCount === 0) {\n\n            /** update currentNode variable */\n            editor.content.currentNode = null;\n\n            /** Inserting new empty initial block */\n            editor.ui.addInitialBlock();\n\n            /** Updating inputs state after deleting last block */\n            editor.ui.saveInputs();\n\n            /** Set to current appended block */\n            window.setTimeout(function () {\n\n                editor.caret.setToPreviousBlock(1);\n\n            }, 10);\n\n        } else {\n\n            if (editor.caret.inputIndex !== 0) {\n\n                /** Target block is not first */\n                editor.caret.setToPreviousBlock(editor.caret.inputIndex);\n\n            } else {\n\n                /** If we try to delete first block */\n                editor.caret.setToNextBlock(editor.caret.inputIndex);\n\n            }\n\n        }\n\n        editor.toolbar.move();\n\n        if (!editor.toolbar.opened) {\n\n            editor.toolbar.open();\n\n        }\n\n        /** Updating inputs state */\n        editor.ui.saveInputs();\n\n        /** Prevent default browser behaviour */\n        event.preventDefault();\n\n    };\n\n    /**\n     * This method is used to observe pasted dirty data.\n     *\n     * Mutation handlers send to separate observers each mutation (added, changed and so on), which will be\n     * passed from handler that sanitizes and replaces data.\n     *\n     * Probably won't be used\n     *\n     * @deprecated\n     *\n     * @param event\n     * @private\n     */\n    callbacks._blockPasteCallback = function () {\n\n        var currentInputIndex = editor.caret.getCurrentInputIndex();\n\n        /**\n         * create an observer instance\n         */\n        var observer = new MutationObserver(editor.callback.handleMutationsOnPaste);\n\n        /**\n         * configuration of the observer:\n         */\n        var config = {\n            attributes: true,\n            childList: false,\n            characterData: false,\n            subtree : true\n        };\n\n        // pass in the target node, as well as the observer options\n        observer.observe(editor.state.inputs[currentInputIndex], config);\n\n    };\n\n    /**\n     * This method prevents default behaviour.\n     *\n     * @param {Object} event\n     * @protected\n     *\n     * @description We get from clipboard pasted data, sanitize, make a fragment that contains of this sanitized nodes.\n     * Firstly, we need to memorize the caret position. We can do that by getting the range of selection.\n     * After all, we insert clear fragment into caret placed position. Then, we should move the caret to the last node\n     */\n    callbacks.blockPasteCallback = function (event) {\n\n        /** If area is input or textarea then allow default behaviour */\n        if ( isNativeInput_(event.target) ) {\n\n            return;\n\n        }\n\n        /** Prevent default behaviour */\n        event.preventDefault();\n\n        var editableParent = editor.content.getEditableParent(event.target),\n            currentNode = editor.content.currentNode;\n\n        /** Allow paste when event target placed in Editable element */\n        if (!editableParent) {\n\n            return;\n\n        }\n\n        /** get html pasted data - dirty data */\n        var htmlData  = event.clipboardData.getData('text/html'),\n            plainData = event.clipboardData.getData('text/plain');\n\n        /** Temporary DIV that is used to work with childs as arrays item */\n        var div     = editor.draw.node('DIV', '', {}),\n            cleaner = new editor.sanitizer.init(editor.sanitizer.Config.BASIC),\n            cleanData,\n            fragment;\n\n        /** Create fragment, that we paste to range after proccesing */\n        fragment = document.createDocumentFragment();\n\n        if ( htmlData.trim() != '' ) {\n\n            cleanData = cleaner.clean(htmlData);\n            div.innerHTML = cleanData;\n\n        } else {\n\n            div.innerText = plainData.toString();\n\n        }\n\n        var node, lastNode;\n\n        /**\n         * and fill in fragment\n         */\n        while (( node = div.firstChild) ) {\n\n            lastNode = fragment.appendChild(node);\n\n        }\n\n\n        if (editor.tools[currentNode.dataset.tool].allowRenderOnPaste) {\n\n            if (editor.paste.pasted(event)) return;\n\n        }\n\n        /**\n         * work with selection and range\n         */\n        var selection, range;\n\n        selection = window.getSelection();\n\n        range = selection.getRangeAt(0);\n        range.deleteContents();\n\n        range.insertNode(fragment);\n\n        /** Preserve the selection */\n        if (lastNode) {\n\n            range = range.cloneRange();\n            range.setStartAfter(lastNode);\n            range.collapse(true);\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n        }\n\n    };\n\n    /**\n     * @deprecated\n     * Sends all mutations to paste handler\n     */\n    callbacks.handleMutationsOnPaste = function (mutations) {\n\n        var self = this;\n\n        /**\n         * Calling function with context of this function.\n         * Also, we should sanitize pasted or changed data one time and ignore\n         * changings which makes sanitize method.\n         * For that, we need to send Context, MutationObserver.__proto__ that contains\n         * observer disconnect method.\n         */\n        mutations.forEach(function (mutation) {\n\n            editor.content.paste.call(self, mutation);\n\n        });\n\n    };\n\n    /**\n     * used by UI module\n     * Clicks on block settings button\n     *\n     * @param {Object} event\n     * @protected\n     * @description Opens toolbar settings\n     */\n    callbacks.showSettingsButtonClicked = function (event) {\n\n        /**\n         * Get type of current block\n         * It uses to append settings from tool.settings property.\n         * ...\n         * Type is stored in data-type attribute on block\n         */\n        var currentToolType = editor.content.currentNode.dataset.tool;\n\n        editor.toolbar.settings.toggle(currentToolType);\n\n        /** Close toolbox when settings button is active */\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.hideRemoveActions();\n\n    };\n\n    /**\n     * Check block\n     * @param target\n     * @private\n     *\n     * @description Checks target is it native input\n     */\n    var isNativeInput_ = function (target) {\n\n        var nativeInputAreas = ['INPUT', 'TEXTAREA'];\n\n        return (nativeInputAreas.indexOf(target.tagName) != -1);\n\n    };\n\n    return callbacks;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/callbacks.js","/**\n * Codex Editor Draw module\n *\n * @author Codex Team\n * @version 1.0.\n */\n\nmodule.exports = (function (draw) {\n\n    /**\n     * Base editor wrapper\n     */\n    draw.wrapper = function () {\n\n        var wrapper = document.createElement('div');\n\n        wrapper.className += 'codex-editor';\n\n        return wrapper;\n\n    };\n\n    /**\n     * Content-editable holder\n     */\n    draw.redactor = function () {\n\n        var redactor = document.createElement('div');\n\n        redactor.className += 'ce-redactor';\n\n        return redactor;\n\n    };\n\n    draw.ceBlock = function () {\n\n        var block = document.createElement('DIV');\n\n        block.className += 'ce_block';\n\n        return block;\n\n    };\n\n    /**\n     * Empty toolbar with toggler\n     */\n    draw.toolbar = function () {\n\n        var bar = document.createElement('div');\n\n        bar.className += 'ce-toolbar';\n\n        return bar;\n\n    };\n\n    draw.toolbarContent = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.classList.add('ce-toolbar__content');\n\n        return wrapper;\n\n    };\n\n    /**\n     * Inline toolbar\n     */\n    draw.inlineToolbar = function () {\n\n        var bar = document.createElement('DIV');\n\n        bar.className += 'ce-toolbar-inline';\n\n        return bar;\n\n    };\n\n    /**\n     * Wrapper for inline toobar buttons\n     */\n    draw.inlineToolbarButtons = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.className += 'ce-toolbar-inline__buttons';\n\n        return wrapper;\n\n    };\n\n    /**\n     * For some actions\n     */\n    draw.inlineToolbarActions = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.className += 'ce-toolbar-inline__actions';\n\n        return wrapper;\n\n    };\n\n    draw.inputForLink = function () {\n\n        var input = document.createElement('INPUT');\n\n        input.type        = 'input';\n        input.className  += 'inputForLink';\n        input.placeholder = 'Вставьте ссылку ...';\n        input.setAttribute('form', 'defaultForm');\n\n        input.setAttribute('autofocus', 'autofocus');\n\n        return input;\n\n    };\n\n    /**\n     * @todo Desc\n     */\n    draw.blockButtons = function () {\n\n        var block = document.createElement('div');\n\n        block.className += 'ce-toolbar__actions';\n\n        return block;\n\n    };\n\n    /**\n     * Block settings panel\n     */\n    draw.blockSettings = function () {\n\n        var settings = document.createElement('div');\n\n        settings.className += 'ce-settings';\n\n        return settings;\n\n    };\n\n    draw.defaultSettings = function () {\n\n        var div = document.createElement('div');\n\n        div.classList.add('ce-settings_default');\n\n        return div;\n\n    };\n\n    draw.pluginsSettings = function () {\n\n        var div = document.createElement('div');\n\n        div.classList.add('ce-settings_plugin');\n\n        return div;\n\n    };\n\n    draw.plusButton = function () {\n\n        var button = document.createElement('span');\n\n        button.className = 'ce-toolbar__plus';\n        // button.innerHTML = '<i class=\"ce-icon-plus\"></i>';\n\n        return button;\n\n    };\n\n    /**\n     * Settings button in toolbar\n     */\n    draw.settingsButton = function () {\n\n        var toggler = document.createElement('span');\n\n        toggler.className = 'ce-toolbar__settings-btn';\n\n        /** Toggler button*/\n        toggler.innerHTML = '<i class=\"ce-icon-cog\"></i>';\n\n        return toggler;\n\n    };\n\n    /**\n     * Redactor tools wrapper\n     */\n\n    draw.toolbox = function () {\n\n        var wrapper = document.createElement('div');\n\n        wrapper.className = 'ce-toolbar__tools';\n\n        return wrapper;\n\n    };\n\n    /**\n     * @protected\n     *\n     * Draws tool buttons for toolbox\n     *\n     * @param {String} type\n     * @param {String} classname\n     * @returns {Element}\n     */\n    draw.toolbarButton = function (type, classname) {\n\n        var button     = document.createElement('li'),\n            toolIcon  = document.createElement('i'),\n            toolTitle = document.createElement('span');\n\n        button.dataset.type = type;\n        button.setAttribute('title', type);\n\n        toolIcon.classList.add(classname);\n        toolTitle.classList.add('ce_toolbar_tools--title');\n\n\n        button.appendChild(toolIcon);\n        button.appendChild(toolTitle);\n\n        return button;\n\n    };\n\n    /**\n     * @protected\n     *\n     * Draws tools for inline toolbar\n     *\n     * @param {String} type\n     * @param {String} classname\n     */\n    draw.toolbarButtonInline = function (type, classname) {\n\n        var button     = document.createElement('BUTTON'),\n            toolIcon  = document.createElement('I');\n\n        button.type = 'button';\n        button.dataset.type = type;\n        toolIcon.classList.add(classname);\n\n        button.appendChild(toolIcon);\n\n        return button;\n\n    };\n\n    /**\n     * Redactor block\n     */\n    draw.block = function (tagName, content) {\n\n        var node = document.createElement(tagName);\n\n        node.innerHTML = content || '';\n\n        return node;\n\n    };\n\n    /**\n     * Creates Node with passed tagName and className\n     * @param {string}  tagName\n     * @param {string} className\n     * @param {object} properties - allow to assign properties\n     */\n    draw.node = function ( tagName, className, properties ) {\n\n        var el = document.createElement( tagName );\n\n        if ( className ) el.className = className;\n\n        if ( properties ) {\n\n            for (var name in properties) {\n\n                el[name] = properties[name];\n\n            }\n\n        }\n\n        return el;\n\n    };\n\n    /**\n    * Unavailable plugin block\n    */\n    draw.unavailableBlock = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.classList.add('cdx-unavailable-block');\n\n        return wrapper;\n\n    };\n\n    return draw;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/draw.js","/**\n * Codex Editor Caret Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (caret) {\n\n    let editor = codex.editor;\n\n    /**\n     * @var {int} InputIndex - editable element in DOM\n     */\n    caret.inputIndex = null;\n\n    /**\n     * @var {int} offset - caret position in a text node.\n     */\n    caret.offset = null;\n\n    /**\n     * @var {int} focusedNodeIndex - we get index of child node from first-level block\n     */\n    caret.focusedNodeIndex = null;\n\n    /**\n     * Creates Document Range and sets caret to the element.\n     * @protected\n     * @uses caret.save — if you need to save caret position\n     * @param {Element} el - Changed Node.\n     */\n    caret.set = function ( el, index, offset) {\n\n        offset = offset || caret.offset || 0;\n        index  = index  || caret.focusedNodeIndex || 0;\n\n        var childs = el.childNodes,\n            nodeToSet;\n\n        if ( childs.length === 0 ) {\n\n            nodeToSet = el;\n\n        } else {\n\n            nodeToSet = childs[index];\n\n        }\n\n        /** If Element is INPUT */\n        if (el.contentEditable != 'true') {\n\n            el.focus();\n            return;\n\n        }\n\n        if (editor.core.isDomNode(nodeToSet)) {\n\n            nodeToSet = editor.content.getDeepestTextNodeFromPosition(nodeToSet, nodeToSet.childNodes.length);\n\n        }\n\n        var range     = document.createRange(),\n            selection = window.getSelection();\n\n        window.setTimeout(function () {\n\n            range.setStart(nodeToSet, offset);\n            range.setEnd(nodeToSet, offset);\n\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n            editor.caret.saveCurrentInputIndex();\n\n        }, 20);\n\n    };\n\n    /**\n     * @protected\n     * Updates index of input and saves it in caret object\n     */\n    caret.saveCurrentInputIndex = function () {\n\n        /** Index of Input that we paste sanitized content */\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        if (!focusedNode) {\n\n            return;\n\n        }\n\n        /** Looking for parent contentEditable block */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        caret.inputIndex = editableElementIndex;\n\n    };\n\n    /**\n     * Returns current input index (caret object)\n     */\n    caret.getCurrentInputIndex = function () {\n\n        return caret.inputIndex;\n\n    };\n\n    /**\n     * @param {int} index - index of first-level block after that we set caret into next input\n     */\n    caret.setToNextBlock = function (index) {\n\n        var inputs = editor.state.inputs,\n            nextInput = inputs[index + 1];\n\n        if (!nextInput) {\n\n            editor.core.log('We are reached the end');\n            return;\n\n        }\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!nextInput.childNodes.length) {\n\n            var emptyTextElement = document.createTextNode('');\n\n            nextInput.appendChild(emptyTextElement);\n\n        }\n\n        editor.caret.inputIndex = index + 1;\n        editor.caret.set(nextInput, 0, 0);\n        editor.content.workingNodeChanged(nextInput);\n\n    };\n\n    /**\n     * @param {int} index - index of target input.\n     * Sets caret to input with this index\n     */\n    caret.setToBlock = function (index) {\n\n        var inputs = editor.state.inputs,\n            targetInput = inputs[index];\n\n        if ( !targetInput ) {\n\n            return;\n\n        }\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!targetInput.childNodes.length) {\n\n            var emptyTextElement = document.createTextNode('');\n\n            targetInput.appendChild(emptyTextElement);\n\n        }\n\n        editor.caret.inputIndex = index;\n        editor.caret.set(targetInput, 0, 0);\n        editor.content.workingNodeChanged(targetInput);\n\n    };\n\n    /**\n     * @param {int} index - index of input\n     */\n    caret.setToPreviousBlock = function (index) {\n\n        index = index || 0;\n\n        var inputs = editor.state.inputs,\n            previousInput = inputs[index - 1],\n            lastChildNode,\n            lengthOfLastChildNode,\n            emptyTextElement;\n\n\n        if (!previousInput) {\n\n            editor.core.log('We are reached first node');\n            return;\n\n        }\n\n        lastChildNode = editor.content.getDeepestTextNodeFromPosition(previousInput, previousInput.childNodes.length);\n        lengthOfLastChildNode = lastChildNode.length;\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!previousInput.childNodes.length) {\n\n            emptyTextElement = document.createTextNode('');\n            previousInput.appendChild(emptyTextElement);\n\n        }\n        editor.caret.inputIndex = index - 1;\n        editor.caret.set(previousInput, previousInput.childNodes.length - 1, lengthOfLastChildNode);\n        editor.content.workingNodeChanged(inputs[index - 1]);\n\n    };\n\n    caret.position = {\n\n        atStart : function () {\n\n            var selection       = window.getSelection(),\n                anchorOffset    = selection.anchorOffset,\n                anchorNode      = selection.anchorNode,\n                firstLevelBlock = editor.content.getFirstLevelBlock(anchorNode),\n                pluginsRender   = firstLevelBlock.childNodes[0];\n\n            if (!editor.core.isDomNode(anchorNode)) {\n\n                anchorNode = anchorNode.parentNode;\n\n            }\n\n            var isFirstNode  = anchorNode === pluginsRender.childNodes[0],\n                isOffsetZero = anchorOffset === 0;\n\n            return isFirstNode && isOffsetZero;\n\n        },\n\n        atTheEnd : function () {\n\n            var selection    = window.getSelection(),\n                anchorOffset = selection.anchorOffset,\n                anchorNode   = selection.anchorNode;\n\n            /** Caret is at the end of input */\n            return !anchorNode || !anchorNode.length || anchorOffset === anchorNode.length;\n\n        }\n    };\n\n    return caret;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/caret.js","/**\n * Codex Editor Notification Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (notifications) {\n\n    let editor = codex.editor;\n\n    var queue = [];\n\n    var addToQueue = function (settings) {\n\n        queue.push(settings);\n\n        var index = 0;\n\n        while ( index < queue.length && queue.length > 5) {\n\n            if (queue[index].type == 'confirm' || queue[index].type == 'prompt') {\n\n                index++;\n                continue;\n\n            }\n\n            queue[index].close();\n            queue.splice(index, 1);\n\n        }\n\n    };\n\n    notifications.createHolder = function () {\n\n        var holder = editor.draw.node('DIV', 'cdx-notifications-block');\n\n        editor.nodes.notifications = document.body.appendChild(holder);\n\n        return holder;\n\n    };\n\n\n    /**\n     * Error notificator. Shows block with message\n     * @protected\n     */\n    notifications.errorThrown = function (errorMsg, event) {\n\n        editor.notifications.notification({message: 'This action is not available currently', type: event.type});\n\n    };\n\n    /**\n     *\n     * Appends notification\n     *\n     *  settings = {\n     *      type        - notification type (reserved types: alert, confirm, prompt). Just add class 'cdx-notification-'+type\n     *      message     - notification message\n     *      okMsg       - confirm button text (default - 'Ok')\n     *      cancelBtn   - cancel button text (default - 'Cancel'). Only for confirm and prompt types\n     *      confirm     - function-handler for ok button click\n     *      cancel      - function-handler for cancel button click. Only for confirm and prompt types\n     *      time        - time (in seconds) after which notification will close (default - 10s)\n     *  }\n     *\n     * @param settings\n     */\n    notifications.notification = function (constructorSettings) {\n\n        /** Private vars and methods */\n        var notification = null,\n            cancel       = null,\n            type         = null,\n            confirm      = null,\n            inputField   = null;\n\n        var confirmHandler = function () {\n\n            close();\n\n            if (typeof confirm !== 'function' ) {\n\n                return;\n\n            }\n\n            if (type == 'prompt') {\n\n                confirm(inputField.value);\n                return;\n\n            }\n\n            confirm();\n\n        };\n\n        var cancelHandler = function () {\n\n            close();\n\n            if (typeof cancel !== 'function' ) {\n\n                return;\n\n            }\n\n            cancel();\n\n        };\n\n\n        /** Public methods */\n        function create(settings) {\n\n            if (!(settings && settings.message)) {\n\n                editor.core.log('Can\\'t create notification. Message is missed');\n                return;\n\n            }\n\n            settings.type = settings.type || 'alert';\n            settings.time = settings.time*1000 || 10000;\n\n            var wrapper = editor.draw.node('DIV', 'cdx-notification'),\n                message = editor.draw.node('DIV', 'cdx-notification__message'),\n                input = editor.draw.node('INPUT', 'cdx-notification__input'),\n                okBtn = editor.draw.node('SPAN', 'cdx-notification__ok-btn'),\n                cancelBtn = editor.draw.node('SPAN', 'cdx-notification__cancel-btn');\n\n            message.textContent = settings.message;\n            okBtn.textContent = settings.okMsg || 'ОК';\n            cancelBtn.textContent = settings.cancelMsg || 'Отмена';\n\n            editor.listeners.add(okBtn, 'click', confirmHandler);\n            editor.listeners.add(cancelBtn, 'click', cancelHandler);\n\n            wrapper.appendChild(message);\n\n            if (settings.type == 'prompt') {\n\n                wrapper.appendChild(input);\n\n            }\n\n            wrapper.appendChild(okBtn);\n\n            if (settings.type == 'prompt' || settings.type == 'confirm') {\n\n                wrapper.appendChild(cancelBtn);\n\n            }\n\n            wrapper.classList.add('cdx-notification-' + settings.type);\n            wrapper.dataset.type = settings.type;\n\n            notification = wrapper;\n            type         = settings.type;\n            confirm      = settings.confirm;\n            cancel       = settings.cancel;\n            inputField   = input;\n\n            if (settings.type != 'prompt' && settings.type != 'confirm') {\n\n                window.setTimeout(close, settings.time);\n\n            }\n\n        };\n\n        function send() {\n\n            editor.nodes.notifications.appendChild(notification);\n            inputField.focus();\n\n            editor.nodes.notifications.classList.add('cdx-notification__notification-appending');\n\n            window.setTimeout(function () {\n\n                editor.nodes.notifications.classList.remove('cdx-notification__notification-appending');\n\n            }, 100);\n\n            addToQueue({type: type, close: close});\n\n        };\n\n        function close() {\n\n            notification.remove();\n\n        };\n\n\n        if (constructorSettings) {\n\n            create(constructorSettings);\n            send();\n\n        }\n\n        return {\n            create: create,\n            send: send,\n            close: close\n        };\n\n    };\n\n    notifications.clear = function () {\n\n        editor.nodes.notifications.innerHTML = '';\n        queue = [];\n\n    };\n\n    return notifications;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/notifications.js","/**\n * Codex Editor Parser Module\n *\n * @author Codex Team\n * @version 1.1\n */\n\nmodule.exports = (function (parser) {\n\n    let editor = codex.editor;\n\n    /** inserting text */\n    parser.insertPastedContent = function (blockType, tag) {\n\n        editor.content.insertBlock({\n            type :  blockType.type,\n            block : blockType.render({\n                text : tag.innerHTML\n            })\n        });\n\n    };\n\n    /**\n     * Check DOM node for display style: separated block or child-view\n     */\n    parser.isFirstLevelBlock = function (node) {\n\n        return node.nodeType == editor.core.nodeTypes.TAG &&\n            node.classList.contains(editor.ui.className.BLOCK_CLASSNAME);\n\n    };\n\n    return parser;\n\n})({});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/parser.js","/**\n * Codex Sanitizer\n */\n\nmodule.exports = (function (sanitizer) {\n\n    var janitor = require('html-janitor');\n\n    /**\n     * Basic config\n     */\n    var Config = {\n\n        BASIC : {\n\n            tags: {\n                p: {},\n                a: {\n                    href: true,\n                    target: '_blank',\n                    rel: 'nofollow'\n                },\n                i: {},\n                b: {},\n                strong: {},\n                em: {},\n                span: {}\n            }\n        }\n    };\n\n    sanitizer.Config = Config;\n\n    sanitizer.init = janitor;\n\n    return sanitizer;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/sanitizer.js","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('html-janitor', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.HTMLJanitor = factory();\n  }\n}(this, function () {\n\n  /**\n   * @param {Object} config.tags Dictionary of allowed tags.\n   * @param {boolean} config.keepNestedBlockElements Default false.\n   */\n  function HTMLJanitor(config) {\n\n    var tagDefinitions = config['tags'];\n    var tags = Object.keys(tagDefinitions);\n\n    var validConfigValues = tags\n      .map(function(k) { return typeof tagDefinitions[k]; })\n      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\n    if(!validConfigValues) {\n      throw new Error(\"The configuration was invalid\");\n    }\n\n    this.config = config;\n  }\n\n  // TODO: not exhaustive?\n  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n  function isBlockElement(node) {\n    return blockElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n  function isInlineElement(node) {\n    return inlineElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  HTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div');\n    sandbox.innerHTML = html;\n\n    this._sanitize(sandbox);\n\n    return sandbox.innerHTML;\n  };\n\n  HTMLJanitor.prototype._sanitize = function (parentNode) {\n    var treeWalker = createTreeWalker(parentNode);\n    var node = treeWalker.firstChild();\n    if (!node) { return; }\n\n    do {\n      // Ignore nodes that have already been sanitized\n      if (node._sanitized) {\n        continue;\n      }\n\n      if (node.nodeType === Node.TEXT_NODE) {\n        // If this text node is just whitespace and the previous or next element\n        // sibling is a block element, remove it\n        // N.B.: This heuristic could change. Very specific to a bug with\n        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n        // FIXME: make this an option?\n        if (node.data.trim() === ''\n            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n          parentNode.removeChild(node);\n          this._sanitize(parentNode);\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      // Remove all comments\n      if (node.nodeType === Node.COMMENT_NODE) {\n        parentNode.removeChild(node);\n        this._sanitize(parentNode);\n        break;\n      }\n\n      var isInline = isInlineElement(node);\n      var containsBlockElement;\n      if (isInline) {\n        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n      }\n\n      // Block elements should not be nested (e.g. <li><p>...); if\n      // they are, we want to unwrap the inner block element.\n      var isNotTopContainer = !! parentNode.parentNode;\n      var isNestedBlockElement =\n            isBlockElement(parentNode) &&\n            isBlockElement(node) &&\n            isNotTopContainer;\n\n      var nodeName = node.nodeName.toLowerCase();\n\n      var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);\n\n      var isInvalid = isInline && containsBlockElement;\n\n      // Drop tag entirely according to the whitelist *and* if the markup\n      // is invalid.\n      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n        // Do not keep the inner text of SCRIPT/STYLE elements.\n        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n          while (node.childNodes.length > 0) {\n            parentNode.insertBefore(node.childNodes[0], node);\n          }\n        }\n        parentNode.removeChild(node);\n\n        this._sanitize(parentNode);\n        break;\n      }\n\n      // Sanitize attributes\n      for (var a = 0; a < node.attributes.length; a += 1) {\n        var attr = node.attributes[a];\n\n        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n          node.removeAttribute(attr.name);\n          // Shift the array to continue looping.\n          a = a - 1;\n        }\n      }\n\n      // Sanitize children\n      this._sanitize(node);\n\n      // Mark node as sanitized so it's ignored in future runs\n      node._sanitized = true;\n    } while ((node = treeWalker.nextSibling()));\n  };\n\n  function createTreeWalker(node) {\n    return document.createTreeWalker(node,\n                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n                                     null, false);\n  }\n\n  function getAllowedAttrs(config, nodeName, node){\n    if (typeof config.tags[nodeName] === 'function') {\n      return config.tags[nodeName](node);\n    } else {\n      return config.tags[nodeName];\n    }\n  }\n\n  function shouldRejectNode(node, allowedAttrs){\n    if (typeof allowedAttrs === 'undefined') {\n      return true;\n    } else if (typeof allowedAttrs === 'boolean') {\n      return !allowedAttrs;\n    }\n\n    return false;\n  }\n\n  function shouldRejectAttr(attr, allowedAttrs, node){\n    var attrName = attr.name.toLowerCase();\n\n    if (allowedAttrs === true){\n      return false;\n    } else if (typeof allowedAttrs[attrName] === 'function'){\n      return !allowedAttrs[attrName](attr.value, node);\n    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n      return true;\n    } else if (allowedAttrs[attrName] === false) {\n      return true;\n    } else if (typeof allowedAttrs[attrName] === 'string') {\n      return (allowedAttrs[attrName] !== attr.value);\n    }\n\n    return false;\n  }\n\n  return HTMLJanitor;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/html-janitor/src/html-janitor.js\n// module id = 18\n// module chunks = 0","/**\n * Codex Editor Listeners module\n *\n * @author Codex Team\n * @version 1.0\n */\n\n/**\n * Module-decorator for event listeners assignment\n */\nmodule.exports = function (listeners) {\n\n    var allListeners = [];\n\n    /**\n     * Search methods\n     *\n     * byElement, byType and byHandler returns array of suitable listeners\n     * one and all takes element, eventType, and handler and returns first (all) suitable listener\n     *\n     */\n    listeners.search = function () {\n\n        var byElement = function (element, context) {\n\n            var listenersOnElement = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.element === element) {\n\n                    listenersOnElement.push(listener);\n\n                }\n\n            }\n\n            return listenersOnElement;\n\n        };\n\n        var byType = function (eventType, context) {\n\n            var listenersWithType = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.type === eventType) {\n\n                    listenersWithType.push(listener);\n\n                }\n\n            }\n\n            return listenersWithType;\n\n        };\n\n        var byHandler = function (handler, context) {\n\n            var listenersWithHandler = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.handler === handler) {\n\n                    listenersWithHandler.push(listener);\n\n                }\n\n            }\n\n            return listenersWithHandler;\n\n        };\n\n        var one = function (element, eventType, handler) {\n\n            var result = allListeners;\n\n            if (element)\n                result = byElement(element, result);\n\n            if (eventType)\n                result = byType(eventType, result);\n\n            if (handler)\n                result = byHandler(handler, result);\n\n            return result[0];\n\n        };\n\n        var all = function (element, eventType, handler) {\n\n            var result = allListeners;\n\n            if (element)\n                result = byElement(element, result);\n\n            if (eventType)\n                result = byType(eventType, result);\n\n            if (handler)\n                result = byHandler(handler, result);\n\n            return result;\n\n        };\n\n        return {\n            byElement   : byElement,\n            byType      : byType,\n            byHandler   : byHandler,\n            one         : one,\n            all         : all\n        };\n\n    }();\n\n    listeners.add = function (element, eventType, handler, isCapture) {\n\n        element.addEventListener(eventType, handler, isCapture);\n\n        var data = {\n            element: element,\n            type: eventType,\n            handler: handler\n        };\n\n        var alreadyAddedListener = listeners.search.one(element, eventType, handler);\n\n        if (!alreadyAddedListener) {\n\n            allListeners.push(data);\n\n        }\n\n    };\n\n    listeners.remove = function (element, eventType, handler) {\n\n        element.removeEventListener(eventType, handler);\n\n        var existingListeners = listeners.search.all(element, eventType, handler);\n\n        for (var i = 0; i < existingListeners.length; i++) {\n\n            var index = allListeners.indexOf(existingListeners[i]);\n\n            if (index > 0) {\n\n                allListeners.splice(index, 1);\n\n            }\n\n        }\n\n    };\n\n    listeners.removeAll = function () {\n\n        allListeners.map(function (current) {\n\n            listeners.remove(current.element, current.type, current.handler);\n\n        });\n\n    };\n\n    listeners.get = function (element, eventType, handler) {\n\n        return listeners.search.all(element, eventType, handler);\n\n    };\n\n    return listeners;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/listeners.js","/**\n * Codex Editor Destroyer module\n *\n * @auhor Codex Team\n * @version 1.0\n */\n\nmodule.exports = function (destroyer) {\n\n    let editor = codex.editor;\n\n    destroyer.removeNodes = function () {\n\n        editor.nodes.wrapper.remove();\n        editor.nodes.notifications.remove();\n\n    };\n\n    destroyer.destroyPlugins = function () {\n\n        for (var tool in editor.tools) {\n\n            if (typeof editor.tools[tool].destroy === 'function') {\n\n                editor.tools[tool].destroy();\n\n            }\n\n        }\n\n    };\n\n    destroyer.destroyScripts = function () {\n\n        var scripts = document.getElementsByTagName('SCRIPT');\n\n        for (var i = 0; i < scripts.length; i++) {\n\n            if (scripts[i].id.indexOf(editor.scriptPrefix) + 1) {\n\n                scripts[i].remove();\n                i--;\n\n            }\n\n        }\n\n    };\n\n\n    /**\n     * Delete editor data from webpage.\n     * You should send settings argument with boolean flags:\n     * @param settings.ui- remove redactor event listeners and DOM nodes\n     * @param settings.scripts - remove redactor scripts from DOM\n     * @param settings.plugins - remove plugin's objects\n     * @param settings.core - remove editor core. You can remove core only if UI and scripts flags is true\n     * }\n     *\n     */\n    destroyer.destroy = function (settings) {\n\n        if (!settings || typeof settings !== 'object') {\n\n            return;\n\n        }\n\n        if (settings.ui) {\n\n            destroyer.removeNodes();\n            editor.listeners.removeAll();\n\n        }\n\n        if (settings.scripts) {\n\n            destroyer.destroyScripts();\n\n        }\n\n        if (settings.plugins) {\n\n            destroyer.destroyPlugins();\n\n        }\n\n        if (settings.ui && settings.scripts && settings.core) {\n\n            delete codex.editor;\n\n        }\n\n    };\n\n    return destroyer;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/destroyer.js","/**\n * Codex Editor Paste module\n *\n * @author Codex Team\n * @version 1.1.1\n */\n\nmodule.exports = function (paste) {\n\n    let editor = codex.editor;\n\n    var patterns = [];\n\n    paste.prepare = function () {\n\n        var tools = editor.tools;\n\n        for (var tool in tools) {\n\n            if (!tools[tool].renderOnPastePatterns || !Array.isArray(tools[tool].renderOnPastePatterns)) {\n\n                continue;\n\n            }\n\n            tools[tool].renderOnPastePatterns.map(function (pattern) {\n\n\n                patterns.push(pattern);\n\n            });\n\n        }\n\n        return Promise.resolve();\n\n    };\n\n    /**\n     * Saves data\n     * @param event\n     */\n    paste.pasted = function (event) {\n\n        var clipBoardData = event.clipboardData || window.clipboardData,\n            content = clipBoardData.getData('Text');\n\n        var result = analize(content);\n\n        if (result) {\n\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n        }\n\n        return result;\n\n    };\n\n    /**\n     * Analizes pated string and calls necessary method\n     */\n\n    var analize = function (string) {\n\n        var result  = false,\n            content = editor.content.currentNode,\n            plugin  = content.dataset.tool;\n\n        patterns.map( function (pattern) {\n\n            var execArray = pattern.regex.exec(string),\n                match     = execArray && execArray[0];\n\n            if ( match && match === string.trim()) {\n\n                /** current block is not empty */\n                if ( content.textContent.trim() && plugin == editor.settings.initialBlockPlugin ) {\n\n                    pasteToNewBlock_();\n\n                }\n\n                pattern.callback(string, pattern);\n                result = true;\n\n            }\n\n        });\n\n        return result;\n\n    };\n\n    var pasteToNewBlock_ = function () {\n\n        /** Create new initial block */\n        editor.content.insertBlock({\n\n            type : editor.settings.initialBlockPlugin,\n            block : editor.tools[editor.settings.initialBlockPlugin].render({\n                text : ''\n            })\n\n        }, false);\n\n    };\n\n    return paste;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/paste.js"],"sourceRoot":""}