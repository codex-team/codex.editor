{"version":3,"sources":["webpack:///codex-editor.js","webpack:///webpack/bootstrap 9c13fefb171ed62d357b","webpack:///./codex.js","webpack:///./modules/core.js","webpack:///./modules/tools.js","webpack:///./modules/ui.js","webpack:///./modules/transport.js","webpack:///./modules/renderer.js","webpack:///./modules/saver.js","webpack:///./modules/content.js","webpack:///./modules/toolbar/toolbar.js","webpack:///./modules/toolbar/settings.js","webpack:///./modules/toolbar/inline.js","webpack:///./modules/toolbar/toolbox.js","webpack:///./modules/callbacks.js","webpack:///./modules/draw.js","webpack:///./modules/caret.js","webpack:///./modules/notifications.js","webpack:///./modules/parser.js","webpack:///./modules/sanitizer.js","webpack:///./~/html-janitor/src/html-janitor.js","webpack:///./modules/anchors.js","webpack:///./modules/listeners.js","webpack:///./modules/destroyer.js","webpack:///./modules/paste.js"],"names":["codex","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","editor","version","scriptPrefix","init","core","tools","ui","transport","renderer","saver","content","toolbar","callback","draw","caret","notifications","parser","sanitizer","anchors","listeners","destroyer","paste","settings","textareaId","uploadImagesUrl","initialBlockPlugin","nodes","textarea","wrapper","inlineToolbar","buttons","actions","toolbox","plusButton","showSettingsButton","showTrashButton","blockSettings","pluginSettings","defaultSettings","toolbarButtons","redactor","state","jsonOutput","blocks","inputs","start","userSettings","prepare","then","make","bindEvents","makeBlocksFromData","saveInputs","catch","error","log","_typeof","Symbol","iterator","obj","constructor","prototype","Promise","resolve","reject","data","hideToolbar","document","getElementById","undefined","Error","msg","type","arg","window","console","e","insertAfter","target","element","parentNode","insertBefore","nextSibling","nodeTypes","TAG","TEXT","COMMENT","keys","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","ESC","SPACE","LEFT","UP","DOWN","RIGHT","DELETE","META","isDomNode","el","nodeType","this","isEmpty","Object","length","ajax","url","encodedString","isFormData","prop","XMLHTTP","XMLHttpRequest","ActiveXObject","successFunction","async","success","test","encodeURIComponent","withCredentials","beforeSend","open","isFormData_","setRequestHeader","onreadystatechange","readyState","status","responseText","send","importScript","scriptPath","instanceName","script","createElement","defer","onload","onerror","src","head","appendChild","object","FormData","resolve_","reject_","pluginsRequiresPreparation","allPlugins","pluginName","plugin","push","waitAllPluginsPreparation_","plugins","allPluginsProcessed__","reduce","previousValue","iteration","pluginIsReady__","callPluginsPrepareMethod_","available","loadingMessage","config","className","BLOCK_CLASSNAME","BLOCK_CONTENT","BLOCK_STRETCHED","BLOCK_HIGHLIGHTED","BLOCK_IN_FEED_MODE","BLOCK_WITH_ANCHOR","SETTINGS_ITEM","makeToolBar_","addTools_","makeInlineToolbar_","addInlineToolbarTools_","makeNotificationHolder_","addDefaultSettings","container","inlineToolbarButtons","inlineToolbarActions","blockButtons","makeToolbarSettings_","toolbarContent","makeToolbarContent_","settingsButton","makeRemoveBlockButton","pluginsSettings","createHolder","tool","toolName","toolButton","iconClassname","displayInToolbox","render","toolbarButton","bold","icon","command","italic","underline","link","name","toolbarButtonInline","setInlineToolbarButtonBehaviour","add","globalKeydown","redactorKeyDown","globalKeyup","redactorClicked","plusButtonClicked","showSettingsButtonClicked","button","toolbarButtonClicked","addBlockHandlers","block","blockKeydown","blockPasteCallback","inline","show","querySelectorAll","Array","map","current","addInitialBlock","initialBlock","initialBlockType","setAttribute","insertBlock","workingNodeChanged","event","toolClicked","input","arguments","node","fileSelected","clearInput","i","files","formData","multiple","append","selectAndUpload","args","accept","click","items","appendBlocks","nodeSequence","index","appendNodeAtIndex","getNodeAsync","createBlockFromData","blockData","blocksList","position","toolData","anchor","cover","unavailableBlock","innerHTML","dataset","inputPosition","stretched","isStretched","saveBlocks","html","childNodes","makeQueue","queue","getBlockData","makeFormDataFromBlocks","save","savedData","output","blockContent","pluginsContent","coverFlag","classList","contains","validate","result","currentNode","editorAreaHightlighted","sync","getNodeFocused","focused","selection","getSelection","anchorNode","focusNode","parentElement","isFirstLevelBlock","parent","markBlock","clearMark","remove","getFirstLevelBlock","body","targetNode","replaceBlock","targetBlock","newBlock","replaceChild","needPlaceCaret","workingBlock","newBlockContent","blockType","composeNewBlock","currentInputIndex","getCurrentInputIndex","editableElement","querySelector","emptyText","createTextNode","set","move","showPlusButton","setTimeout","setToNextBlock","switchBlock","blockToReplace","newBlockComposed","getDeepestTextNodeFromPosition","text","blockChilds","textContent","trim","removeChild","lookingFromStart","getRange","getRangeAt","splitBlock","inputIndex","textBeforeCaret","textNodeBeforeCaret","textAfterCaret","textNodeAfterCaret","anchorNodeText","caretOffset","anchorOffset","currentBlock","substring","previousChilds","nextChilds","reachedCurrent","child","previousChildsLength","nextChildsLength","newNode","NEW_BLOCK_TYPE","mergeBlocks","targetInputIndex","targetInput","currentInputContent","mutation","workingNode","allowedToPaste","sanitize","pasteTextContent","addedNodes","textNode","disconnect","cleaner","satinizer","Config","BASIC","clean","outerHTML","div","replaceWith","isLastNode","allChecked","allSiblingsEmpty_","sibling","wrapTextWithParagraphs","htmlString","paragraph","blockTyped","newWrapper","firstLevelBlocks","indexOf","tagName","cloneNode","getEditableParent","contentEditable","defaultToolbarHeight","defaultOffset","opened","close","toggle","hidePlusButton","newYCoordinate","offsetTop","style","transform","Math","floor","hideRemoveActions","setting","toolType","makeSettings","settingsBlock","settingsOpened","feedModeToggler","anchorInput","makeFeedModeToggler","makeAnchorInput","isFeedModeActivated","updateFeedMode","anchorWrapper","hash","placeholder","keyDownOnAnchorInput","keyUpOnAnchorInput","anchorChanged","removeBlockWrapper","settingButton","actionWrapper","confirmAction","cancelAction","removeButtonClicked","confirmRemovingRequest","cancelRemovingRequest","action","showRemoveActions","firstLevelBlocksCount","buttonsOpened","actionsOpened","wrappersOffset","storedSelection","showInlineToolbar","selectedText","getSelectionText","showButtons","getWrappersOffset","newCoordinateX","newCoordinateY","coords","getSelectionCoords","offsetHeight","x","left","y","scrollY","top","closeButtons","closeAction","createLinkAction","defaultToolAction","forEach","hightlight","offset","getOffset","_x","_y","isNaN","offsetLeft","clientLeft","clientTop","offsetParent","range","sel","createRange","collapse","boundingLeft","boundingTop","rangeCount","cloneRange","getClientRects","rect","toString","showActions","inlineToolbarAnchorInputKeydown_","keyCode","editable","restoreSelection","setAnchor","value","preventDefault","stopImmediatePropagation","clearRange","isActive","isLinkActive","saveSelection","inputForLink","focus","dataType","execCommand","containerEl","preSelectionRange","selectNodeContents","setEnd","startContainer","startOffset","end","savedSel","charIndex","setStart","nextCharIndex","nodeStack","foundStart","stop","pop","removeAllRanges","addRange","queryCommandState","setButtonHighlighted","removeButtonsHighLight","tag","leaf","currentTool","barButtons","nextToolIndex","toolToSelect","visibleTool","appendCallback","UNREPLACEBLE_TOOLS","setToBlock","callbacks","enterKeyPressed","tabKeyPressed","enterKeyPressedOnRedactorZone","escapeKeyPressed","defaultKeyPressed","arrowKeyPressed","inputsAreEmpty","textContentIsEmpty","blockIsEmpty","enterPressedOnBlock","saveCurrentInputIndex","isEnterPressedOnToolbar","enableLineBreaks","stopPropagation","shiftKey","currentSelection","currentSelectedNode","caretAtTheEndOfText","atTheEnd","isTextNodeHasParentBetweenContenteditable","islastNode","detectWhenClickedOnFirstLevelBlockArea","firstLevelBlock","indexOfLastInput","inputIsEmpty","currentNodeType","isInitialType","flag","blockRightOrDownArrowPressed","backspacePressed","blockLeftOrUpArrowPressed","focusedNodeHolder","focusedNode","editableElementIndex","lastChild","deepestTextnode","caretInLastChild","firstChild","caretInFirstChild","caretAtTheBeginning","setToPreviousBlock","selectionLength","isNativeInput","endOffset","atStart","_blockPasteCallback","observer","MutationObserver","handleMutationsOnPaste","attributes","childList","characterData","subtree","observe","editableParent","cleanData","fragment","htmlData","clipboardData","getData","plainData","createDocumentFragment","innerText","lastNode","allowRenderOnPaste","pasted","deleteContents","insertNode","setStartAfter","mutations","self","currentToolType","nativeInputAreas","ceBlock","bar","toggler","classname","toolIcon","toolTitle","properties","focusedNodeIndex","nodeToSet","childs","nextInput","emptyTextElement","lastChildNode","lengthOfLastChildNode","previousInput","pluginsRender","isFirstNode","isOffsetZero","addToQueue","splice","holder","errorThrown","errorMsg","notification","message","constructorSettings","create","time","okBtn","cancelBtn","okMsg","cancelMsg","confirmHandler","cancelHandler","confirm","cancel","inputField","clear","insertPastedContent","janitor","tags","a","href","rel","b","strong","em","span","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","HTMLJanitor","tagDefinitions","validConfigValues","k","every","isBlockElement","blockElementNames","nodeName","isInlineElement","inlineElementNames","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","SHOW_COMMENT","getAllowedAttrs","shouldRejectNode","allowedAttrs","shouldRejectAttr","attr","attrName","toLowerCase","sandbox","_sanitize","treeWalker","_sanitized","Node","TEXT_NODE","COMMENT_NODE","containsBlockElement","isInline","some","isNotTopContainer","isNestedBlockElement","isInvalid","keepNestedBlockElements","removeAttribute","previousElementSibling","nextElementSibling","newAnchor","rusToTranslit","blur","string","ru","en","split","join","replace","allListeners","search","byElement","context","listenersOnElement","listener","byType","eventType","listenersWithType","byHandler","handler","listenersWithHandler","one","all","isCapture","addEventListener","alreadyAddedListener","removeEventListener","existingListeners","removeAll","get","removeNodes","destroyPlugins","destroy","destroyScripts","scripts","getElementsByTagName","patterns","renderOnPastePatterns","isArray","pattern","clipBoardData","analize","execArray","regex","exec","match","pasteToNewBlock_"],"mappings":"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","file":"codex-editor.js","sourcesContent":["var codex = codex || {}; codex[\"editor\"] =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t *\n\t * Codex Editor\n\t *\n\t * @author Codex Team\n\t */\n\t\n\tmodule.exports = function (editor) {\n\t\n\t    'use strict';\n\t\n\t    editor.version = (\"1.5.4\");\n\t    editor.scriptPrefix = 'cdx-script-';\n\t\n\t    var init = function init() {\n\t\n\t        editor.core = __webpack_require__(1);\n\t        editor.tools = __webpack_require__(2);\n\t        editor.ui = __webpack_require__(3);\n\t        editor.transport = __webpack_require__(4);\n\t        editor.renderer = __webpack_require__(5);\n\t        editor.saver = __webpack_require__(6);\n\t        editor.content = __webpack_require__(7);\n\t        editor.toolbar = __webpack_require__(8);\n\t        editor.callback = __webpack_require__(12);\n\t        editor.draw = __webpack_require__(13);\n\t        editor.caret = __webpack_require__(14);\n\t        editor.notifications = __webpack_require__(15);\n\t        editor.parser = __webpack_require__(16);\n\t        editor.sanitizer = __webpack_require__(17);\n\t        editor.anchors = __webpack_require__(19);\n\t        editor.listeners = __webpack_require__(20);\n\t        editor.destroyer = __webpack_require__(21);\n\t        editor.paste = __webpack_require__(22);\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * holds initial settings\n\t     */\n\t    editor.settings = {\n\t        tools: ['paragraph', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n\t        textareaId: 'codex-editor',\n\t        uploadImagesUrl: '/editor/transport/',\n\t\n\t        // Type of block showing on empty editor\n\t        initialBlockPlugin: 'paragraph'\n\t    };\n\t\n\t    /**\n\t     * public\n\t     *\n\t     * Static nodes\n\t     */\n\t    editor.nodes = {\n\t        textarea: null,\n\t        wrapper: null,\n\t        toolbar: null,\n\t        inlineToolbar: {\n\t            wrapper: null,\n\t            buttons: null,\n\t            actions: null\n\t        },\n\t        toolbox: null,\n\t        notifications: null,\n\t        plusButton: null,\n\t        showSettingsButton: null,\n\t        showTrashButton: null,\n\t        blockSettings: null,\n\t        pluginSettings: null,\n\t        defaultSettings: null,\n\t        toolbarButtons: {}, // { type : DomEl, ... }\n\t        redactor: null\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * Output state\n\t     */\n\t    editor.state = {\n\t        jsonOutput: [],\n\t        blocks: [],\n\t        inputs: []\n\t    };\n\t\n\t    /**\n\t    * @public\n\t    * Editor plugins\n\t    */\n\t    editor.tools = {};\n\t\n\t    /**\n\t     * Initialization\n\t     * @uses Promise cEditor.core.prepare\n\t     * @param {} userSettings are :\n\t     *          - tools [],\n\t     *          - textareaId String\n\t     *          ...\n\t     *\n\t     * Load user defined tools\n\t     * Tools must contain this important objects :\n\t     *  @param {String} type - this is a type of plugin. It can be used as plugin name\n\t     *  @param {String} iconClassname - this a icon in toolbar\n\t     *  @param {Object} make - what should plugin do, when it is clicked\n\t     *  @param {Object} appendCallback - callback after clicking\n\t     *  @param {Element} settings - what settings does it have\n\t     *  @param {Object} render - plugin get JSON, and should return HTML\n\t     *  @param {Object} save - plugin gets HTML content, returns JSON\n\t     *  @param {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n\t     *  @param {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n\t     *\n\t     * @example\n\t     *   -  type             : 'header',\n\t     *   -  iconClassname    : 'ce-icon-header',\n\t     *   -  make             : headerTool.make,\n\t     *   -  appendCallback   : headerTool.appendCallback,\n\t     *   -  settings         : headerTool.makeSettings(),\n\t     *   -  render           : headerTool.render,\n\t     *   -  save             : headerTool.save,\n\t     *   -  displayInToolbox : true,\n\t     *   -  enableLineBreaks : false\n\t     */\n\t    editor.start = function (userSettings) {\n\t\n\t        init();\n\t\n\t        editor.core.prepare(userSettings)\n\t\n\t        // If all ok, make UI, bind events and parse initial-content\n\t        .then(editor.ui.make).then(editor.ui.bindEvents).then(editor.tools.prepare).then(editor.paste.prepare).then(editor.transport.prepare).then(editor.renderer.makeBlocksFromData).then(editor.ui.saveInputs).catch(function (error) {\n\t\n\t            editor.core.log('Initialization failed with error: %o', 'warn', error);\n\t        });\n\t    };\n\t\n\t    return editor;\n\t}({});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Codex Editor Core\n\t *\n\t * @author Codex Team\n\t * @version 1.1.3\n\t */\n\t\n\tmodule.exports = function (core) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * Editor preparing method\n\t     * @return Promise\n\t     */\n\t    core.prepare = function (userSettings) {\n\t\n\t        return new Promise(function (resolve, reject) {\n\t\n\t            if (userSettings) {\n\t\n\t                editor.settings.tools = userSettings.tools || editor.settings.tools;\n\t            }\n\t\n\t            if (userSettings.data) {\n\t\n\t                editor.state.blocks = userSettings.data;\n\t            }\n\t\n\t            if (userSettings.initialBlockPlugin) {\n\t\n\t                editor.settings.initialBlockPlugin = userSettings.initialBlockPlugin;\n\t            }\n\t\n\t            editor.hideToolbar = userSettings.hideToolbar;\n\t\n\t            editor.nodes.textarea = document.getElementById(userSettings.textareaId || editor.settings.textareaId);\n\t\n\t            if (_typeof(editor.nodes.textarea) === undefined || editor.nodes.textarea === null) {\n\t\n\t                reject(Error(\"Textarea wasn't found by ID: #\" + userSettings.textareaId));\n\t            } else {\n\t\n\t                resolve();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Logging method\n\t     * @param type = ['log', 'info', 'warn']\n\t     */\n\t    core.log = function (msg, type, arg) {\n\t\n\t        type = type || 'log';\n\t\n\t        if (!arg) {\n\t\n\t            arg = msg || 'undefined';\n\t            msg = '[codex-editor]:      %o';\n\t        } else {\n\t\n\t            msg = '[codex-editor]:      ' + msg;\n\t        }\n\t\n\t        try {\n\t\n\t            if ('console' in window && window.console[type]) {\n\t\n\t                if (arg) window.console[type](msg, arg);else window.console[type](msg);\n\t            }\n\t        } catch (e) {}\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Helper for insert one element after another\n\t     */\n\t    core.insertAfter = function (target, element) {\n\t\n\t        target.parentNode.insertBefore(element, target.nextSibling);\n\t    };\n\t\n\t    /**\n\t     * @const\n\t     *\n\t     * Readable DOM-node types map\n\t     */\n\t    core.nodeTypes = {\n\t        TAG: 1,\n\t        TEXT: 3,\n\t        COMMENT: 8\n\t    };\n\t\n\t    /**\n\t     * @const\n\t     * Readable keys map\n\t     */\n\t    core.keys = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, DOWN: 40, RIGHT: 39, DELETE: 46, META: 91 };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Check object for DOM node\n\t     */\n\t    core.isDomNode = function (el) {\n\t\n\t        return el && (typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' && el.nodeType && el.nodeType == this.nodeTypes.TAG;\n\t    };\n\t\n\t    /**\n\t    * Checks passed object for emptiness\n\t    * @require ES5 - Object.keys\n\t    * @param {object}\n\t    */\n\t    core.isEmpty = function (obj) {\n\t\n\t        return Object.keys(obj).length === 0;\n\t    };\n\t\n\t    /**\n\t     * Native Ajax\n\t     */\n\t    core.ajax = function (settings) {\n\t\n\t        if (!settings || !settings.url) {\n\t\n\t            return;\n\t        }\n\t\n\t        var XMLHTTP = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t            successFunction = function successFunction() {},\n\t            encodedString,\n\t            isFormData,\n\t            prop;\n\t\n\t        settings.async = true;\n\t        settings.type = settings.type || 'GET';\n\t        settings.data = settings.data || '';\n\t        settings['content-type'] = settings['content-type'] || 'application/json; charset=utf-8';\n\t        successFunction = settings.success || successFunction;\n\t\n\t        if (settings.type == 'GET' && settings.data) {\n\t\n\t            settings.url = /\\?/.test(settings.url) ? settings.url + '&' + settings.data : settings.url + '?' + settings.data;\n\t        } else {\n\t\n\t            encodedString = '';\n\t            for (prop in settings.data) {\n\t\n\t                encodedString += prop + '=' + encodeURIComponent(settings.data[prop]) + '&';\n\t            }\n\t        }\n\t\n\t        if (settings.withCredentials) {\n\t\n\t            XMLHTTP.withCredentials = true;\n\t        }\n\t\n\t        if (settings.beforeSend && typeof settings.beforeSend == 'function') {\n\t\n\t            settings.beforeSend.call();\n\t        }\n\t\n\t        XMLHTTP.open(settings.type, settings.url, settings.async);\n\t\n\t        /**\n\t         * If we send FormData, we need no content-type header\n\t         */\n\t        isFormData = isFormData_(settings.data);\n\t\n\t        if (!isFormData) {\n\t\n\t            if (settings.type != 'POST') {\n\t\n\t                XMLHTTP.setRequestHeader('Content-type', settings['content-type']);\n\t            } else {\n\t\n\t                XMLHTTP.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\t            }\n\t        }\n\t\n\t        XMLHTTP.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\n\t        XMLHTTP.onreadystatechange = function () {\n\t\n\t            if (XMLHTTP.readyState == 4 && XMLHTTP.status == 200) {\n\t\n\t                successFunction(XMLHTTP.responseText);\n\t            }\n\t        };\n\t\n\t        if (isFormData) {\n\t\n\t            // Sending FormData\n\t            XMLHTTP.send(settings.data);\n\t        } else {\n\t\n\t            // POST requests\n\t            XMLHTTP.send(encodedString);\n\t        }\n\t    };\n\t\n\t    /**\n\t    * Appends script to head of document\n\t    * @return Promise\n\t    */\n\t    core.importScript = function (scriptPath, instanceName) {\n\t\n\t        return new Promise(function (resolve, reject) {\n\t\n\t            var script = void 0;\n\t\n\t            /** Script is already loaded */\n\t            if (!instanceName) {\n\t\n\t                reject('Instance name is missed');\n\t            } else if (document.getElementById(editor.scriptPrefix + instanceName)) {\n\t\n\t                resolve(scriptPath);\n\t            }\n\t\n\t            script = document.createElement('SCRIPT');\n\t            script.async = true;\n\t            script.defer = true;\n\t            script.id = editor.scriptPrefix + instanceName;\n\t\n\t            script.onload = function () {\n\t\n\t                resolve(scriptPath);\n\t            };\n\t\n\t            script.onerror = function () {\n\t\n\t                reject(scriptPath);\n\t            };\n\t\n\t            script.src = scriptPath;\n\t            document.head.appendChild(script);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Function for checking is it FormData object to send.\n\t     * @param {Object} object to check\n\t     * @return boolean\n\t     */\n\t    var isFormData_ = function isFormData_(object) {\n\t\n\t        return object instanceof FormData;\n\t    };\n\t\n\t    return core;\n\t}({});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t* Module working with plugins\n\t*/\n\tmodule.exports = function () {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Initialize plugins before using\n\t     * Ex. Load scripts or call some internal methods\n\t     * @return Promise\n\t     */\n\t    function prepare() {\n\t\n\t        return new Promise(function (resolve_, reject_) {\n\t\n\t            Promise.resolve()\n\t\n\t            /**\n\t            * Compose a sequence of plugins that requires preparation\n\t            */\n\t            .then(function () {\n\t\n\t                var pluginsRequiresPreparation = [],\n\t                    allPlugins = editor.tools;\n\t\n\t                for (var pluginName in allPlugins) {\n\t\n\t                    var plugin = allPlugins[pluginName];\n\t\n\t                    if (plugin.prepare && typeof plugin.prepare != 'function' || !plugin.prepare) {\n\t\n\t                        continue;\n\t                    }\n\t\n\t                    pluginsRequiresPreparation.push(plugin);\n\t                }\n\t\n\t                /**\n\t                * If no one passed plugins requires preparation, finish prepare() and go ahead\n\t                */\n\t                if (!pluginsRequiresPreparation.length) {\n\t\n\t                    resolve_();\n\t                }\n\t\n\t                return pluginsRequiresPreparation;\n\t            })\n\t\n\t            /** Wait plugins while they prepares */\n\t            .then(waitAllPluginsPreparation_).then(function () {\n\t\n\t                editor.core.log('Plugins loaded', 'info');\n\t                resolve_();\n\t            }).catch(function (error) {\n\t\n\t                reject_(error);\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t    * @param {array} plugins - list of tools that requires preparation\n\t    * @return {Promise} resolved while all plugins will be ready or failed\n\t    */\n\t    function waitAllPluginsPreparation_(plugins) {\n\t\n\t        /**\n\t        * @calls allPluginsProcessed__ when all plugins prepared or failed\n\t        */\n\t        return new Promise(function (allPluginsProcessed__) {\n\t\n\t            /**\n\t             * pluck each element from queue\n\t             * First, send resolved Promise as previous value\n\t             * Each plugins \"prepare\" method returns a Promise, that's why\n\t             * reduce current element will not be able to continue while can't get\n\t             * a resolved Promise\n\t             *\n\t             * If last plugin is \"prepared\" then go to the next stage of initialization\n\t             */\n\t            plugins.reduce(function (previousValue, plugin, iteration) {\n\t\n\t                return previousValue.then(function () {\n\t\n\t                    /**\n\t                    * Wait till plugins prepared\n\t                    * @calls pluginIsReady__ when plugin is ready or failed\n\t                    */\n\t                    return new Promise(function (pluginIsReady__) {\n\t\n\t                        callPluginsPrepareMethod_(plugin).then(pluginIsReady__).then(function () {\n\t\n\t                            plugin.available = true;\n\t                        }).catch(function (error) {\n\t\n\t                            editor.core.log('Plugin \\xAB' + plugin.type + '\\xBB was not loaded. Preparation failed because %o', 'warn', error);\n\t                            plugin.available = false;\n\t                            plugin.loadingMessage = error;\n\t\n\t                            /** Go ahead even some plugin has problems */\n\t                            pluginIsReady__();\n\t                        }).then(function () {\n\t\n\t                            /** If last plugin has problems then just ignore and continue */\n\t                            if (iteration == plugins.length - 1) {\n\t\n\t                                allPluginsProcessed__();\n\t                            }\n\t                        });\n\t                    });\n\t                });\n\t            }, Promise.resolve());\n\t        });\n\t    }\n\t\n\t    var callPluginsPrepareMethod_ = function callPluginsPrepareMethod_(plugin) {\n\t\n\t        return plugin.prepare(plugin.config || {});\n\t    };\n\t\n\t    return {\n\t        prepare: prepare\n\t    };\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor UI module\n\t *\n\t * @author Codex Team\n\t * @version 1.2.0\n\t */\n\t\n\tmodule.exports = function (ui) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Basic editor classnames\n\t     */\n\t    ui.className = {\n\t\n\t        /**\n\t         * @const {string} BLOCK_CLASSNAME - redactor blocks name\n\t         */\n\t        BLOCK_CLASSNAME: 'ce-block',\n\t\n\t        /**\n\t         * @const {String} wrapper for plugins content\n\t         */\n\t        BLOCK_CONTENT: 'ce-block__content',\n\t\n\t        /**\n\t         * @const {String} BLOCK_STRETCHED - makes block stretched\n\t         */\n\t        BLOCK_STRETCHED: 'ce-block--stretched',\n\t\n\t        /**\n\t         * @const {String} BLOCK_HIGHLIGHTED - adds background\n\t         */\n\t        BLOCK_HIGHLIGHTED: 'ce-block--focused',\n\t\n\t        /**\n\t         * @const {String} - highlights covered blocks\n\t         */\n\t        BLOCK_IN_FEED_MODE: 'ce-block--feed-mode',\n\t\n\t        /**\n\t         * @const {String} - Block with anchor\n\t         */\n\t        BLOCK_WITH_ANCHOR: 'ce-block--anchor',\n\t\n\t        /**\n\t         * @const {String} - for all default settings\n\t         */\n\t        SETTINGS_ITEM: 'ce-settings__item'\n\t\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Making main interface\n\t     */\n\t    ui.make = function () {\n\t\n\t        return new Promise(function (resolve) {\n\t\n\t            var wrapper = editor.draw.wrapper(),\n\t                redactor = editor.draw.redactor(),\n\t                toolbar = makeToolBar_();\n\t\n\t            wrapper.appendChild(toolbar);\n\t            wrapper.appendChild(redactor);\n\t\n\t            /** Save created ui-elements to static nodes state */\n\t            editor.nodes.wrapper = wrapper;\n\t            editor.nodes.redactor = redactor;\n\t\n\t            /** Append editor wrapper with redactor zone  after initial textarea */\n\t            editor.core.insertAfter(editor.nodes.textarea, wrapper);\n\t\n\t            resolve();\n\t        })\n\t\n\t        /** Add toolbox tools */\n\t        .then(addTools_)\n\t\n\t        /** Make container for inline toolbar */\n\t        .then(makeInlineToolbar_)\n\t\n\t        /** Add inline toolbar tools */\n\t        .then(addInlineToolbarTools_)\n\t\n\t        /** Draw wrapper for notifications */\n\t        .then(makeNotificationHolder_)\n\t\n\t        /** fill in default settings */\n\t        .then(editor.toolbar.settings.addDefaultSettings).catch(function () {\n\t\n\t            editor.core.log(\"Can't draw editor interface\");\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Draws inline toolbar zone\n\t     */\n\t    var makeInlineToolbar_ = function makeInlineToolbar_() {\n\t\n\t        var container = editor.draw.inlineToolbar();\n\t\n\t        /** Append to redactor new inline block */\n\t        editor.nodes.inlineToolbar.wrapper = container;\n\t\n\t        /** Draw toolbar buttons */\n\t        editor.nodes.inlineToolbar.buttons = editor.draw.inlineToolbarButtons();\n\t\n\t        /** Buttons action or settings */\n\t        editor.nodes.inlineToolbar.actions = editor.draw.inlineToolbarActions();\n\t\n\t        /** Append to inline toolbar buttons as part of it */\n\t        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.buttons);\n\t        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.actions);\n\t\n\t        editor.nodes.wrapper.appendChild(editor.nodes.inlineToolbar.wrapper);\n\t    };\n\t\n\t    var makeToolBar_ = function makeToolBar_() {\n\t\n\t        var toolbar = editor.draw.toolbar(),\n\t            blockButtons = makeToolbarSettings_(),\n\t            toolbarContent = makeToolbarContent_();\n\t\n\t        /** Appending first-level block buttons */\n\t        toolbar.appendChild(blockButtons);\n\t\n\t        /** Append toolbarContent to toolbar */\n\t        toolbar.appendChild(toolbarContent);\n\t\n\t        /** Make toolbar global */\n\t        editor.nodes.toolbar = toolbar;\n\t\n\t        return toolbar;\n\t    };\n\t\n\t    var makeToolbarContent_ = function makeToolbarContent_() {\n\t\n\t        var toolbarContent = editor.draw.toolbarContent(),\n\t            toolbox = editor.draw.toolbox(),\n\t            plusButton = editor.draw.plusButton();\n\t\n\t        /** Append plus button */\n\t        toolbarContent.appendChild(plusButton);\n\t\n\t        /** Appending toolbar tools */\n\t        toolbarContent.appendChild(toolbox);\n\t\n\t        /** Make Toolbox and plusButton global */\n\t        editor.nodes.toolbox = toolbox;\n\t        editor.nodes.plusButton = plusButton;\n\t\n\t        return toolbarContent;\n\t    };\n\t\n\t    var makeToolbarSettings_ = function makeToolbarSettings_() {\n\t\n\t        var blockSettings = editor.draw.blockSettings(),\n\t            blockButtons = editor.draw.blockButtons(),\n\t            defaultSettings = editor.draw.defaultSettings(),\n\t            showSettingsButton = editor.draw.settingsButton(),\n\t            showTrashButton = editor.toolbar.settings.makeRemoveBlockButton(),\n\t            pluginSettings = editor.draw.pluginsSettings();\n\t\n\t        /** Add default and plugins settings */\n\t        blockSettings.appendChild(pluginSettings);\n\t        blockSettings.appendChild(defaultSettings);\n\t\n\t        /**\n\t         * Make blocks buttons\n\t         * This block contains settings button and remove block button\n\t         */\n\t        blockButtons.appendChild(showSettingsButton);\n\t        blockButtons.appendChild(showTrashButton);\n\t        blockButtons.appendChild(blockSettings);\n\t\n\t        /** Make BlockSettings, PluginSettings, DefaultSettings global */\n\t        editor.nodes.blockSettings = blockSettings;\n\t        editor.nodes.pluginSettings = pluginSettings;\n\t        editor.nodes.defaultSettings = defaultSettings;\n\t        editor.nodes.showSettingsButton = showSettingsButton;\n\t        editor.nodes.showTrashButton = showTrashButton;\n\t\n\t        return blockButtons;\n\t    };\n\t\n\t    /** Draw notifications holder */\n\t    var makeNotificationHolder_ = function makeNotificationHolder_() {\n\t\n\t        /** Append block with notifications to the document */\n\t        editor.nodes.notifications = editor.notifications.createHolder();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Append tools passed in editor.tools\n\t     */\n\t    var addTools_ = function addTools_() {\n\t\n\t        var tool, toolName, toolButton;\n\t\n\t        for (toolName in editor.settings.tools) {\n\t\n\t            tool = editor.settings.tools[toolName];\n\t\n\t            editor.tools[toolName] = tool;\n\t\n\t            if (!tool.iconClassname && tool.displayInToolbox) {\n\t\n\t                editor.core.log('Toolbar icon classname missed. Tool %o skipped', 'warn', toolName);\n\t                continue;\n\t            }\n\t\n\t            if (typeof tool.render != 'function') {\n\t\n\t                editor.core.log('render method missed. Tool %o skipped', 'warn', toolName);\n\t                continue;\n\t            }\n\t\n\t            if (!tool.displayInToolbox) {\n\t\n\t                continue;\n\t            } else {\n\t\n\t                /** if tools is for toolbox */\n\t                toolButton = editor.draw.toolbarButton(toolName, tool.iconClassname);\n\t\n\t                editor.nodes.toolbox.appendChild(toolButton);\n\t\n\t                editor.nodes.toolbarButtons[toolName] = toolButton;\n\t            }\n\t        }\n\t    };\n\t\n\t    var addInlineToolbarTools_ = function addInlineToolbarTools_() {\n\t\n\t        var tools = {\n\t\n\t            bold: {\n\t                icon: 'ce-icon-bold',\n\t                command: 'bold'\n\t            },\n\t\n\t            italic: {\n\t                icon: 'ce-icon-italic',\n\t                command: 'italic'\n\t            },\n\t\n\t            underline: {\n\t                icon: 'ce-icon-underline',\n\t                command: 'underline'\n\t            },\n\t\n\t            link: {\n\t                icon: 'ce-icon-link',\n\t                command: 'createLink'\n\t            }\n\t        };\n\t\n\t        var toolButton, tool;\n\t\n\t        for (var name in tools) {\n\t\n\t            tool = tools[name];\n\t\n\t            toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n\t\n\t            editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n\t            /**\n\t             * Add callbacks to this buttons\n\t             */\n\t            editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     * Bind editor UI events\n\t     */\n\t    ui.bindEvents = function () {\n\t\n\t        editor.core.log('ui.bindEvents fired', 'info');\n\t\n\t        // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n\t        //     editor.notifications.errorThrown(errorMsg, event);\n\t        // }, false );\n\t\n\t        /** All keydowns on Document */\n\t        editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n\t\n\t        /** All keydowns on Redactor zone */\n\t        editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n\t\n\t        /** All keydowns on Document */\n\t        editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false);\n\t\n\t        /**\n\t         * Mouse click to radactor\n\t         */\n\t        editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false);\n\t\n\t        /**\n\t         * Clicks to the Plus button\n\t         */\n\t        editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n\t\n\t        /**\n\t         * Clicks to SETTINGS button in toolbar\n\t         */\n\t        editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false);\n\t\n\t        /** Bind click listeners on toolbar buttons */\n\t        for (var button in editor.nodes.toolbarButtons) {\n\t\n\t            editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n\t        }\n\t    };\n\t\n\t    ui.addBlockHandlers = function (block) {\n\t\n\t        if (!block) return;\n\t\n\t        /**\n\t         * Block keydowns\n\t         */\n\t        editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n\t\n\t        /**\n\t         * Pasting content from another source\n\t         * We have two type of sanitization\n\t         * First - uses deep-first search algorithm to get sub nodes,\n\t         * sanitizes whole Block_content and replaces cleared nodes\n\t         * This method is deprecated\n\t         * Method is used in editor.callback.blockPaste(event)\n\t         *\n\t         * Secont - uses Mutation observer.\n\t         * Observer \"observe\" DOM changes and send changings to callback.\n\t         * Callback gets changed node, not whole Block_content.\n\t         * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n\t         *\n\t         * Method is used in editor.callback.blockPasteViaSanitize(event)\n\t         *\n\t         * @uses html-janitor\n\t         * @example editor.callback.blockPasteViaSanitize(event), the second method.\n\t         *\n\t         */\n\t        editor.listeners.add(block, 'paste', editor.callback.blockPasteCallback, false);\n\t\n\t        editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n\t    };\n\t\n\t    /** getting all contenteditable elements */\n\t    ui.saveInputs = function () {\n\t\n\t        var redactor = editor.nodes.redactor;\n\t\n\t        editor.state.inputs = [];\n\t\n\t        /** Save all inputs in global variable state */\n\t        var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n\t\n\t        Array.prototype.map.call(inputs, function (current) {\n\t\n\t            if (!current.type || current.type == 'text' || current.type == 'textarea') {\n\t\n\t                editor.state.inputs.push(current);\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Adds first initial block on empty redactor\n\t     */\n\t    ui.addInitialBlock = function () {\n\t\n\t        var initialBlockType = editor.settings.initialBlockPlugin,\n\t            initialBlock;\n\t\n\t        if (!editor.tools[initialBlockType]) {\n\t\n\t            editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n\t            return;\n\t        }\n\t\n\t        initialBlock = editor.tools[initialBlockType].render();\n\t\n\t        initialBlock.setAttribute('data-placeholder', 'Расскажите свою историю...');\n\t\n\t        editor.content.insertBlock({\n\t            type: initialBlockType,\n\t            block: initialBlock\n\t        });\n\t\n\t        editor.content.workingNodeChanged(initialBlock);\n\t    };\n\t\n\t    ui.setInlineToolbarButtonBehaviour = function (button, type) {\n\t\n\t        editor.listeners.add(button, 'mousedown', function (event) {\n\t\n\t            editor.toolbar.inline.toolClicked(event, type);\n\t        }, false);\n\t    };\n\t\n\t    return ui;\n\t}({});\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t *\n\t * Codex.Editor Transport Module\n\t *\n\t * @copyright 2017 Codex-Team\n\t * @version 1.2.0\n\t */\n\t\n\tmodule.exports = function (transport) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @type {null} | {DOMElement} input - keeps input element in memory\n\t     */\n\t    transport.input = null;\n\t\n\t    /**\n\t     * @property {Object} arguments - keep plugin settings and defined callbacks\n\t     */\n\t    transport.arguments = null;\n\t\n\t    /**\n\t     * Prepares input element where will be files\n\t     */\n\t    transport.prepare = function () {\n\t\n\t        var input = editor.draw.node('INPUT', '', { type: 'file' });\n\t\n\t        editor.listeners.add(input, 'change', editor.transport.fileSelected);\n\t        editor.transport.input = input;\n\t    };\n\t\n\t    /** Clear input when files is uploaded */\n\t    transport.clearInput = function () {\n\t\n\t        /** Remove old input */\n\t        transport.input = null;\n\t\n\t        /** Prepare new one */\n\t        transport.prepare();\n\t    };\n\t\n\t    /**\n\t     * Callback for file selection\n\t     * @param {Event} event\n\t     */\n\t    transport.fileSelected = function () {\n\t\n\t        var input = this,\n\t            i,\n\t            files = input.files,\n\t            formData = new FormData();\n\t\n\t        if (editor.transport.arguments.multiple === false) {\n\t\n\t            formData.append('files', files[0], files[0].name);\n\t        } else {\n\t\n\t            for (i = 0; i < files.length; i++) {\n\t\n\t                formData.append('files[]', files[i], files[i].name);\n\t            }\n\t        }\n\t\n\t        editor.core.ajax({\n\t            type: 'POST',\n\t            data: formData,\n\t            url: editor.transport.arguments.url,\n\t            beforeSend: editor.transport.arguments.beforeSend,\n\t            success: editor.transport.arguments.success,\n\t            error: editor.transport.arguments.error\n\t        });\n\t\n\t        /** Clear input */\n\t        transport.clearInput();\n\t    };\n\t\n\t    /**\n\t     * Use plugin callbacks\n\t     * @protected\n\t     *\n\t     * @param {Object} args - can have :\n\t     * @param {String} args.url - fetch URL\n\t     * @param {Function} args.beforeSend - function calls before sending ajax\n\t     * @param {Function} args.success - success callback\n\t     * @param {Function} args.error - on error handler\n\t     * @param {Boolean} args.multiple - allow select several files\n\t     * @param {String} args.accept - adds accept attribute\n\t     */\n\t    transport.selectAndUpload = function (args) {\n\t\n\t        transport.arguments = args;\n\t\n\t        if (args.multiple === true) {\n\t\n\t            transport.input.setAttribute('multiple', 'multiple');\n\t        }\n\t\n\t        if (args.accept) {\n\t\n\t            transport.input.setAttribute('accept', args.accept);\n\t        }\n\t\n\t        transport.input.click();\n\t    };\n\t\n\t    return transport;\n\t}({});\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Renderer Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (renderer) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Asyncronously parses input JSON to redactor blocks\n\t     */\n\t    renderer.makeBlocksFromData = function () {\n\t\n\t        /**\n\t         * If redactor is empty, add first paragraph to start writing\n\t         */\n\t        if (editor.core.isEmpty(editor.state.blocks) || !editor.state.blocks.items.length) {\n\t\n\t            editor.ui.addInitialBlock();\n\t            return;\n\t        }\n\t\n\t        Promise.resolve()\n\t\n\t        /** First, get JSON from state */\n\t        .then(function () {\n\t\n\t            return editor.state.blocks;\n\t        })\n\t\n\t        /** Then, start to iterate they */\n\t        .then(editor.renderer.appendBlocks)\n\t\n\t        /** Write log if something goes wrong */\n\t        .catch(function (error) {\n\t\n\t            editor.core.log('Error while parsing JSON: %o', 'error', error);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Parses JSON to blocks\n\t     * @param {object} data\n\t     * @return Primise -> nodeList\n\t     */\n\t    renderer.appendBlocks = function (data) {\n\t\n\t        var blocks = data.items;\n\t\n\t        /**\n\t         * Sequence of one-by-one blocks appending\n\t         * Uses to save blocks order after async-handler\n\t         */\n\t        var nodeSequence = Promise.resolve();\n\t\n\t        for (var index = 0; index < blocks.length; index++) {\n\t\n\t            /** Add node to sequence at specified index */\n\t            editor.renderer.appendNodeAtIndex(nodeSequence, blocks, index);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Append node at specified index\n\t     */\n\t    renderer.appendNodeAtIndex = function (nodeSequence, blocks, index) {\n\t\n\t        /** We need to append node to sequence */\n\t        nodeSequence\n\t\n\t        /** first, get node async-aware */\n\t        .then(function () {\n\t\n\t            return editor.renderer.getNodeAsync(blocks, index);\n\t        })\n\t\n\t        /**\n\t         * second, compose editor-block from JSON object\n\t         */\n\t        .then(editor.renderer.createBlockFromData)\n\t\n\t        /**\n\t         * now insert block to redactor\n\t         */\n\t        .then(function (blockData) {\n\t\n\t            /**\n\t             * blockData has 'block', 'type' and 'stretched' information\n\t             */\n\t            editor.content.insertBlock(blockData);\n\t\n\t            /** Pass created block to next step */\n\t            return blockData.block;\n\t        })\n\t\n\t        /** Log if something wrong with node */\n\t        .catch(function (error) {\n\t\n\t            editor.core.log('Node skipped while parsing because %o', 'error', error);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Asynchronously returns block data from blocksList by index\n\t     * @return Promise to node\n\t     */\n\t    renderer.getNodeAsync = function (blocksList, index) {\n\t\n\t        return Promise.resolve().then(function () {\n\t\n\t            return {\n\t                tool: blocksList[index],\n\t                position: index\n\t            };\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Creates editor block by JSON-data\n\t     *\n\t     * @uses render method of each plugin\n\t     *\n\t     * @param {Object} toolData.tool\n\t     *                              { header : {\n\t     *                                                text: '',\n\t     *                                                type: 'H3', ...\n\t     *                                            }\n\t     *                               }\n\t     * @param {Number} toolData.position - index in input-blocks array\n\t     * @return {Object} with type and Element\n\t     */\n\t    renderer.createBlockFromData = function (toolData) {\n\t\n\t        /** New parser */\n\t        var block,\n\t            tool = toolData.tool,\n\t            pluginName = tool.type,\n\t            anchor = tool.anchor,\n\t            cover = tool.cover;\n\t\n\t        /** Get first key of object that stores plugin name */\n\t        // for (var pluginName in blockData) break;\n\t\n\t        /** Check for plugin existance */\n\t        if (!editor.tools[pluginName]) {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB not found');\n\t        }\n\t\n\t        /** Check for plugin having render method */\n\t        if (typeof editor.tools[pluginName].render != 'function') {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB must have \\xABrender\\xBB method');\n\t        }\n\t\n\t        if (editor.tools[pluginName].available === false) {\n\t\n\t            block = editor.draw.unavailableBlock();\n\t\n\t            block.innerHTML = editor.tools[pluginName].loadingMessage;\n\t\n\t            /**\n\t            * Saver will extract data from initial block data by position in array\n\t            */\n\t            block.dataset.inputPosition = toolData.position;\n\t        } else {\n\t\n\t            /** New Parser */\n\t            block = editor.tools[pluginName].render(tool.data);\n\t        }\n\t\n\t        /** is first-level block stretched */\n\t        var stretched = editor.tools[pluginName].isStretched || false;\n\t\n\t        /** Retrun type and block */\n\t        return {\n\t            type: pluginName,\n\t            block: block,\n\t            stretched: stretched,\n\t            cover: cover,\n\t            anchor: anchor\n\t        };\n\t    };\n\t\n\t    return renderer;\n\t}({});\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Saver\n\t *\n\t * @author Codex Team\n\t * @version 1.0.2\n\t */\n\t\n\tmodule.exports = function (saver) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Saves blocks\n\t     * @private\n\t     */\n\t    saver.saveBlocks = function () {\n\t\n\t        /** Save html content of redactor to memory */\n\t        editor.state.html = editor.nodes.redactor.innerHTML;\n\t\n\t        /** Empty jsonOutput state */\n\t        editor.state.jsonOutput = [];\n\t\n\t        Promise.resolve().then(function () {\n\t\n\t            return editor.nodes.redactor.childNodes;\n\t        })\n\t        /** Making a sequence from separate blocks */\n\t        .then(editor.saver.makeQueue).then(function () {\n\t            // editor.nodes.textarea.innerHTML = editor.state.html;\n\t        }).catch(function (error) {\n\t\n\t            editor.core.log(error);\n\t        });\n\t    };\n\t\n\t    saver.makeQueue = function (blocks) {\n\t\n\t        var queue = Promise.resolve();\n\t\n\t        for (var index = 0; index < blocks.length; index++) {\n\t\n\t            /** Add node to sequence at specified index */\n\t            editor.saver.getBlockData(queue, blocks, index);\n\t        }\n\t    };\n\t\n\t    /** Gets every block and makes From Data */\n\t    saver.getBlockData = function (queue, blocks, index) {\n\t\n\t        queue.then(function () {\n\t\n\t            return editor.saver.getNodeAsync(blocks, index);\n\t        }).then(editor.saver.makeFormDataFromBlocks);\n\t    };\n\t\n\t    /**\n\t     * Asynchronously returns block data from blocksList by index\n\t     * @return Promise to node\n\t     */\n\t    saver.getNodeAsync = function (blocksList, index) {\n\t\n\t        return Promise.resolve().then(function () {\n\t\n\t            return blocksList[index];\n\t        });\n\t    };\n\t\n\t    saver.makeFormDataFromBlocks = function (block) {\n\t\n\t        var pluginName = block.dataset.tool,\n\t            anchor = block.dataset.anchor;\n\t\n\t        /** Check for plugin existance */\n\t        if (!editor.tools[pluginName]) {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB not found');\n\t        }\n\t\n\t        /** Check for plugin having render method */\n\t        if (typeof editor.tools[pluginName].save != 'function') {\n\t\n\t            throw Error('Plugin \\xAB' + pluginName + '\\xBB must have save method');\n\t        }\n\t\n\t        /** Result saver */\n\t        var blockContent = block.childNodes[0],\n\t            pluginsContent = blockContent.childNodes[0],\n\t            savedData,\n\t            position,\n\t            output,\n\t            coverFlag = false;\n\t\n\t        /** If plugin wasn't available then return data from cache */\n\t        if (editor.tools[pluginName].available === false) {\n\t\n\t            position = pluginsContent.dataset.inputPosition;\n\t\n\t            savedData = codex.editor.state.blocks.items[position].data;\n\t            coverFlag = codex.editor.state.blocks.items[position].cover;\n\t            anchor = codex.editor.state.blocks.items[position].anchor;\n\t        } else {\n\t\n\t            savedData = editor.tools[pluginName].save(pluginsContent);\n\t            coverFlag = block.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE);\n\t\n\t            if (editor.tools[pluginName].validate) {\n\t\n\t                var result = editor.tools[pluginName].validate(savedData);\n\t\n\t                /**\n\t                 * Do not allow invalid data\n\t                 */\n\t                if (!result) return;\n\t            }\n\t        }\n\t\n\t        output = {\n\t            type: pluginName,\n\t            anchor: anchor,\n\t            data: savedData\n\t        };\n\t\n\t        /** Marks Blocks that will be in main page */\n\t        output.cover = coverFlag;\n\t\n\t        editor.state.jsonOutput.push(output);\n\t    };\n\t\n\t    return saver;\n\t}({});\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Content Module\n\t * Works with DOM\n\t *\n\t * @author Codex Team\n\t * @version 1.3.12\n\t */\n\t\n\tmodule.exports = function (content) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * Links to current active block\n\t     * @type {null | Element}\n\t     */\n\t    content.currentNode = null;\n\t\n\t    /**\n\t     * clicked in redactor area\n\t     * @type {null | Boolean}\n\t     */\n\t    content.editorAreaHightlighted = null;\n\t\n\t    /**\n\t     * Synchronizes redactor with original textarea\n\t     */\n\t    content.sync = function () {\n\t\n\t        editor.core.log('syncing...');\n\t\n\t        /**\n\t         * Save redactor content to editor.state\n\t         */\n\t        editor.state.html = editor.nodes.redactor.innerHTML;\n\t    };\n\t\n\t    /**\n\t     * @deprecated\n\t     */\n\t    content.getNodeFocused = function () {\n\t\n\t        var selection = window.getSelection(),\n\t            focused;\n\t\n\t        if (selection.anchorNode === null) {\n\t\n\t            return null;\n\t        }\n\t\n\t        if (selection.anchorNode.nodeType == editor.core.nodeTypes.TAG) {\n\t\n\t            focused = selection.anchorNode;\n\t        } else {\n\t\n\t            focused = selection.focusNode.parentElement;\n\t        }\n\t\n\t        if (!editor.parser.isFirstLevelBlock(focused)) {\n\t\n\t            /** Iterate with parent nodes to find first-level*/\n\t            var parent = focused.parentNode;\n\t\n\t            while (parent && !editor.parser.isFirstLevelBlock(parent)) {\n\t\n\t                parent = parent.parentNode;\n\t            }\n\t\n\t            focused = parent;\n\t        }\n\t\n\t        if (focused != editor.nodes.redactor) {\n\t\n\t            return focused;\n\t        }\n\t\n\t        return null;\n\t    };\n\t\n\t    /**\n\t     * Appends background to the block\n\t     */\n\t    content.markBlock = function () {\n\t\n\t        editor.content.currentNode.classList.add(editor.ui.className.BLOCK_HIGHLIGHTED);\n\t    };\n\t\n\t    /**\n\t     * Clear background\n\t     */\n\t    content.clearMark = function () {\n\t\n\t        if (editor.content.currentNode) {\n\t\n\t            editor.content.currentNode.classList.remove(editor.ui.className.BLOCK_HIGHLIGHTED);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Finds first-level block\n\t     * @param {Element} node - selected or clicked in redactors area node\n\t     */\n\t    content.getFirstLevelBlock = function (node) {\n\t\n\t        if (!editor.core.isDomNode(node)) {\n\t\n\t            node = node.parentNode;\n\t        }\n\t\n\t        if (node === editor.nodes.redactor || node === document.body) {\n\t\n\t            return null;\n\t        } else {\n\t\n\t            while (!node.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\t\n\t                node = node.parentNode;\n\t            }\n\t\n\t            return node;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger this event when working node changed\n\t     * @param {Element} targetNode - first-level of this node will be current\n\t     * If targetNode is first-level then we set it as current else we look for parents to find first-level\n\t     */\n\t    content.workingNodeChanged = function (targetNode) {\n\t\n\t        /** Clear background from previous marked block before we change */\n\t        editor.content.clearMark();\n\t\n\t        if (!targetNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        this.currentNode = this.getFirstLevelBlock(targetNode);\n\t    };\n\t\n\t    /**\n\t     * Replaces one redactor block with another\n\t     * @protected\n\t     * @param {Element} targetBlock - block to replace. Mostly currentNode.\n\t     * @param {Element} newBlock\n\t     * @param {string} newBlockType - type of new block; we need to store it to data-attribute\n\t     *\n\t     * [!] Function does not saves old block content.\n\t     *     You can get it manually and pass with newBlock.innerHTML\n\t     */\n\t    content.replaceBlock = function (targetBlock, newBlock) {\n\t\n\t        if (!targetBlock || !newBlock) {\n\t\n\t            editor.core.log('replaceBlock: missed params');\n\t            return;\n\t        }\n\t\n\t        /** If target-block is not a frist-level block, then we iterate parents to find it */\n\t        while (!targetBlock.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\t\n\t            targetBlock = targetBlock.parentNode;\n\t        }\n\t\n\t        /**\n\t         * Check is this block was in feed\n\t         * If true, than set switched block also covered\n\t         */\n\t        if (targetBlock.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE)) {\n\t\n\t            newBlock.classList.add(editor.ui.className.BLOCK_IN_FEED_MODE);\n\t        }\n\t\n\t        if (targetBlock.classList.contains(editor.ui.className.BLOCK_WITH_ANCHOR)) {\n\t\n\t            newBlock.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\t        }\n\t\n\t        /**\n\t         * Saving anchor\n\t         */\n\t        newBlock.dataset.anchor = targetBlock.dataset.anchor;\n\t\n\t        /** Replacing */\n\t        editor.nodes.redactor.replaceChild(newBlock, targetBlock);\n\t\n\t        /**\n\t         * Set new node as current\n\t         */\n\t        editor.content.workingNodeChanged(newBlock);\n\t\n\t        /**\n\t         * Add block handlers\n\t         */\n\t        editor.ui.addBlockHandlers(newBlock);\n\t\n\t        /**\n\t         * Save changes\n\t         */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Inserts new block to redactor\n\t     * Wrapps block into a DIV with BLOCK_CLASSNAME class\n\t     *\n\t     * @param blockData          {object}\n\t     * @param blockData.block    {Element}   element with block content\n\t     * @param blockData.type     {string}    block plugin\n\t     * @param needPlaceCaret     {bool}      pass true to set caret in new block\n\t     *\n\t     */\n\t    content.insertBlock = function (blockData, needPlaceCaret) {\n\t\n\t        var workingBlock = editor.content.currentNode,\n\t            newBlockContent = blockData.block,\n\t            blockType = blockData.type,\n\t            cover = blockData.cover,\n\t            anchor = blockData.anchor,\n\t            isStretched = blockData.stretched;\n\t\n\t        var newBlock = editor.content.composeNewBlock(newBlockContent, blockType, isStretched, anchor);\n\t\n\t        if (cover === true) {\n\t\n\t            newBlock.classList.add(editor.ui.className.BLOCK_IN_FEED_MODE);\n\t        }\n\t\n\t        if (anchor) {\n\t\n\t            newBlock.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\t        }\n\t\n\t        if (workingBlock) {\n\t\n\t            editor.core.insertAfter(workingBlock, newBlock);\n\t        } else {\n\t\n\t            /**\n\t             * If redactor is empty, append as first child\n\t             */\n\t            editor.nodes.redactor.appendChild(newBlock);\n\t        }\n\t\n\t        /**\n\t         * Block handler\n\t         */\n\t        editor.ui.addBlockHandlers(newBlock);\n\t\n\t        /**\n\t         * Set new node as current\n\t         */\n\t        editor.content.workingNodeChanged(newBlock);\n\t\n\t        /**\n\t         * Save changes\n\t         */\n\t        editor.ui.saveInputs();\n\t\n\t        if (needPlaceCaret) {\n\t\n\t            /**\n\t             * If we don't know input index then we set default value -1\n\t             */\n\t            var currentInputIndex = editor.caret.getCurrentInputIndex() || -1;\n\t\n\t            if (currentInputIndex == -1) {\n\t\n\t                var editableElement = newBlock.querySelector('[contenteditable]'),\n\t                    emptyText = document.createTextNode('');\n\t\n\t                editableElement.appendChild(emptyText);\n\t                editor.caret.set(editableElement, 0, 0);\n\t\n\t                editor.toolbar.move();\n\t                editor.toolbar.showPlusButton();\n\t            } else {\n\t\n\t                if (currentInputIndex === editor.state.inputs.length - 1) return;\n\t\n\t                /** Timeout for browsers execution */\n\t                window.setTimeout(function () {\n\t\n\t                    /** Setting to the new input */\n\t                    editor.caret.setToNextBlock(currentInputIndex);\n\t                    editor.toolbar.move();\n\t                    editor.toolbar.open();\n\t                }, 10);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Block is inserted, wait for new click that defined focusing on editors area\n\t         * @type {boolean}\n\t         */\n\t        content.editorAreaHightlighted = false;\n\t    };\n\t\n\t    /**\n\t     * Replaces blocks with saving content\n\t     * @protected\n\t     * @param {Element} noteToReplace\n\t     * @param {Element} newNode\n\t     * @param {Element} blockType\n\t     */\n\t    content.switchBlock = function (blockToReplace, newBlock, tool) {\n\t\n\t        tool = tool || editor.content.currentNode.dataset.tool;\n\t        var newBlockComposed = editor.content.composeNewBlock(newBlock, tool);\n\t\n\t        /** Replacing */\n\t        editor.content.replaceBlock(blockToReplace, newBlockComposed);\n\t\n\t        /** Save new Inputs when block is changed */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    /**\n\t     * Iterates between child noted and looking for #text node on deepest level\n\t     * @private\n\t     * @param {Element} block - node where find\n\t     * @param {int} postiton - starting postion\n\t     *      Example: childNodex.length to find from the end\n\t     *               or 0 to find from the start\n\t     * @return {Text} block\n\t     * @uses DFS\n\t     */\n\t    content.getDeepestTextNodeFromPosition = function (block, position) {\n\t\n\t        /**\n\t         * Clear Block from empty and useless spaces with trim.\n\t         * Such nodes we should remove\n\t         */\n\t        var blockChilds = block.childNodes,\n\t            index,\n\t            node,\n\t            text;\n\t\n\t        for (index = 0; index < blockChilds.length; index++) {\n\t\n\t            node = blockChilds[index];\n\t\n\t            if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t                text = node.textContent.trim();\n\t\n\t                /** Text is empty. We should remove this child from node before we start DFS\n\t                 * decrease the quantity of childs.\n\t                 */\n\t                if (text === '') {\n\t\n\t                    block.removeChild(node);\n\t                    position--;\n\t                }\n\t            }\n\t        }\n\t\n\t        if (block.childNodes.length === 0) {\n\t\n\t            return document.createTextNode('');\n\t        }\n\t\n\t        /** Setting default position when we deleted all empty nodes */\n\t        if (position < 0) position = 1;\n\t\n\t        var lookingFromStart = false;\n\t\n\t        /** For looking from START */\n\t        if (position === 0) {\n\t\n\t            lookingFromStart = true;\n\t            position = 1;\n\t        }\n\t\n\t        while (position) {\n\t\n\t            /** initial verticle of node. */\n\t            if (lookingFromStart) {\n\t\n\t                block = block.childNodes[0];\n\t            } else {\n\t\n\t                block = block.childNodes[position - 1];\n\t            }\n\t\n\t            if (block.nodeType == editor.core.nodeTypes.TAG) {\n\t\n\t                position = block.childNodes.length;\n\t            } else if (block.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t                position = 0;\n\t            }\n\t        }\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    content.composeNewBlock = function (block, tool, isStretched, anchor) {\n\t\n\t        var newBlock = editor.draw.node('DIV', editor.ui.className.BLOCK_CLASSNAME, {}),\n\t            blockContent = editor.draw.node('DIV', editor.ui.className.BLOCK_CONTENT, {});\n\t\n\t        blockContent.appendChild(block);\n\t        newBlock.appendChild(blockContent);\n\t\n\t        if (isStretched) {\n\t\n\t            blockContent.classList.add(editor.ui.className.BLOCK_STRETCHED);\n\t        }\n\t\n\t        newBlock.dataset.tool = tool;\n\t        newBlock.dataset.anchor = anchor || '';\n\t        return newBlock;\n\t    };\n\t\n\t    /**\n\t     * Returns Range object of current selection\n\t     */\n\t    content.getRange = function () {\n\t\n\t        var selection = window.getSelection().getRangeAt(0);\n\t\n\t        return selection;\n\t    };\n\t\n\t    /**\n\t     * Divides block in two blocks (after and before caret)\n\t     * @private\n\t     * @param {Int} inputIndex - target input index\n\t     */\n\t    content.splitBlock = function (inputIndex) {\n\t\n\t        var selection = window.getSelection(),\n\t            anchorNode = selection.anchorNode,\n\t            anchorNodeText = anchorNode.textContent,\n\t            caretOffset = selection.anchorOffset,\n\t            textBeforeCaret,\n\t            textNodeBeforeCaret,\n\t            textAfterCaret,\n\t            textNodeAfterCaret;\n\t\n\t        var currentBlock = editor.content.currentNode.querySelector('[contentEditable]');\n\t\n\t        textBeforeCaret = anchorNodeText.substring(0, caretOffset);\n\t        textAfterCaret = anchorNodeText.substring(caretOffset);\n\t\n\t        textNodeBeforeCaret = document.createTextNode(textBeforeCaret);\n\t\n\t        if (textAfterCaret) {\n\t\n\t            textNodeAfterCaret = document.createTextNode(textAfterCaret);\n\t        }\n\t\n\t        var previousChilds = [],\n\t            nextChilds = [],\n\t            reachedCurrent = false;\n\t\n\t        if (textNodeAfterCaret) {\n\t\n\t            nextChilds.push(textNodeAfterCaret);\n\t        }\n\t\n\t        for (var i = 0, child; !!(child = currentBlock.childNodes[i]); i++) {\n\t\n\t            if (child != anchorNode) {\n\t\n\t                if (!reachedCurrent) {\n\t\n\t                    previousChilds.push(child);\n\t                } else {\n\t\n\t                    nextChilds.push(child);\n\t                }\n\t            } else {\n\t\n\t                reachedCurrent = true;\n\t            }\n\t        }\n\t\n\t        /** Clear current input */\n\t        editor.state.inputs[inputIndex].innerHTML = '';\n\t\n\t        /**\n\t         * Append all childs founded before anchorNode\n\t         */\n\t        var previousChildsLength = previousChilds.length;\n\t\n\t        for (i = 0; i < previousChildsLength; i++) {\n\t\n\t            editor.state.inputs[inputIndex].appendChild(previousChilds[i]);\n\t        }\n\t\n\t        editor.state.inputs[inputIndex].appendChild(textNodeBeforeCaret);\n\t\n\t        /**\n\t         * Append text node which is after caret\n\t         */\n\t        var nextChildsLength = nextChilds.length,\n\t            newNode = document.createElement('div');\n\t\n\t        for (i = 0; i < nextChildsLength; i++) {\n\t\n\t            newNode.appendChild(nextChilds[i]);\n\t        }\n\t\n\t        newNode = newNode.innerHTML;\n\t\n\t        /** This type of block creates when enter is pressed */\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        /**\n\t         * Make new paragraph with text after caret\n\t         */\n\t        editor.content.insertBlock({\n\t            type: NEW_BLOCK_TYPE,\n\t            block: editor.tools[NEW_BLOCK_TYPE].render({\n\t                text: newNode\n\t            })\n\t        }, true);\n\t    };\n\t\n\t    /**\n\t     * Merges two blocks — current and target\n\t     * If target index is not exist, then previous will be as target\n\t     */\n\t    content.mergeBlocks = function (currentInputIndex, targetInputIndex) {\n\t\n\t        /** If current input index is zero, then prevent method execution */\n\t        if (currentInputIndex === 0) {\n\t\n\t            return;\n\t        }\n\t\n\t        var targetInput,\n\t            currentInputContent = editor.state.inputs[currentInputIndex].innerHTML;\n\t\n\t        if (!targetInputIndex) {\n\t\n\t            targetInput = editor.state.inputs[currentInputIndex - 1];\n\t        } else {\n\t\n\t            targetInput = editor.state.inputs[targetInputIndex];\n\t        }\n\t\n\t        targetInput.innerHTML += currentInputContent;\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Callback for HTML Mutations\n\t     * @param {Array} mutation - Mutation Record\n\t     */\n\t    content.paste = function (mutation) {\n\t\n\t        var workingNode = editor.content.currentNode,\n\t            tool = workingNode.dataset.tool;\n\t\n\t        if (editor.tools[tool].allowedToPaste) {\n\t\n\t            editor.content.sanitize.call(this, mutation.target);\n\t        } else {\n\t\n\t            editor.content.pasteTextContent(mutation.addedNodes);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * gets only text/plain content of node\n\t     * @param {Element} target - HTML node\n\t     */\n\t    content.pasteTextContent = function (nodes) {\n\t\n\t        var node = nodes[0],\n\t            textNode;\n\t\n\t        if (!node) {\n\t\n\t            return;\n\t        }\n\t\n\t        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t            textNode = document.createTextNode(node);\n\t        } else {\n\t\n\t            textNode = document.createTextNode(node.textContent);\n\t        }\n\t\n\t        if (editor.core.isDomNode(node)) {\n\t\n\t            node.parentNode.replaceChild(textNode, node);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Sanitizes HTML content\n\t     * @param {Element} target - inserted element\n\t     * @uses Sanitize library html-janitor\n\t     */\n\t    content.sanitize = function (target) {\n\t\n\t        if (!target) {\n\t\n\t            return;\n\t        }\n\t\n\t        var node = target[0];\n\t\n\t        if (!node) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Disconnect Observer\n\t         * hierarchy of function calls inherits context of observer\n\t         */\n\t        this.disconnect();\n\t\n\t        /**\n\t         * Don't sanitize text node\n\t         */\n\t        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Clear dirty content\n\t         */\n\t        var cleaner = editor.sanitizer.init(editor.satinizer.Config.BASIC),\n\t            clean = cleaner.clean(target.outerHTML);\n\t\n\t        var div = editor.draw.node('DIV', [], { innerHTML: clean });\n\t\n\t        node.replaceWith(div.childNodes[0]);\n\t    };\n\t\n\t    /**\n\t     * Iterates all right siblings and parents, which has right siblings\n\t     * while it does not reached the first-level block\n\t     *\n\t     * @param {Element} node\n\t     * @return {boolean}\n\t     */\n\t    content.isLastNode = function (node) {\n\t\n\t        // console.log('погнали перебор родителей');\n\t\n\t        var allChecked = false;\n\t\n\t        while (!allChecked) {\n\t\n\t            // console.log('Смотрим на %o', node);\n\t            // console.log('Проверим, пустые ли соседи справа');\n\t\n\t            if (!allSiblingsEmpty_(node)) {\n\t\n\t                // console.log('Есть непустые соседи. Узел не последний. Выходим.');\n\t                return false;\n\t            }\n\t\n\t            node = node.parentNode;\n\t\n\t            /**\n\t             * Проверяем родителей до тех пор, пока не найдем блок первого уровня\n\t             */\n\t            if (node.classList.contains(editor.ui.className.BLOCK_CONTENT)) {\n\t\n\t                allChecked = true;\n\t            }\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * Checks if all element right siblings is empty\n\t     * @param node\n\t     */\n\t    var allSiblingsEmpty_ = function allSiblingsEmpty_(node) {\n\t\n\t        /**\n\t         * Нужно убедиться, что после пустого соседа ничего нет\n\t         */\n\t        var sibling = node.nextSibling;\n\t\n\t        while (sibling) {\n\t\n\t            if (sibling.textContent.length) {\n\t\n\t                return false;\n\t            }\n\t\n\t            sibling = sibling.nextSibling;\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * @public\n\t     *\n\t     * @param [String] htmlString - html content as string\n\t     * @return {string} - html content as string\n\t     */\n\t    content.wrapTextWithParagraphs = function (htmlString) {\n\t\n\t        var wrapper = document.createElement('DIV'),\n\t            newWrapper = document.createElement('DIV'),\n\t            i,\n\t            paragraph,\n\t            firstLevelBlocks = ['DIV', 'P'],\n\t            blockTyped,\n\t            node;\n\t\n\t        /**\n\t         * Make HTML Element to Wrap Text\n\t         * It allows us to work with input data as HTML content\n\t         */\n\t        wrapper.innerHTML = htmlString;\n\t        paragraph = document.createElement('P');\n\t\n\t        for (i = 0; i < wrapper.childNodes.length; i++) {\n\t\n\t            node = wrapper.childNodes[i];\n\t\n\t            blockTyped = firstLevelBlocks.indexOf(node.tagName) != -1;\n\t\n\t            /**\n\t             * If node is first-levet\n\t             * we add this node to our new wrapper\n\t             */\n\t            if (blockTyped) {\n\t\n\t                /**\n\t                 * If we had splitted inline nodes to paragraph before\n\t                 */\n\t                if (paragraph.childNodes.length) {\n\t\n\t                    newWrapper.appendChild(paragraph.cloneNode(true));\n\t\n\t                    /** empty paragraph */\n\t                    paragraph = null;\n\t                    paragraph = document.createElement('P');\n\t                }\n\t\n\t                newWrapper.appendChild(node.cloneNode(true));\n\t            } else {\n\t\n\t                /** Collect all inline nodes to one as paragraph */\n\t                paragraph.appendChild(node.cloneNode(true));\n\t\n\t                /** if node is last we should append this node to paragraph and paragraph to new wrapper */\n\t                if (i == wrapper.childNodes.length - 1) {\n\t\n\t                    newWrapper.appendChild(paragraph.cloneNode(true));\n\t                }\n\t            }\n\t        }\n\t\n\t        return newWrapper.innerHTML;\n\t    };\n\t\n\t    /**\n\t    * Finds closest Contenteditable parent from Element\n\t    * @param {Element} node     element looking from\n\t    * @return {Element} node    contenteditable\n\t    */\n\t    content.getEditableParent = function (node) {\n\t\n\t        while (node && node.contentEditable != 'true') {\n\t\n\t            node = node.parentNode;\n\t        }\n\t\n\t        return node;\n\t    };\n\t\n\t    return content;\n\t}({});\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor toolbar module\n\t *\n\t * Contains:\n\t *  - Inline toolbox\n\t *  - Toolbox within plus button\n\t *  - Settings section\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (toolbar) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    toolbar.settings = __webpack_require__(9);\n\t    toolbar.inline = __webpack_require__(10);\n\t    toolbar.toolbox = __webpack_require__(11);\n\t\n\t    /**\n\t     * Margin between focused node and toolbar\n\t     */\n\t    toolbar.defaultToolbarHeight = 49;\n\t\n\t    toolbar.defaultOffset = 34;\n\t\n\t    toolbar.opened = false;\n\t\n\t    toolbar.current = null;\n\t\n\t    /**\n\t     * @protected\n\t     */\n\t    toolbar.open = function () {\n\t\n\t        if (editor.hideToolbar) {\n\t\n\t            return;\n\t        }\n\t\n\t        editor.nodes.toolbar.classList.add('opened');\n\t        this.opened = true;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     */\n\t    toolbar.close = function () {\n\t\n\t        editor.nodes.toolbar.classList.remove('opened');\n\t\n\t        toolbar.opened = false;\n\t        toolbar.current = null;\n\t\n\t        for (var button in editor.nodes.toolbarButtons) {\n\t\n\t            editor.nodes.toolbarButtons[button].classList.remove('selected');\n\t        }\n\t\n\t        /** Close toolbox when toolbar is not displayed */\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.close();\n\t    };\n\t\n\t    toolbar.toggle = function () {\n\t\n\t        if (!this.opened) {\n\t\n\t            this.open();\n\t        } else {\n\t\n\t            this.close();\n\t        }\n\t    };\n\t\n\t    toolbar.hidePlusButton = function () {\n\t\n\t        editor.nodes.plusButton.classList.add('hide');\n\t    };\n\t\n\t    toolbar.showPlusButton = function () {\n\t\n\t        editor.nodes.plusButton.classList.remove('hide');\n\t    };\n\t\n\t    /**\n\t     * Moving toolbar to the specified node\n\t     */\n\t    toolbar.move = function () {\n\t\n\t        /** Close Toolbox when we move toolbar */\n\t        editor.toolbar.toolbox.close();\n\t\n\t        if (!editor.content.currentNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        var newYCoordinate = editor.content.currentNode.offsetTop - editor.toolbar.defaultToolbarHeight / 2 + editor.toolbar.defaultOffset;\n\t\n\t        editor.nodes.toolbar.style.transform = 'translate3D(0, ' + Math.floor(newYCoordinate) + 'px, 0)';\n\t\n\t        /** Close trash actions */\n\t        editor.toolbar.settings.hideRemoveActions();\n\t    };\n\t\n\t    return toolbar;\n\t}({});\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Toolbar settings\n\t *\n\t * @version 1.0.4\n\t */\n\t\n\tmodule.exports = function (settings) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    settings.opened = false;\n\t\n\t    settings.setting = null;\n\t    settings.actions = null;\n\t\n\t    settings.cover = null;\n\t\n\t    /**\n\t     * Append and open settings\n\t     */\n\t    settings.open = function (toolType) {\n\t\n\t        /**\n\t         * Append settings content\n\t         * It's stored in tool.settings\n\t         */\n\t        if (!editor.tools[toolType] || !editor.tools[toolType].makeSettings) {\n\t\n\t            editor.core.log('Plugin \\xAB' + toolType + '\\xBB has no settings', 'warn');\n\t            // editor.nodes.pluginSettings.innerHTML = `Плагин «${toolType}» не имеет настроек`;\n\t        } else {\n\t\n\t            /**\n\t             * Draw settings block\n\t             */\n\t            var settingsBlock = editor.tools[toolType].makeSettings();\n\t\n\t            editor.nodes.pluginSettings.appendChild(settingsBlock);\n\t        }\n\t\n\t        /** Open settings block */\n\t        editor.nodes.blockSettings.classList.add('opened');\n\t        editor.toolbar.settings.addDefaultSettings();\n\t        this.opened = true;\n\t    };\n\t\n\t    /**\n\t     * Close and clear settings\n\t     */\n\t    settings.close = function () {\n\t\n\t        editor.nodes.blockSettings.classList.remove('opened');\n\t        editor.nodes.pluginSettings.innerHTML = '';\n\t\n\t        this.opened = false;\n\t    };\n\t\n\t    /**\n\t     * @param {string} toolType - plugin type\n\t     */\n\t    settings.toggle = function (toolType) {\n\t\n\t        if (!this.opened) {\n\t\n\t            this.open(toolType);\n\t            editor.anchors.settingsOpened(editor.content.currentNode);\n\t        } else {\n\t\n\t            this.close();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * This function adds default core settings\n\t     */\n\t    settings.addDefaultSettings = function () {\n\t\n\t        /** list of default settings */\n\t        var feedModeToggler, anchorInput;\n\t\n\t        /** Clear block and append initialized settings */\n\t        editor.nodes.defaultSettings.innerHTML = '';\n\t\n\t        /** Init all default setting buttons */\n\t        feedModeToggler = editor.toolbar.settings.makeFeedModeToggler();\n\t        anchorInput = editor.toolbar.settings.makeAnchorInput();\n\t\n\t        /**\n\t         * Fill defaultSettings\n\t         */\n\t\n\t        /**\n\t         * Input for anchor for block\n\t         */\n\t        editor.nodes.defaultSettings.appendChild(anchorInput);\n\t\n\t        /**\n\t         * Button that enables/disables Feed-mode\n\t         * Feed-mode means that block will be showed in articles-feed like cover\n\t         */\n\t        editor.nodes.defaultSettings.appendChild(feedModeToggler);\n\t    };\n\t\n\t    /**\n\t     * Cover setting.\n\t     * This tune highlights block, so that it may be used for showing target block on main page\n\t     * Draw different setting when block is marked for main page\n\t     * If TRUE, then we show button that removes this selection\n\t     * Also defined setting \"Click\" events will be listened and have separate callbacks\n\t     *\n\t     * @return {Element} node/button that we place in default settings block\n\t     */\n\t    settings.makeFeedModeToggler = function () {\n\t\n\t        var isFeedModeActivated = editor.toolbar.settings.isFeedModeActivated(),\n\t            setting,\n\t            data;\n\t\n\t        if (!isFeedModeActivated) {\n\t\n\t            data = {\n\t                innerHTML: '<i class=\"ce-icon-newspaper\"></i>Вывести в ленте'\n\t            };\n\t        } else {\n\t\n\t            data = {\n\t                innerHTML: '<i class=\"ce-icon-newspaper\"></i>Не выводить в ленте'\n\t            };\n\t        }\n\t\n\t        setting = editor.draw.node('DIV', editor.ui.className.SETTINGS_ITEM, data);\n\t        editor.listeners.add(setting, 'click', editor.toolbar.settings.updateFeedMode, false);\n\t\n\t        return setting;\n\t    };\n\t\n\t    /**\n\t     * Updates Feed-mode\n\t     */\n\t    settings.updateFeedMode = function () {\n\t\n\t        var currentNode = editor.content.currentNode;\n\t\n\t        currentNode.classList.toggle(editor.ui.className.BLOCK_IN_FEED_MODE);\n\t\n\t        editor.toolbar.settings.close();\n\t    };\n\t\n\t    settings.isFeedModeActivated = function () {\n\t\n\t        var currentBlock = editor.content.currentNode;\n\t\n\t        if (currentBlock) {\n\t\n\t            return currentBlock.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE);\n\t        } else {\n\t\n\t            return false;\n\t        }\n\t    };\n\t\n\t    settings.makeAnchorInput = function () {\n\t\n\t        var anchorWrapper = editor.draw.node('div', 'ce-settings__anchor-wrapper ce-settings__item', {}),\n\t            hash = editor.draw.node('i', 'ce-settings__anchor-hash', {}),\n\t            anchor = editor.draw.node('input', 'ce-settings__anchor-input', { placeholder: 'Якорь' });\n\t\n\t        editor.listeners.add(anchor, 'keydown', editor.anchors.keyDownOnAnchorInput);\n\t        editor.listeners.add(anchor, 'keyup', editor.anchors.keyUpOnAnchorInput);\n\t        editor.listeners.add(anchor, 'input', editor.anchors.anchorChanged);\n\t        editor.listeners.add(anchor, 'blur', editor.anchors.anchorChanged);\n\t\n\t        anchorWrapper.appendChild(hash);\n\t        anchorWrapper.appendChild(anchor);\n\t\n\t        editor.anchors.input = anchor;\n\t\n\t        return anchorWrapper;\n\t    };\n\t\n\t    /**\n\t     * Here we will draw buttons and add listeners to components\n\t     */\n\t    settings.makeRemoveBlockButton = function () {\n\t\n\t        var removeBlockWrapper = editor.draw.node('SPAN', 'ce-toolbar__remove-btn', {}),\n\t            settingButton = editor.draw.node('SPAN', 'ce-toolbar__remove-setting', { innerHTML: '<i class=\"ce-icon-trash\"></i>' }),\n\t            actionWrapper = editor.draw.node('DIV', 'ce-toolbar__remove-confirmation', {}),\n\t            confirmAction = editor.draw.node('DIV', 'ce-toolbar__remove-confirm', { textContent: 'Удалить блок' }),\n\t            cancelAction = editor.draw.node('DIV', 'ce-toolbar__remove-cancel', { textContent: 'Отмена' });\n\t\n\t        editor.listeners.add(settingButton, 'click', editor.toolbar.settings.removeButtonClicked, false);\n\t\n\t        editor.listeners.add(confirmAction, 'click', editor.toolbar.settings.confirmRemovingRequest, false);\n\t\n\t        editor.listeners.add(cancelAction, 'click', editor.toolbar.settings.cancelRemovingRequest, false);\n\t\n\t        actionWrapper.appendChild(confirmAction);\n\t        actionWrapper.appendChild(cancelAction);\n\t\n\t        removeBlockWrapper.appendChild(settingButton);\n\t        removeBlockWrapper.appendChild(actionWrapper);\n\t\n\t        /** Save setting */\n\t        editor.toolbar.settings.setting = settingButton;\n\t        editor.toolbar.settings.actions = actionWrapper;\n\t\n\t        return removeBlockWrapper;\n\t    };\n\t\n\t    settings.removeButtonClicked = function () {\n\t\n\t        var action = editor.toolbar.settings.actions;\n\t\n\t        if (action.classList.contains('opened')) {\n\t\n\t            editor.toolbar.settings.hideRemoveActions();\n\t        } else {\n\t\n\t            editor.toolbar.settings.showRemoveActions();\n\t        }\n\t\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.close();\n\t    };\n\t\n\t    settings.cancelRemovingRequest = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.remove('opened');\n\t    };\n\t\n\t    settings.confirmRemovingRequest = function () {\n\t\n\t        var currentBlock = editor.content.currentNode,\n\t            firstLevelBlocksCount;\n\t\n\t        currentBlock.remove();\n\t\n\t        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\t\n\t        /**\n\t         * If all blocks are removed\n\t         */\n\t        if (firstLevelBlocksCount === 0) {\n\t\n\t            /** update currentNode variable */\n\t            editor.content.currentNode = null;\n\t\n\t            /** Inserting new empty initial block */\n\t            editor.ui.addInitialBlock();\n\t        }\n\t\n\t        editor.ui.saveInputs();\n\t\n\t        editor.toolbar.close();\n\t    };\n\t\n\t    settings.showRemoveActions = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.add('opened');\n\t    };\n\t\n\t    settings.hideRemoveActions = function () {\n\t\n\t        editor.toolbar.settings.actions.classList.remove('opened');\n\t    };\n\t\n\t    return settings;\n\t}({});\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Inline toolbar\n\t *\n\t * Contains from tools:\n\t * Bold, Italic, Underline and Anchor\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (inline) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    inline.buttonsOpened = null;\n\t    inline.actionsOpened = null;\n\t    inline.wrappersOffset = null;\n\t\n\t    /**\n\t     * saving selection that need for execCommand for styling\n\t     *\n\t     */\n\t    inline.storedSelection = null;\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Open inline toobar\n\t     */\n\t    inline.show = function () {\n\t\n\t        var currentNode = editor.content.currentNode,\n\t            tool = currentNode.dataset.tool,\n\t            plugin;\n\t\n\t        /**\n\t         * tool allowed to open inline toolbar\n\t         */\n\t        plugin = editor.tools[tool];\n\t\n\t        if (!plugin.showInlineToolbar) return;\n\t\n\t        var selectedText = inline.getSelectionText(),\n\t            toolbar = editor.nodes.inlineToolbar.wrapper;\n\t\n\t        if (selectedText.length > 0) {\n\t\n\t            /** Move toolbar and open */\n\t            editor.toolbar.inline.move();\n\t\n\t            /** Open inline toolbar */\n\t            toolbar.classList.add('opened');\n\t\n\t            /** show buttons of inline toolbar */\n\t            editor.toolbar.inline.showButtons();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Closes inline toolbar\n\t     */\n\t    inline.close = function () {\n\t\n\t        var toolbar = editor.nodes.inlineToolbar.wrapper;\n\t\n\t        toolbar.classList.remove('opened');\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Moving toolbar\n\t     */\n\t    inline.move = function () {\n\t\n\t        if (!this.wrappersOffset) {\n\t\n\t            this.wrappersOffset = this.getWrappersOffset();\n\t        }\n\t\n\t        var coords = this.getSelectionCoords(),\n\t            defaultOffset = 0,\n\t            toolbar = editor.nodes.inlineToolbar.wrapper,\n\t            newCoordinateX,\n\t            newCoordinateY;\n\t\n\t        if (toolbar.offsetHeight === 0) {\n\t\n\t            defaultOffset = 40;\n\t        }\n\t\n\t        newCoordinateX = coords.x - this.wrappersOffset.left;\n\t        newCoordinateY = coords.y + window.scrollY - this.wrappersOffset.top - defaultOffset - toolbar.offsetHeight;\n\t\n\t        toolbar.style.transform = 'translate3D(' + Math.floor(newCoordinateX) + 'px, ' + Math.floor(newCoordinateY) + 'px, 0)';\n\t\n\t        /** Close everything */\n\t        editor.toolbar.inline.closeButtons();\n\t        editor.toolbar.inline.closeAction();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Tool Clicked\n\t     */\n\t\n\t    inline.toolClicked = function (event, type) {\n\t\n\t        /**\n\t         * For simple tools we use default browser function\n\t         * For more complicated tools, we should write our own behavior\n\t         */\n\t        switch (type) {\n\t            case 'createLink':\n\t                editor.toolbar.inline.createLinkAction(event, type);break;\n\t            default:\n\t                editor.toolbar.inline.defaultToolAction(type);break;\n\t        }\n\t\n\t        /**\n\t         * highlight buttons\n\t         * after making some action\n\t         */\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Saving wrappers offset in DOM\n\t     */\n\t    inline.getWrappersOffset = function () {\n\t\n\t        var wrapper = editor.nodes.wrapper,\n\t            offset = this.getOffset(wrapper);\n\t\n\t        this.wrappersOffset = offset;\n\t        return offset;\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Calculates offset of DOM element\n\t     *\n\t     * @param el\n\t     * @returns {{top: number, left: number}}\n\t     */\n\t    inline.getOffset = function (el) {\n\t\n\t        var _x = 0;\n\t        var _y = 0;\n\t\n\t        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {\n\t\n\t            _x += el.offsetLeft + el.clientLeft;\n\t            _y += el.offsetTop + el.clientTop;\n\t            el = el.offsetParent;\n\t        }\n\t        return { top: _y, left: _x };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Calculates position of selected text\n\t     * @returns {{x: number, y: number}}\n\t     */\n\t    inline.getSelectionCoords = function () {\n\t\n\t        var sel = document.selection,\n\t            range;\n\t        var x = 0,\n\t            y = 0;\n\t\n\t        if (sel) {\n\t\n\t            if (sel.type != 'Control') {\n\t\n\t                range = sel.createRange();\n\t                range.collapse(true);\n\t                x = range.boundingLeft;\n\t                y = range.boundingTop;\n\t            }\n\t        } else if (window.getSelection) {\n\t\n\t            sel = window.getSelection();\n\t\n\t            if (sel.rangeCount) {\n\t\n\t                range = sel.getRangeAt(0).cloneRange();\n\t                if (range.getClientRects) {\n\t\n\t                    range.collapse(true);\n\t                    var rect = range.getClientRects()[0];\n\t\n\t                    if (!rect) {\n\t\n\t                        return;\n\t                    }\n\t\n\t                    x = rect.left;\n\t                    y = rect.top;\n\t                }\n\t            }\n\t        }\n\t        return { x: x, y: y };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Returns selected text as String\n\t     * @returns {string}\n\t     */\n\t    inline.getSelectionText = function () {\n\t\n\t        var selectedText = '';\n\t\n\t        // all modern browsers and IE9+\n\t        if (window.getSelection) {\n\t\n\t            selectedText = window.getSelection().toString();\n\t        }\n\t\n\t        return selectedText;\n\t    };\n\t\n\t    /** Opens buttons block */\n\t    inline.showButtons = function () {\n\t\n\t        var buttons = editor.nodes.inlineToolbar.buttons;\n\t\n\t        buttons.classList.add('opened');\n\t\n\t        editor.toolbar.inline.buttonsOpened = true;\n\t\n\t        /** highlight buttons */\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\t    };\n\t\n\t    /** Makes buttons disappear */\n\t    inline.closeButtons = function () {\n\t\n\t        var buttons = editor.nodes.inlineToolbar.buttons;\n\t\n\t        buttons.classList.remove('opened');\n\t\n\t        editor.toolbar.inline.buttonsOpened = false;\n\t    };\n\t\n\t    /** Open buttons defined action if exist */\n\t    inline.showActions = function () {\n\t\n\t        var action = editor.nodes.inlineToolbar.actions;\n\t\n\t        action.classList.add('opened');\n\t\n\t        editor.toolbar.inline.actionsOpened = true;\n\t    };\n\t\n\t    /** Close actions block */\n\t    inline.closeAction = function () {\n\t\n\t        var action = editor.nodes.inlineToolbar.actions;\n\t\n\t        action.innerHTML = '';\n\t        action.classList.remove('opened');\n\t        editor.toolbar.inline.actionsOpened = false;\n\t    };\n\t\n\t    /**\n\t    * Callback for keydowns in inline toolbar \"Insert link...\" input\n\t    */\n\t    var inlineToolbarAnchorInputKeydown_ = function inlineToolbarAnchorInputKeydown_(event) {\n\t\n\t        if (event.keyCode != editor.core.keys.ENTER) {\n\t\n\t            return;\n\t        }\n\t\n\t        var editable = editor.content.currentNode,\n\t            storedSelection = editor.toolbar.inline.storedSelection;\n\t\n\t        editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\t        editor.toolbar.inline.setAnchor(this.value);\n\t\n\t        /**\n\t         * Preventing events that will be able to happen\n\t         */\n\t        event.preventDefault();\n\t        event.stopImmediatePropagation();\n\t\n\t        editor.toolbar.inline.clearRange();\n\t    };\n\t\n\t    /** Action for link creation or for setting anchor */\n\t    inline.createLinkAction = function (event) {\n\t\n\t        var isActive = this.isLinkActive();\n\t\n\t        var editable = editor.content.currentNode,\n\t            storedSelection = editor.toolbar.inline.saveSelection(editable);\n\t\n\t        /** Save globally selection */\n\t        editor.toolbar.inline.storedSelection = storedSelection;\n\t\n\t        if (isActive) {\n\t\n\t            /**\n\t             * Changing stored selection. if we want to remove anchor from word\n\t             * we should remove anchor from whole word, not only selected part.\n\t             * The solution is than we get the length of current link\n\t             * Change start position to - end of selection minus length of anchor\n\t             */\n\t            editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\t\n\t            editor.toolbar.inline.defaultToolAction('unlink');\n\t        } else {\n\t\n\t            /** Create input and close buttons */\n\t            var action = editor.draw.inputForLink();\n\t\n\t            editor.nodes.inlineToolbar.actions.appendChild(action);\n\t\n\t            editor.toolbar.inline.closeButtons();\n\t            editor.toolbar.inline.showActions();\n\t\n\t            /**\n\t             * focus to input\n\t             * Solution: https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/focus\n\t             * Prevents event after showing input and when we need to focus an input which is in unexisted form\n\t             */\n\t            action.focus();\n\t            event.preventDefault();\n\t\n\t            /** Callback to link action */\n\t            editor.listeners.add(action, 'keydown', inlineToolbarAnchorInputKeydown_, false);\n\t        }\n\t    };\n\t\n\t    inline.isLinkActive = function () {\n\t\n\t        var isActive = false;\n\t\n\t        editor.nodes.inlineToolbar.buttons.childNodes.forEach(function (tool) {\n\t\n\t            var dataType = tool.dataset.type;\n\t\n\t            if (dataType == 'link' && tool.classList.contains('hightlighted')) {\n\t\n\t                isActive = true;\n\t            }\n\t        });\n\t\n\t        return isActive;\n\t    };\n\t\n\t    /** default action behavior of tool */\n\t    inline.defaultToolAction = function (type) {\n\t\n\t        document.execCommand(type, false, null);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Sets URL\n\t     *\n\t     * @param {String} url - URL\n\t     */\n\t    inline.setAnchor = function (url) {\n\t\n\t        document.execCommand('createLink', false, url);\n\t\n\t        /** Close after URL inserting */\n\t        editor.toolbar.inline.closeAction();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Saves selection\n\t     */\n\t    inline.saveSelection = function (containerEl) {\n\t\n\t        var range = window.getSelection().getRangeAt(0),\n\t            preSelectionRange = range.cloneRange(),\n\t            start;\n\t\n\t        preSelectionRange.selectNodeContents(containerEl);\n\t        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n\t\n\t        start = preSelectionRange.toString().length;\n\t\n\t        return {\n\t            start: start,\n\t            end: start + range.toString().length\n\t        };\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Sets to previous selection (Range)\n\t     *\n\t     * @param {Element} containerEl - editable element where we restore range\n\t     * @param {Object} savedSel - range basic information to restore\n\t     */\n\t    inline.restoreSelection = function (containerEl, savedSel) {\n\t\n\t        var range = document.createRange(),\n\t            charIndex = 0;\n\t\n\t        range.setStart(containerEl, 0);\n\t        range.collapse(true);\n\t\n\t        var nodeStack = [containerEl],\n\t            node,\n\t            foundStart = false,\n\t            stop = false,\n\t            nextCharIndex;\n\t\n\t        while (!stop && (node = nodeStack.pop())) {\n\t\n\t            if (node.nodeType == 3) {\n\t\n\t                nextCharIndex = charIndex + node.length;\n\t\n\t                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\n\t\n\t                    range.setStart(node, savedSel.start - charIndex);\n\t                    foundStart = true;\n\t                }\n\t                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\n\t\n\t                    range.setEnd(node, savedSel.end - charIndex);\n\t                    stop = true;\n\t                }\n\t                charIndex = nextCharIndex;\n\t            } else {\n\t\n\t                var i = node.childNodes.length;\n\t\n\t                while (i--) {\n\t\n\t                    nodeStack.push(node.childNodes[i]);\n\t                }\n\t            }\n\t        }\n\t\n\t        var sel = window.getSelection();\n\t\n\t        sel.removeAllRanges();\n\t        sel.addRange(range);\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Removes all ranges from window selection\n\t     */\n\t    inline.clearRange = function () {\n\t\n\t        var selection = window.getSelection();\n\t\n\t        selection.removeAllRanges();\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * sets or removes hightlight\n\t     */\n\t    inline.hightlight = function (tool) {\n\t\n\t        var dataType = tool.dataset.type;\n\t\n\t        if (document.queryCommandState(dataType)) {\n\t\n\t            editor.toolbar.inline.setButtonHighlighted(tool);\n\t        } else {\n\t\n\t            editor.toolbar.inline.removeButtonsHighLight(tool);\n\t        }\n\t\n\t        /**\n\t         *\n\t         * hightlight for anchors\n\t         */\n\t        var selection = window.getSelection(),\n\t            tag = selection.anchorNode.parentNode;\n\t\n\t        if (tag.tagName == 'A' && dataType == 'link') {\n\t\n\t            editor.toolbar.inline.setButtonHighlighted(tool);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Mark button if text is already executed\n\t     */\n\t    inline.setButtonHighlighted = function (button) {\n\t\n\t        button.classList.add('hightlighted');\n\t\n\t        /** At link tool we also change icon */\n\t        if (button.dataset.type == 'link') {\n\t\n\t            var icon = button.childNodes[0];\n\t\n\t            icon.classList.remove('ce-icon-link');\n\t            icon.classList.add('ce-icon-unlink');\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @private\n\t     *\n\t     * Removes hightlight\n\t     */\n\t    inline.removeButtonsHighLight = function (button) {\n\t\n\t        button.classList.remove('hightlighted');\n\t\n\t        /** At link tool we also change icon */\n\t        if (button.dataset.type == 'link') {\n\t\n\t            var icon = button.childNodes[0];\n\t\n\t            icon.classList.remove('ce-icon-unlink');\n\t            icon.classList.add('ce-icon-link');\n\t        }\n\t    };\n\t\n\t    return inline;\n\t}({});\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor toolbox\n\t *\n\t * All tools be able to appended here\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (toolbox) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    toolbox.opened = false;\n\t\n\t    /** Shows toolbox */\n\t    toolbox.open = function () {\n\t\n\t        /** Close setting if toolbox is opened */\n\t        if (editor.toolbar.settings.opened) {\n\t\n\t            editor.toolbar.settings.close();\n\t        }\n\t\n\t        /** display toolbox */\n\t        editor.nodes.toolbox.classList.add('opened');\n\t\n\t        /** Animate plus button */\n\t        editor.nodes.plusButton.classList.add('clicked');\n\t\n\t        /** toolbox state */\n\t        editor.toolbar.toolbox.opened = true;\n\t    };\n\t\n\t    /** Closes toolbox */\n\t    toolbox.close = function () {\n\t\n\t        /** Makes toolbox disapear */\n\t        editor.nodes.toolbox.classList.remove('opened');\n\t\n\t        /** Rotate plus button */\n\t        editor.nodes.plusButton.classList.remove('clicked');\n\t\n\t        /** toolbox state */\n\t        editor.toolbar.toolbox.opened = false;\n\t\n\t        editor.toolbar.current = null;\n\t    };\n\t\n\t    toolbox.leaf = function () {\n\t\n\t        var currentTool = editor.toolbar.current,\n\t            tools = Object.keys(editor.tools),\n\t            barButtons = editor.nodes.toolbarButtons,\n\t            nextToolIndex = 0,\n\t            toolToSelect = void 0,\n\t            visibleTool = void 0,\n\t            tool = void 0;\n\t\n\t        if (!currentTool) {\n\t\n\t            /** Get first tool from object*/\n\t            for (tool in editor.tools) {\n\t\n\t                if (editor.tools[tool].displayInToolbox) {\n\t\n\t                    break;\n\t                }\n\t\n\t                nextToolIndex++;\n\t            }\n\t        } else {\n\t\n\t            nextToolIndex = (tools.indexOf(currentTool) + 1) % tools.length;\n\t            visibleTool = tools[nextToolIndex];\n\t\n\t            while (!editor.tools[visibleTool].displayInToolbox) {\n\t\n\t                nextToolIndex = (nextToolIndex + 1) % tools.length;\n\t                visibleTool = tools[nextToolIndex];\n\t            }\n\t        }\n\t\n\t        toolToSelect = tools[nextToolIndex];\n\t\n\t        for (var button in barButtons) {\n\t\n\t            barButtons[button].classList.remove('selected');\n\t        }\n\t\n\t        barButtons[toolToSelect].classList.add('selected');\n\t        editor.toolbar.current = toolToSelect;\n\t    };\n\t\n\t    /**\n\t     * Transforming selected node type into selected toolbar element type\n\t     * @param {event} event\n\t     */\n\t    toolbox.toolClicked = function (event) {\n\t\n\t        /**\n\t         * UNREPLACEBLE_TOOLS this types of tools are forbidden to replace even they are empty\n\t         */\n\t        var UNREPLACEBLE_TOOLS = ['image', 'link', 'list', 'instagram', 'twitter', 'embed'],\n\t            tool = editor.tools[editor.toolbar.current],\n\t            workingNode = editor.content.currentNode,\n\t            currentInputIndex = editor.caret.inputIndex,\n\t            newBlockContent,\n\t            appendCallback,\n\t            blockData;\n\t\n\t        /** Make block from plugin */\n\t        newBlockContent = tool.render();\n\t\n\t        /** information about block */\n\t        blockData = {\n\t            block: newBlockContent,\n\t            type: tool.type,\n\t            stretched: false\n\t        };\n\t\n\t        if (workingNode && UNREPLACEBLE_TOOLS.indexOf(workingNode.dataset.tool) === -1 && workingNode.textContent.trim() === '') {\n\t\n\t            /** Replace current block */\n\t            editor.content.switchBlock(workingNode, newBlockContent, tool.type);\n\t        } else {\n\t\n\t            /** Insert new Block from plugin */\n\t            editor.content.insertBlock(blockData);\n\t\n\t            /** increase input index */\n\t            currentInputIndex++;\n\t        }\n\t\n\t        /** Fire tool append callback  */\n\t        appendCallback = tool.appendCallback;\n\t\n\t        if (appendCallback && typeof appendCallback == 'function') {\n\t\n\t            appendCallback.call(event);\n\t        }\n\t\n\t        window.setTimeout(function () {\n\t\n\t            /** Set caret to current block */\n\t            editor.caret.setToBlock(currentInputIndex);\n\t        }, 10);\n\t\n\t        /**\n\t         * Changing current Node\n\t         */\n\t        editor.content.workingNodeChanged();\n\t\n\t        /**\n\t         * Move toolbar when node is changed\n\t         */\n\t        editor.toolbar.move();\n\t    };\n\t\n\t    return toolbox;\n\t}({});\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor callbacks module\n\t *\n\t * @author Codex Team\n\t * @version 1.3.10\n\t */\n\t\n\tmodule.exports = function (callbacks) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    callbacks.globalKeydown = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.ENTER:\n\t                editor.callback.enterKeyPressed(event);break;\n\t        }\n\t    };\n\t\n\t    callbacks.redactorKeyDown = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.TAB:\n\t                editor.callback.tabKeyPressed(event);break;\n\t            case editor.core.keys.ENTER:\n\t                editor.callback.enterKeyPressedOnRedactorZone(event);break;\n\t            case editor.core.keys.ESC:\n\t                editor.callback.escapeKeyPressed(event);break;\n\t            default:\n\t                editor.callback.defaultKeyPressed(event);break;\n\t        }\n\t    };\n\t\n\t    callbacks.globalKeyup = function (event) {\n\t\n\t        switch (event.keyCode) {\n\t            case editor.core.keys.UP:\n\t            case editor.core.keys.LEFT:\n\t            case editor.core.keys.RIGHT:\n\t            case editor.core.keys.DOWN:\n\t                editor.callback.arrowKeyPressed(event);break;\n\t        }\n\t    };\n\t\n\t    callbacks.tabKeyPressed = function (event) {\n\t\n\t        var inputs = editor.content.currentNode.querySelectorAll('textarea, input'),\n\t            inputsAreEmpty = true,\n\t            textContentIsEmpty = !editor.content.currentNode.textContent.trim();\n\t\n\t        Array.prototype.map.call(inputs, function (input) {\n\t\n\t            if (input.type == 'textarea' || input.type == 'text') {\n\t\n\t                inputsAreEmpty = inputsAreEmpty && !input.value.trim();\n\t            }\n\t        });\n\t\n\t        var blockIsEmpty = textContentIsEmpty && inputsAreEmpty;\n\t\n\t        if (!blockIsEmpty) {\n\t\n\t            return;\n\t        }\n\t\n\t        if (!editor.toolbar.opened) {\n\t\n\t            editor.toolbar.open();\n\t        }\n\t\n\t        if (editor.toolbar.opened && !editor.toolbar.toolbox.opened) {\n\t\n\t            editor.toolbar.toolbox.open();\n\t        } else {\n\t\n\t            editor.toolbar.toolbox.leaf();\n\t        }\n\t\n\t        event.preventDefault();\n\t    };\n\t\n\t    /**\n\t    * @param {Event} event\n\t    */\n\t    callbacks.enterKeyPressed = function () {\n\t\n\t        if (editor.content.editorAreaHightlighted) {\n\t\n\t            /**\n\t             * it means that we lose input index, saved index before is not correct\n\t             * therefore we need to set caret when we insert new block\n\t             */\n\t            editor.caret.inputIndex = -1;\n\t\n\t            editor.callback.enterPressedOnBlock();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * ENTER key handler\n\t     * Makes new paragraph block\n\t     */\n\t    callbacks.enterKeyPressedOnRedactorZone = function (event) {\n\t\n\t        if (event.target.contentEditable == 'true') {\n\t\n\t            /** Update input index */\n\t            editor.caret.saveCurrentInputIndex();\n\t        }\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex() || 0,\n\t            workingNode = editor.content.currentNode,\n\t            tool = workingNode.dataset.tool,\n\t            isEnterPressedOnToolbar = editor.toolbar.opened && editor.toolbar.current && event.target == editor.state.inputs[currentInputIndex];\n\t\n\t        /** The list of tools which needs the default browser behaviour */\n\t        var enableLineBreaks = editor.tools[tool].enableLineBreaks;\n\t\n\t        /** This type of block creates when enter is pressed */\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        /**\n\t         * When toolbar is opened, select tool instead of making new paragraph\n\t         */\n\t        if (isEnterPressedOnToolbar) {\n\t\n\t            event.preventDefault();\n\t\n\t            editor.toolbar.toolbox.toolClicked(event);\n\t\n\t            editor.toolbar.close();\n\t\n\t            /**\n\t             * Stop other listeners callback executions\n\t             */\n\t            event.stopPropagation();\n\t            event.stopImmediatePropagation();\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Allow paragraph lineBreaks with shift enter\n\t         * Or if shiftkey pressed and enter and enabledLineBreaks, the let new block creation\n\t         */\n\t        if (event.shiftKey || enableLineBreaks) {\n\t\n\t            event.stopPropagation();\n\t            event.stopImmediatePropagation();\n\t            return;\n\t        }\n\t\n\t        var currentSelection = window.getSelection(),\n\t            currentSelectedNode = currentSelection.anchorNode,\n\t            caretAtTheEndOfText = editor.caret.position.atTheEnd(),\n\t            isTextNodeHasParentBetweenContenteditable = false;\n\t\n\t        /**\n\t         * Allow making new <p> in same block by SHIFT+ENTER and forbids to prevent default browser behaviour\n\t         */\n\t        if (event.shiftKey && !enableLineBreaks) {\n\t\n\t            editor.callback.enterPressedOnBlock(editor.content.currentBlock, event);\n\t            event.preventDefault();\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Workaround situation when caret at the Text node that has some wrapper Elements\n\t         * Split block cant handle this.\n\t         * We need to save default behavior\n\t         */\n\t        isTextNodeHasParentBetweenContenteditable = currentSelectedNode && currentSelectedNode.parentNode.contentEditable != 'true';\n\t\n\t        /**\n\t         * Split blocks when input has several nodes and caret placed in textNode\n\t         */\n\t        if (currentSelectedNode.nodeType == editor.core.nodeTypes.TEXT && !isTextNodeHasParentBetweenContenteditable && !caretAtTheEndOfText) {\n\t\n\t            event.preventDefault();\n\t\n\t            editor.core.log('Splitting Text node...');\n\t\n\t            editor.content.splitBlock(currentInputIndex);\n\t\n\t            /** Show plus button when next input after split is empty*/\n\t            if (!editor.state.inputs[currentInputIndex + 1].textContent.trim()) {\n\t\n\t                editor.toolbar.showPlusButton();\n\t            }\n\t        } else {\n\t\n\t            var islastNode = editor.content.isLastNode(currentSelectedNode);\n\t\n\t            if (islastNode && caretAtTheEndOfText) {\n\t\n\t                event.preventDefault();\n\t                event.stopPropagation();\n\t                event.stopImmediatePropagation();\n\t\n\t                editor.core.log('ENTER clicked in last textNode. Create new BLOCK');\n\t\n\t                editor.content.insertBlock({\n\t                    type: NEW_BLOCK_TYPE,\n\t                    block: editor.tools[NEW_BLOCK_TYPE].render()\n\t                }, true);\n\t\n\t                editor.toolbar.move();\n\t                editor.toolbar.open();\n\t\n\t                /** Show plus button with empty block */\n\t                editor.toolbar.showPlusButton();\n\t            }\n\t        }\n\t\n\t        /** get all inputs after new appending block */\n\t        editor.ui.saveInputs();\n\t    };\n\t\n\t    callbacks.escapeKeyPressed = function (event) {\n\t\n\t        /** Close all toolbar */\n\t        editor.toolbar.close();\n\t\n\t        /** Close toolbox */\n\t        editor.toolbar.toolbox.close();\n\t\n\t        event.preventDefault();\n\t    };\n\t\n\t    /**\n\t    * @param {Event} event\n\t    */\n\t    callbacks.arrowKeyPressed = function () {\n\t\n\t        editor.content.workingNodeChanged();\n\t\n\t        /* Closing toolbar */\n\t        editor.toolbar.close();\n\t        editor.toolbar.move();\n\t    };\n\t\n\t    /**\n\t    * @param {Event} event\n\t    */\n\t    callbacks.defaultKeyPressed = function () {\n\t\n\t        editor.toolbar.close();\n\t\n\t        if (!editor.toolbar.inline.actionsOpened) {\n\t\n\t            editor.toolbar.inline.close();\n\t            editor.content.clearMark();\n\t        }\n\t    };\n\t\n\t    callbacks.redactorClicked = function (event) {\n\t\n\t        callbacks.detectWhenClickedOnFirstLevelBlockArea();\n\t\n\t        editor.content.workingNodeChanged(event.target);\n\t\n\t        editor.ui.saveInputs();\n\t\n\t        var selectedText = editor.toolbar.inline.getSelectionText(),\n\t            firstLevelBlock;\n\t\n\t        /**\n\t         * If selection range took off, then we hide inline toolbar\n\t         */\n\t        if (selectedText.length === 0) {\n\t\n\t            editor.toolbar.inline.close();\n\t        }\n\t\n\t        /** Update current input index in memory when caret focused into existed input */\n\t        if (event.target.contentEditable == 'true') {\n\t\n\t            editor.caret.saveCurrentInputIndex();\n\t        }\n\t\n\t        if (editor.content.currentNode === null) {\n\t\n\t            /**\n\t             * If inputs in redactor does not exits, then we put input index 0 not -1\n\t             */\n\t            var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n\t\n\t            /** If we have any inputs */\n\t            if (editor.state.inputs.length) {\n\t\n\t                /**\n\t                * @todo Refactor\n\t                */\n\t\n\t                /** getting firstlevel parent of input */\n\t                firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n\t            }\n\t\n\t            /** If input is empty, then we set caret to the last input */\n\t            if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n\t\n\t                editor.caret.setToBlock(indexOfLastInput);\n\t            } else {\n\t\n\t                /** Create new input when caret clicked in redactors area */\n\t                var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t                editor.content.insertBlock({\n\t                    type: NEW_BLOCK_TYPE,\n\t                    block: editor.tools[NEW_BLOCK_TYPE].render()\n\t                });\n\t\n\t                /** If there is no inputs except inserted */\n\t                if (editor.state.inputs.length === 1) {\n\t\n\t                    editor.caret.setToBlock(indexOfLastInput);\n\t                } else {\n\t\n\t                    /** Set caret to this appended input */\n\t                    editor.caret.setToNextBlock(indexOfLastInput);\n\t                }\n\t            }\n\t\n\t            /**\n\t             * Move toolbar to the right position and open\n\t             */\n\t            editor.toolbar.move();\n\t            editor.toolbar.open();\n\t        } else {\n\t\n\t            /**\n\t             * Move toolbar to the new position and open\n\t             */\n\t            editor.toolbar.move();\n\t            editor.toolbar.open();\n\t\n\t            /** Close all panels */\n\t            editor.toolbar.settings.close();\n\t            editor.toolbar.toolbox.close();\n\t        }\n\t\n\t        var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n\t            currentNodeType = editor.content.currentNode.dataset.tool,\n\t            isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n\t\n\t        /** Hide plus buttons */\n\t        editor.toolbar.hidePlusButton();\n\t\n\t        if (!inputIsEmpty) {\n\t\n\t            /** Mark current block */\n\t            editor.content.markBlock();\n\t        }\n\t\n\t        if (isInitialType && inputIsEmpty) {\n\t\n\t            /** Show plus button */\n\t            editor.toolbar.showPlusButton();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * This method allows to define, is caret in contenteditable element or not.\n\t     * Otherwise, if we get TEXT node from range container, that will means we have input index.\n\t     * In this case we use default browsers behaviour (if plugin allows that) or overwritten action.\n\t     * Therefore, to be sure that we've clicked first-level block area, we should have currentNode, which always\n\t     * specifies to the first-level block. Other cases we just ignore.\n\t     */\n\t    callbacks.detectWhenClickedOnFirstLevelBlockArea = function () {\n\t\n\t        var selection = window.getSelection(),\n\t            anchorNode = selection.anchorNode,\n\t            flag = false;\n\t\n\t        if (selection.rangeCount === 0) {\n\t\n\t            editor.content.editorAreaHightlighted = true;\n\t        } else {\n\t\n\t            if (!editor.core.isDomNode(anchorNode)) {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t            }\n\t\n\t            /** Already founded, without loop */\n\t            if (anchorNode.contentEditable == 'true') {\n\t\n\t                flag = true;\n\t            }\n\t\n\t            while (anchorNode.contentEditable != 'true') {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t\n\t                if (anchorNode.contentEditable == 'true') {\n\t\n\t                    flag = true;\n\t                }\n\t\n\t                if (anchorNode == document.body) {\n\t\n\t                    break;\n\t                }\n\t            }\n\t\n\t            /** If editable element founded, flag is \"TRUE\", Therefore we return \"FALSE\" */\n\t            editor.content.editorAreaHightlighted = flag ? false : true;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Toolbar button click handler\n\t     * @param this - cursor to the button\n\t     */\n\t    callbacks.toolbarButtonClicked = function (event) {\n\t\n\t        var button = this;\n\t\n\t        editor.toolbar.current = button.dataset.type;\n\t\n\t        editor.toolbar.toolbox.toolClicked(event);\n\t        editor.toolbar.close();\n\t    };\n\t\n\t    /** Show or Hide toolbox when plus button is clicked */\n\t    callbacks.plusButtonClicked = function () {\n\t\n\t        if (!editor.nodes.toolbox.classList.contains('opened')) {\n\t\n\t            editor.toolbar.toolbox.open();\n\t        } else {\n\t\n\t            editor.toolbar.toolbox.close();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Block handlers for KeyDown events\n\t     */\n\t    callbacks.blockKeydown = function (event) {\n\t\n\t        var block = this; // event.target input\n\t\n\t        switch (event.keyCode) {\n\t\n\t            case editor.core.keys.DOWN:\n\t            case editor.core.keys.RIGHT:\n\t                editor.callback.blockRightOrDownArrowPressed();\n\t                break;\n\t\n\t            case editor.core.keys.BACKSPACE:\n\t                editor.callback.backspacePressed(block, event);\n\t                break;\n\t\n\t            case editor.core.keys.UP:\n\t            case editor.core.keys.LEFT:\n\t                editor.callback.blockLeftOrUpArrowPressed();\n\t                break;\n\t\n\t        }\n\t    };\n\t\n\t    /**\n\t     * RIGHT or DOWN keydowns on block\n\t     */\n\t    callbacks.blockRightOrDownArrowPressed = function () {\n\t\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        /** Check for caret existance */\n\t        if (!focusedNode) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /** Looking for closest (parent) contentEditable element of focused node */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        /**\n\t         * Founded contentEditable element doesn't have childs\n\t         * Or maybe New created block\n\t         */\n\t        if (!focusedNode.textContent) {\n\t\n\t            editor.caret.setToNextBlock(editableElementIndex);\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Do nothing when caret doesn not reaches the end of last child\n\t         */\n\t        var caretInLastChild = false,\n\t            caretAtTheEndOfText = false;\n\t\n\t        var lastChild, deepestTextnode;\n\t\n\t        lastChild = focusedNode.childNodes[focusedNode.childNodes.length - 1];\n\t\n\t        if (editor.core.isDomNode(lastChild)) {\n\t\n\t            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(lastChild, lastChild.childNodes.length);\n\t        } else {\n\t\n\t            deepestTextnode = lastChild;\n\t        }\n\t\n\t        caretInLastChild = selection.anchorNode == deepestTextnode;\n\t        caretAtTheEndOfText = deepestTextnode.length == selection.anchorOffset;\n\t\n\t        if (!caretInLastChild || !caretAtTheEndOfText) {\n\t\n\t            editor.core.log('arrow [down|right] : caret does not reached the end');\n\t            return false;\n\t        }\n\t\n\t        editor.caret.setToNextBlock(editableElementIndex);\n\t    };\n\t\n\t    /**\n\t     * LEFT or UP keydowns on block\n\t     */\n\t    callbacks.blockLeftOrUpArrowPressed = function () {\n\t\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        /** Check for caret existance */\n\t        if (!focusedNode) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /**\n\t         * LEFT or UP not at the beginning\n\t         */\n\t        if (selection.anchorOffset !== 0) {\n\t\n\t            return false;\n\t        }\n\t\n\t        /** Looking for parent contentEditable block */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        /**\n\t         * Do nothing if caret is not at the beginning of first child\n\t         */\n\t        var caretInFirstChild = false,\n\t            caretAtTheBeginning = false;\n\t\n\t        var firstChild, deepestTextnode;\n\t\n\t        /**\n\t         * Founded contentEditable element doesn't have childs\n\t         * Or maybe New created block\n\t         */\n\t        if (!focusedNode.textContent) {\n\t\n\t            editor.caret.setToPreviousBlock(editableElementIndex);\n\t            return;\n\t        }\n\t\n\t        firstChild = focusedNode.childNodes[0];\n\t\n\t        if (editor.core.isDomNode(firstChild)) {\n\t\n\t            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(firstChild, 0);\n\t        } else {\n\t\n\t            deepestTextnode = firstChild;\n\t        }\n\t\n\t        caretInFirstChild = selection.anchorNode == deepestTextnode;\n\t        caretAtTheBeginning = selection.anchorOffset === 0;\n\t\n\t        if (caretInFirstChild && caretAtTheBeginning) {\n\t\n\t            editor.caret.setToPreviousBlock(editableElementIndex);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Callback for enter key pressing in first-level block area\n\t     * @param {Event} event\n\t     */\n\t    callbacks.enterPressedOnBlock = function () {\n\t\n\t        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\t\n\t        editor.content.insertBlock({\n\t            type: NEW_BLOCK_TYPE,\n\t            block: editor.tools[NEW_BLOCK_TYPE].render()\n\t        }, true);\n\t\n\t        editor.toolbar.move();\n\t        editor.toolbar.open();\n\t    };\n\t\n\t    callbacks.backspacePressed = function (block, event) {\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex(),\n\t            range,\n\t            selectionLength,\n\t            firstLevelBlocksCount;\n\t\n\t        if (isNativeInput(event.target)) {\n\t\n\t            /** If input value is empty - remove block */\n\t            if (event.target.value.trim() == '') {\n\t\n\t                block.remove();\n\t            } else {\n\t\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (block.textContent.trim()) {\n\t\n\t            range = editor.content.getRange();\n\t            selectionLength = range.endOffset - range.startOffset;\n\t\n\t            if (editor.caret.position.atStart() && !selectionLength && editor.state.inputs[currentInputIndex - 1]) {\n\t\n\t                editor.content.mergeBlocks(currentInputIndex);\n\t            } else {\n\t\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (!selectionLength) {\n\t\n\t            block.remove();\n\t        }\n\t\n\t        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\t\n\t        /**\n\t         * If all blocks are removed\n\t         */\n\t        if (firstLevelBlocksCount === 0) {\n\t\n\t            /** update currentNode variable */\n\t            editor.content.currentNode = null;\n\t\n\t            /** Inserting new empty initial block */\n\t            editor.ui.addInitialBlock();\n\t\n\t            /** Updating inputs state after deleting last block */\n\t            editor.ui.saveInputs();\n\t\n\t            /** Set to current appended block */\n\t            window.setTimeout(function () {\n\t\n\t                editor.caret.setToPreviousBlock(1);\n\t            }, 10);\n\t        } else {\n\t\n\t            if (editor.caret.inputIndex !== 0) {\n\t\n\t                /** Target block is not first */\n\t                editor.caret.setToPreviousBlock(editor.caret.inputIndex);\n\t            } else {\n\t\n\t                /** If we try to delete first block */\n\t                editor.caret.setToNextBlock(editor.caret.inputIndex);\n\t            }\n\t        }\n\t\n\t        editor.toolbar.move();\n\t\n\t        if (!editor.toolbar.opened) {\n\t\n\t            editor.toolbar.open();\n\t        }\n\t\n\t        /** Updating inputs state */\n\t        editor.ui.saveInputs();\n\t\n\t        /** Prevent default browser behaviour */\n\t        event.preventDefault();\n\t    };\n\t\n\t    /**\n\t     * This method is used to observe pasted dirty data.\n\t     *\n\t     * Mutation handlers send to separate observers each mutation (added, changed and so on), which will be\n\t     * passed from handler that sanitizes and replaces data.\n\t     *\n\t     * Probably won't be used\n\t     *\n\t     * @deprecated\n\t     *\n\t     * @param event\n\t     * @private\n\t     */\n\t    callbacks._blockPasteCallback = function () {\n\t\n\t        var currentInputIndex = editor.caret.getCurrentInputIndex();\n\t\n\t        /**\n\t         * create an observer instance\n\t         */\n\t        var observer = new MutationObserver(editor.callback.handleMutationsOnPaste);\n\t\n\t        /**\n\t         * configuration of the observer:\n\t         */\n\t        var config = {\n\t            attributes: true,\n\t            childList: false,\n\t            characterData: false,\n\t            subtree: true\n\t        };\n\t\n\t        // pass in the target node, as well as the observer options\n\t        observer.observe(editor.state.inputs[currentInputIndex], config);\n\t    };\n\t\n\t    /**\n\t     * This method prevents default behaviour.\n\t     *\n\t     * We get from clipboard pasted data, sanitize, make a fragment that contains of this sanitized nodes.\n\t     * Firstly, we need to memorize the caret position. We can do that by getting the range of selection.\n\t     * After all, we insert clear fragment into caret placed position. Then, we should move the caret to the last node\n\t     *\n\t     * @param event\n\t     */\n\t    callbacks.blockPasteCallback = function (event) {\n\t\n\t        /** If area is input or textarea then allow default behaviour */\n\t        if (isNativeInput(event.target)) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** Prevent default behaviour */\n\t        event.preventDefault();\n\t\n\t        var editableParent = editor.content.getEditableParent(event.target),\n\t            currentNode = editor.content.currentNode;\n\t\n\t        /** Allow paste when event target placed in Editable element */\n\t        if (!editableParent) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** get html pasted data - dirty data */\n\t        var htmlData = event.clipboardData.getData('text/html'),\n\t            plainData = event.clipboardData.getData('text/plain');\n\t\n\t        /** Temporary DIV that is used to work with childs as arrays item */\n\t        var div = editor.draw.node('DIV', '', {}),\n\t            cleaner = new editor.sanitizer.init(editor.sanitizer.Config.BASIC),\n\t            cleanData,\n\t            fragment;\n\t\n\t        /** Create fragment, that we paste to range after proccesing */\n\t        fragment = document.createDocumentFragment();\n\t\n\t        if (htmlData.trim() != '') {\n\t\n\t            cleanData = cleaner.clean(htmlData);\n\t            div.innerHTML = cleanData;\n\t        } else {\n\t\n\t            div.innerText = plainData.toString();\n\t        }\n\t\n\t        var node, lastNode;\n\t\n\t        /**\n\t         * and fill in fragment\n\t         */\n\t        while (node = div.firstChild) {\n\t\n\t            lastNode = fragment.appendChild(node);\n\t        }\n\t\n\t        if (editor.tools[currentNode.dataset.tool].allowRenderOnPaste) {\n\t\n\t            if (editor.paste.pasted(event)) return;\n\t        }\n\t\n\t        /**\n\t         * work with selection and range\n\t         */\n\t        var selection, range;\n\t\n\t        selection = window.getSelection();\n\t\n\t        range = selection.getRangeAt(0);\n\t        range.deleteContents();\n\t\n\t        range.insertNode(fragment);\n\t\n\t        /** Preserve the selection */\n\t        if (lastNode) {\n\t\n\t            range = range.cloneRange();\n\t            range.setStartAfter(lastNode);\n\t            range.collapse(true);\n\t            selection.removeAllRanges();\n\t            selection.addRange(range);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Sends all mutations to paste handler\n\t     */\n\t    callbacks.handleMutationsOnPaste = function (mutations) {\n\t\n\t        var self = this;\n\t\n\t        /**\n\t         * Calling function with context of this function.\n\t         * Also, we should sanitize pasted or changed data one time and ignore\n\t         * changings which makes sanitize method.\n\t         * For that, we need to send Context, MutationObserver.__proto__ that contains\n\t         * observer disconnect method.\n\t         */\n\t        mutations.forEach(function (mutation) {\n\t\n\t            editor.content.paste.call(self, mutation);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Clicks on block settings button\n\t     */\n\t    callbacks.showSettingsButtonClicked = function () {\n\t\n\t        /**\n\t         * Get type of current block\n\t         * It uses to append settings from tool.settings property.\n\t         * ...\n\t         * Type is stored in data-type attribute on block\n\t         */\n\t        var currentToolType = editor.content.currentNode.dataset.tool;\n\t\n\t        editor.toolbar.settings.toggle(currentToolType);\n\t\n\t        /** Close toolbox when settings button is active */\n\t        editor.toolbar.toolbox.close();\n\t        editor.toolbar.settings.hideRemoveActions();\n\t    };\n\t\n\t    /**\n\t     * Check block for\n\t     * @param target\n\t     */\n\t    var isNativeInput = function isNativeInput(target) {\n\t\n\t        var nativeInputAreas = ['INPUT', 'TEXTAREA'];\n\t\n\t        return nativeInputAreas.indexOf(target.tagName) != -1;\n\t    };\n\t\n\t    return callbacks;\n\t}({});\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Draw module\n\t *\n\t * @author Codex Team\n\t * @version 1.0.\n\t */\n\t\n\tmodule.exports = function (draw) {\n\t\n\t    /**\n\t     * Base editor wrapper\n\t     */\n\t    draw.wrapper = function () {\n\t\n\t        var wrapper = document.createElement('div');\n\t\n\t        wrapper.className += 'codex-editor';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * Content-editable holder\n\t     */\n\t    draw.redactor = function () {\n\t\n\t        var redactor = document.createElement('div');\n\t\n\t        redactor.className += 'ce-redactor';\n\t\n\t        return redactor;\n\t    };\n\t\n\t    draw.ceBlock = function () {\n\t\n\t        var block = document.createElement('DIV');\n\t\n\t        block.className += 'ce_block';\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * Empty toolbar with toggler\n\t     */\n\t    draw.toolbar = function () {\n\t\n\t        var bar = document.createElement('div');\n\t\n\t        bar.className += 'ce-toolbar';\n\t\n\t        return bar;\n\t    };\n\t\n\t    draw.toolbarContent = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.classList.add('ce-toolbar__content');\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * Inline toolbar\n\t     */\n\t    draw.inlineToolbar = function () {\n\t\n\t        var bar = document.createElement('DIV');\n\t\n\t        bar.className += 'ce-toolbar-inline';\n\t\n\t        return bar;\n\t    };\n\t\n\t    /**\n\t     * Wrapper for inline toobar buttons\n\t     */\n\t    draw.inlineToolbarButtons = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.className += 'ce-toolbar-inline__buttons';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * For some actions\n\t     */\n\t    draw.inlineToolbarActions = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.className += 'ce-toolbar-inline__actions';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    draw.inputForLink = function () {\n\t\n\t        var input = document.createElement('INPUT');\n\t\n\t        input.type = 'input';\n\t        input.className += 'inputForLink';\n\t        input.placeholder = 'Вставьте ссылку ...';\n\t        input.setAttribute('form', 'defaultForm');\n\t\n\t        input.setAttribute('autofocus', 'autofocus');\n\t\n\t        return input;\n\t    };\n\t\n\t    /**\n\t     * @todo Desc\n\t     */\n\t    draw.blockButtons = function () {\n\t\n\t        var block = document.createElement('div');\n\t\n\t        block.className += 'ce-toolbar__actions';\n\t\n\t        return block;\n\t    };\n\t\n\t    /**\n\t     * Block settings panel\n\t     */\n\t    draw.blockSettings = function () {\n\t\n\t        var settings = document.createElement('div');\n\t\n\t        settings.className += 'ce-settings';\n\t\n\t        return settings;\n\t    };\n\t\n\t    draw.defaultSettings = function () {\n\t\n\t        var div = document.createElement('div');\n\t\n\t        div.classList.add('ce-settings_default');\n\t\n\t        return div;\n\t    };\n\t\n\t    draw.pluginsSettings = function () {\n\t\n\t        var div = document.createElement('div');\n\t\n\t        div.classList.add('ce-settings_plugin');\n\t\n\t        return div;\n\t    };\n\t\n\t    draw.plusButton = function () {\n\t\n\t        var button = document.createElement('span');\n\t\n\t        button.className = 'ce-toolbar__plus';\n\t        // button.innerHTML = '<i class=\"ce-icon-plus\"></i>';\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * Settings button in toolbar\n\t     */\n\t    draw.settingsButton = function () {\n\t\n\t        var toggler = document.createElement('span');\n\t\n\t        toggler.className = 'ce-toolbar__settings-btn';\n\t\n\t        /** Toggler button*/\n\t        toggler.innerHTML = '<i class=\"ce-icon-cog\"></i>';\n\t\n\t        return toggler;\n\t    };\n\t\n\t    /**\n\t     * Redactor tools wrapper\n\t     */\n\t\n\t    draw.toolbox = function () {\n\t\n\t        var wrapper = document.createElement('div');\n\t\n\t        wrapper.className = 'ce-toolbar__tools';\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Draws tool buttons for toolbox\n\t     *\n\t     * @param {String} type\n\t     * @param {String} classname\n\t     * @returns {Element}\n\t     */\n\t    draw.toolbarButton = function (type, classname) {\n\t\n\t        var button = document.createElement('li'),\n\t            toolIcon = document.createElement('i'),\n\t            toolTitle = document.createElement('span');\n\t\n\t        button.dataset.type = type;\n\t        button.setAttribute('title', type);\n\t\n\t        toolIcon.classList.add(classname);\n\t        toolTitle.classList.add('ce_toolbar_tools--title');\n\t\n\t        button.appendChild(toolIcon);\n\t        button.appendChild(toolTitle);\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     *\n\t     * Draws tools for inline toolbar\n\t     *\n\t     * @param {String} type\n\t     * @param {String} classname\n\t     */\n\t    draw.toolbarButtonInline = function (type, classname) {\n\t\n\t        var button = document.createElement('BUTTON'),\n\t            toolIcon = document.createElement('I');\n\t\n\t        button.type = 'button';\n\t        button.dataset.type = type;\n\t        toolIcon.classList.add(classname);\n\t\n\t        button.appendChild(toolIcon);\n\t\n\t        return button;\n\t    };\n\t\n\t    /**\n\t     * Redactor block\n\t     */\n\t    draw.block = function (tagName, content) {\n\t\n\t        var node = document.createElement(tagName);\n\t\n\t        node.innerHTML = content || '';\n\t\n\t        return node;\n\t    };\n\t\n\t    /**\n\t     * Creates Node with passed tagName and className\n\t     * @param {string}  tagName\n\t     * @param {string} className\n\t     * @param {object} properties - allow to assign properties\n\t     */\n\t    draw.node = function (tagName, className, properties) {\n\t\n\t        var el = document.createElement(tagName);\n\t\n\t        if (className) el.className = className;\n\t\n\t        if (properties) {\n\t\n\t            for (var name in properties) {\n\t\n\t                el[name] = properties[name];\n\t            }\n\t        }\n\t\n\t        return el;\n\t    };\n\t\n\t    /**\n\t    * Unavailable plugin block\n\t    */\n\t    draw.unavailableBlock = function () {\n\t\n\t        var wrapper = document.createElement('DIV');\n\t\n\t        wrapper.classList.add('cdx-unavailable-block');\n\t\n\t        return wrapper;\n\t    };\n\t\n\t    return draw;\n\t}({});\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Caret Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (caret) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /**\n\t     * @var {int} InputIndex - editable element in DOM\n\t     */\n\t    caret.inputIndex = null;\n\t\n\t    /**\n\t     * @var {int} offset - caret position in a text node.\n\t     */\n\t    caret.offset = null;\n\t\n\t    /**\n\t     * @var {int} focusedNodeIndex - we get index of child node from first-level block\n\t     */\n\t    caret.focusedNodeIndex = null;\n\t\n\t    /**\n\t     * Creates Document Range and sets caret to the element.\n\t     * @protected\n\t     * @uses caret.save — if you need to save caret position\n\t     * @param {Element} el - Changed Node.\n\t     */\n\t    caret.set = function (el, index, offset) {\n\t\n\t        offset = offset || caret.offset || 0;\n\t        index = index || caret.focusedNodeIndex || 0;\n\t\n\t        var childs = el.childNodes,\n\t            nodeToSet;\n\t\n\t        if (childs.length === 0) {\n\t\n\t            nodeToSet = el;\n\t        } else {\n\t\n\t            nodeToSet = childs[index];\n\t        }\n\t\n\t        /** If Element is INPUT */\n\t        if (el.contentEditable != 'true') {\n\t\n\t            el.focus();\n\t            return;\n\t        }\n\t\n\t        if (editor.core.isDomNode(nodeToSet)) {\n\t\n\t            nodeToSet = editor.content.getDeepestTextNodeFromPosition(nodeToSet, nodeToSet.childNodes.length);\n\t        }\n\t\n\t        var range = document.createRange(),\n\t            selection = window.getSelection();\n\t\n\t        window.setTimeout(function () {\n\t\n\t            range.setStart(nodeToSet, offset);\n\t            range.setEnd(nodeToSet, offset);\n\t\n\t            selection.removeAllRanges();\n\t            selection.addRange(range);\n\t\n\t            editor.caret.saveCurrentInputIndex();\n\t        }, 20);\n\t    };\n\t\n\t    /**\n\t     * @protected\n\t     * Updates index of input and saves it in caret object\n\t     */\n\t    caret.saveCurrentInputIndex = function () {\n\t\n\t        /** Index of Input that we paste sanitized content */\n\t        var selection = window.getSelection(),\n\t            inputs = editor.state.inputs,\n\t            focusedNode = selection.anchorNode,\n\t            focusedNodeHolder;\n\t\n\t        if (!focusedNode) {\n\t\n\t            return;\n\t        }\n\t\n\t        /** Looking for parent contentEditable block */\n\t        while (focusedNode.contentEditable != 'true') {\n\t\n\t            focusedNodeHolder = focusedNode.parentNode;\n\t            focusedNode = focusedNodeHolder;\n\t        }\n\t\n\t        /** Input index in DOM level */\n\t        var editableElementIndex = 0;\n\t\n\t        while (focusedNode != inputs[editableElementIndex]) {\n\t\n\t            editableElementIndex++;\n\t        }\n\t\n\t        caret.inputIndex = editableElementIndex;\n\t    };\n\t\n\t    /**\n\t     * Returns current input index (caret object)\n\t     */\n\t    caret.getCurrentInputIndex = function () {\n\t\n\t        return caret.inputIndex;\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of first-level block after that we set caret into next input\n\t     */\n\t    caret.setToNextBlock = function (index) {\n\t\n\t        var inputs = editor.state.inputs,\n\t            nextInput = inputs[index + 1];\n\t\n\t        if (!nextInput) {\n\t\n\t            editor.core.log('We are reached the end');\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!nextInput.childNodes.length) {\n\t\n\t            var emptyTextElement = document.createTextNode('');\n\t\n\t            nextInput.appendChild(emptyTextElement);\n\t        }\n\t\n\t        editor.caret.inputIndex = index + 1;\n\t        editor.caret.set(nextInput, 0, 0);\n\t        editor.content.workingNodeChanged(nextInput);\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of target input.\n\t     * Sets caret to input with this index\n\t     */\n\t    caret.setToBlock = function (index) {\n\t\n\t        var inputs = editor.state.inputs,\n\t            targetInput = inputs[index];\n\t\n\t        if (!targetInput) {\n\t\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!targetInput.childNodes.length) {\n\t\n\t            var emptyTextElement = document.createTextNode('');\n\t\n\t            targetInput.appendChild(emptyTextElement);\n\t        }\n\t\n\t        editor.caret.inputIndex = index;\n\t        editor.caret.set(targetInput, 0, 0);\n\t        editor.content.workingNodeChanged(targetInput);\n\t    };\n\t\n\t    /**\n\t     * @param {int} index - index of input\n\t     */\n\t    caret.setToPreviousBlock = function (index) {\n\t\n\t        index = index || 0;\n\t\n\t        var inputs = editor.state.inputs,\n\t            previousInput = inputs[index - 1],\n\t            lastChildNode,\n\t            lengthOfLastChildNode,\n\t            emptyTextElement;\n\t\n\t        if (!previousInput) {\n\t\n\t            editor.core.log('We are reached first node');\n\t            return;\n\t        }\n\t\n\t        lastChildNode = editor.content.getDeepestTextNodeFromPosition(previousInput, previousInput.childNodes.length);\n\t        lengthOfLastChildNode = lastChildNode.length;\n\t\n\t        /**\n\t         * When new Block created or deleted content of input\n\t         * We should add some text node to set caret\n\t         */\n\t        if (!previousInput.childNodes.length) {\n\t\n\t            emptyTextElement = document.createTextNode('');\n\t            previousInput.appendChild(emptyTextElement);\n\t        }\n\t        editor.caret.inputIndex = index - 1;\n\t        editor.caret.set(previousInput, previousInput.childNodes.length - 1, lengthOfLastChildNode);\n\t        editor.content.workingNodeChanged(inputs[index - 1]);\n\t    };\n\t\n\t    caret.position = {\n\t\n\t        atStart: function atStart() {\n\t\n\t            var selection = window.getSelection(),\n\t                anchorOffset = selection.anchorOffset,\n\t                anchorNode = selection.anchorNode,\n\t                firstLevelBlock = editor.content.getFirstLevelBlock(anchorNode),\n\t                pluginsRender = firstLevelBlock.childNodes[0];\n\t\n\t            if (!editor.core.isDomNode(anchorNode)) {\n\t\n\t                anchorNode = anchorNode.parentNode;\n\t            }\n\t\n\t            var isFirstNode = anchorNode === pluginsRender.childNodes[0],\n\t                isOffsetZero = anchorOffset === 0;\n\t\n\t            return isFirstNode && isOffsetZero;\n\t        },\n\t\n\t        atTheEnd: function atTheEnd() {\n\t\n\t            var selection = window.getSelection(),\n\t                anchorOffset = selection.anchorOffset,\n\t                anchorNode = selection.anchorNode;\n\t\n\t            /** Caret is at the end of input */\n\t            return !anchorNode || !anchorNode.length || anchorOffset === anchorNode.length;\n\t        }\n\t    };\n\t\n\t    return caret;\n\t}({});\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Notification Module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (notifications) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    var queue = [];\n\t\n\t    var addToQueue = function addToQueue(settings) {\n\t\n\t        queue.push(settings);\n\t\n\t        var index = 0;\n\t\n\t        while (index < queue.length && queue.length > 5) {\n\t\n\t            if (queue[index].type == 'confirm' || queue[index].type == 'prompt') {\n\t\n\t                index++;\n\t                continue;\n\t            }\n\t\n\t            queue[index].close();\n\t            queue.splice(index, 1);\n\t        }\n\t    };\n\t\n\t    notifications.createHolder = function () {\n\t\n\t        var holder = editor.draw.node('DIV', 'cdx-notifications-block');\n\t\n\t        editor.nodes.notifications = document.body.appendChild(holder);\n\t\n\t        return holder;\n\t    };\n\t\n\t    /**\n\t     * Error notificator. Shows block with message\n\t     * @protected\n\t     */\n\t    notifications.errorThrown = function (errorMsg, event) {\n\t\n\t        editor.notifications.notification({ message: 'This action is not available currently', type: event.type });\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Appends notification\n\t     *\n\t     *  settings = {\n\t     *      type        - notification type (reserved types: alert, confirm, prompt). Just add class 'cdx-notification-'+type\n\t     *      message     - notification message\n\t     *      okMsg       - confirm button text (default - 'Ok')\n\t     *      cancelBtn   - cancel button text (default - 'Cancel'). Only for confirm and prompt types\n\t     *      confirm     - function-handler for ok button click\n\t     *      cancel      - function-handler for cancel button click. Only for confirm and prompt types\n\t     *      time        - time (in seconds) after which notification will close (default - 10s)\n\t     *  }\n\t     *\n\t     * @param settings\n\t     */\n\t    notifications.notification = function (constructorSettings) {\n\t\n\t        /** Private vars and methods */\n\t        var notification = null,\n\t            cancel = null,\n\t            type = null,\n\t            confirm = null,\n\t            inputField = null;\n\t\n\t        var confirmHandler = function confirmHandler() {\n\t\n\t            close();\n\t\n\t            if (typeof confirm !== 'function') {\n\t\n\t                return;\n\t            }\n\t\n\t            if (type == 'prompt') {\n\t\n\t                confirm(inputField.value);\n\t                return;\n\t            }\n\t\n\t            confirm();\n\t        };\n\t\n\t        var cancelHandler = function cancelHandler() {\n\t\n\t            close();\n\t\n\t            if (typeof cancel !== 'function') {\n\t\n\t                return;\n\t            }\n\t\n\t            cancel();\n\t        };\n\t\n\t        /** Public methods */\n\t        function create(settings) {\n\t\n\t            if (!(settings && settings.message)) {\n\t\n\t                editor.core.log('Can\\'t create notification. Message is missed');\n\t                return;\n\t            }\n\t\n\t            settings.type = settings.type || 'alert';\n\t            settings.time = settings.time * 1000 || 10000;\n\t\n\t            var wrapper = editor.draw.node('DIV', 'cdx-notification'),\n\t                message = editor.draw.node('DIV', 'cdx-notification__message'),\n\t                input = editor.draw.node('INPUT', 'cdx-notification__input'),\n\t                okBtn = editor.draw.node('SPAN', 'cdx-notification__ok-btn'),\n\t                cancelBtn = editor.draw.node('SPAN', 'cdx-notification__cancel-btn');\n\t\n\t            message.textContent = settings.message;\n\t            okBtn.textContent = settings.okMsg || 'ОК';\n\t            cancelBtn.textContent = settings.cancelMsg || 'Отмена';\n\t\n\t            editor.listeners.add(okBtn, 'click', confirmHandler);\n\t            editor.listeners.add(cancelBtn, 'click', cancelHandler);\n\t\n\t            wrapper.appendChild(message);\n\t\n\t            if (settings.type == 'prompt') {\n\t\n\t                wrapper.appendChild(input);\n\t            }\n\t\n\t            wrapper.appendChild(okBtn);\n\t\n\t            if (settings.type == 'prompt' || settings.type == 'confirm') {\n\t\n\t                wrapper.appendChild(cancelBtn);\n\t            }\n\t\n\t            wrapper.classList.add('cdx-notification-' + settings.type);\n\t            wrapper.dataset.type = settings.type;\n\t\n\t            notification = wrapper;\n\t            type = settings.type;\n\t            confirm = settings.confirm;\n\t            cancel = settings.cancel;\n\t            inputField = input;\n\t\n\t            if (settings.type != 'prompt' && settings.type != 'confirm') {\n\t\n\t                window.setTimeout(close, settings.time);\n\t            }\n\t        };\n\t\n\t        function send() {\n\t\n\t            editor.nodes.notifications.appendChild(notification);\n\t            inputField.focus();\n\t\n\t            editor.nodes.notifications.classList.add('cdx-notification__notification-appending');\n\t\n\t            window.setTimeout(function () {\n\t\n\t                editor.nodes.notifications.classList.remove('cdx-notification__notification-appending');\n\t            }, 100);\n\t\n\t            addToQueue({ type: type, close: close });\n\t        };\n\t\n\t        function close() {\n\t\n\t            notification.remove();\n\t        };\n\t\n\t        if (constructorSettings) {\n\t\n\t            create(constructorSettings);\n\t            send();\n\t        }\n\t\n\t        return {\n\t            create: create,\n\t            send: send,\n\t            close: close\n\t        };\n\t    };\n\t\n\t    notifications.clear = function () {\n\t\n\t        editor.nodes.notifications.innerHTML = '';\n\t        queue = [];\n\t    };\n\t\n\t    return notifications;\n\t}({});\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Codex Editor Parser Module\n\t *\n\t * @author Codex Team\n\t * @version 1.1\n\t */\n\t\n\tmodule.exports = function (parser) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    /** inserting text */\n\t    parser.insertPastedContent = function (blockType, tag) {\n\t\n\t        editor.content.insertBlock({\n\t            type: blockType.type,\n\t            block: blockType.render({\n\t                text: tag.innerHTML\n\t            })\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Check DOM node for display style: separated block or child-view\n\t     */\n\t    parser.isFirstLevelBlock = function (node) {\n\t\n\t        return node.nodeType == editor.core.nodeTypes.TAG && node.classList.contains(editor.ui.className.BLOCK_CLASSNAME);\n\t    };\n\t\n\t    return parser;\n\t}({});\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Sanitizer\n\t */\n\t\n\tmodule.exports = function (sanitizer) {\n\t\n\t    var janitor = __webpack_require__(18);\n\t\n\t    /**\n\t     * Basic config\n\t     */\n\t    var Config = {\n\t\n\t        BASIC: {\n\t\n\t            tags: {\n\t                p: {},\n\t                a: {\n\t                    href: true,\n\t                    target: '_blank',\n\t                    rel: 'nofollow'\n\t                },\n\t                i: {},\n\t                b: {},\n\t                strong: {},\n\t                em: {},\n\t                span: {}\n\t            }\n\t        }\n\t    };\n\t\n\t    sanitizer.Config = Config;\n\t\n\t    sanitizer.init = janitor;\n\t\n\t    return sanitizer;\n\t}({});\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    module.exports = factory();\n\t  } else {\n\t    root.HTMLJanitor = factory();\n\t  }\n\t}(this, function () {\n\t\n\t  /**\n\t   * @param {Object} config.tags Dictionary of allowed tags.\n\t   * @param {boolean} config.keepNestedBlockElements Default false.\n\t   */\n\t  function HTMLJanitor(config) {\n\t\n\t    var tagDefinitions = config['tags'];\n\t    var tags = Object.keys(tagDefinitions);\n\t\n\t    var validConfigValues = tags\n\t      .map(function(k) { return typeof tagDefinitions[k]; })\n\t      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\t\n\t    if(!validConfigValues) {\n\t      throw new Error(\"The configuration was invalid\");\n\t    }\n\t\n\t    this.config = config;\n\t  }\n\t\n\t  // TODO: not exhaustive?\n\t  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n\t  function isBlockElement(node) {\n\t    return blockElementNames.indexOf(node.nodeName) !== -1;\n\t  }\n\t\n\t  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n\t  function isInlineElement(node) {\n\t    return inlineElementNames.indexOf(node.nodeName) !== -1;\n\t  }\n\t\n\t  HTMLJanitor.prototype.clean = function (html) {\n\t    var sandbox = document.createElement('div');\n\t    sandbox.innerHTML = html;\n\t\n\t    this._sanitize(sandbox);\n\t\n\t    return sandbox.innerHTML;\n\t  };\n\t\n\t  HTMLJanitor.prototype._sanitize = function (parentNode) {\n\t    var treeWalker = createTreeWalker(parentNode);\n\t    var node = treeWalker.firstChild();\n\t    if (!node) { return; }\n\t\n\t    do {\n\t      // Ignore nodes that have already been sanitized\n\t      if (node._sanitized) {\n\t        continue;\n\t      }\n\t\n\t      if (node.nodeType === Node.TEXT_NODE) {\n\t        // If this text node is just whitespace and the previous or next element\n\t        // sibling is a block element, remove it\n\t        // N.B.: This heuristic could change. Very specific to a bug with\n\t        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n\t        // FIXME: make this an option?\n\t        if (node.data.trim() === ''\n\t            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n\t                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n\t          parentNode.removeChild(node);\n\t          this._sanitize(parentNode);\n\t          break;\n\t        } else {\n\t          continue;\n\t        }\n\t      }\n\t\n\t      // Remove all comments\n\t      if (node.nodeType === Node.COMMENT_NODE) {\n\t        parentNode.removeChild(node);\n\t        this._sanitize(parentNode);\n\t        break;\n\t      }\n\t\n\t      var isInline = isInlineElement(node);\n\t      var containsBlockElement;\n\t      if (isInline) {\n\t        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n\t      }\n\t\n\t      // Block elements should not be nested (e.g. <li><p>...); if\n\t      // they are, we want to unwrap the inner block element.\n\t      var isNotTopContainer = !! parentNode.parentNode;\n\t      var isNestedBlockElement =\n\t            isBlockElement(parentNode) &&\n\t            isBlockElement(node) &&\n\t            isNotTopContainer;\n\t\n\t      var nodeName = node.nodeName.toLowerCase();\n\t\n\t      var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);\n\t\n\t      var isInvalid = isInline && containsBlockElement;\n\t\n\t      // Drop tag entirely according to the whitelist *and* if the markup\n\t      // is invalid.\n\t      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n\t          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n\t        // Do not keep the inner text of SCRIPT/STYLE elements.\n\t        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n\t          while (node.childNodes.length > 0) {\n\t            parentNode.insertBefore(node.childNodes[0], node);\n\t          }\n\t        }\n\t        parentNode.removeChild(node);\n\t\n\t        this._sanitize(parentNode);\n\t        break;\n\t      }\n\t\n\t      // Sanitize attributes\n\t      for (var a = 0; a < node.attributes.length; a += 1) {\n\t        var attr = node.attributes[a];\n\t\n\t        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n\t          node.removeAttribute(attr.name);\n\t          // Shift the array to continue looping.\n\t          a = a - 1;\n\t        }\n\t      }\n\t\n\t      // Sanitize children\n\t      this._sanitize(node);\n\t\n\t      // Mark node as sanitized so it's ignored in future runs\n\t      node._sanitized = true;\n\t    } while ((node = treeWalker.nextSibling()));\n\t  };\n\t\n\t  function createTreeWalker(node) {\n\t    return document.createTreeWalker(node,\n\t                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n\t                                     null, false);\n\t  }\n\t\n\t  function getAllowedAttrs(config, nodeName, node){\n\t    if (typeof config.tags[nodeName] === 'function') {\n\t      return config.tags[nodeName](node);\n\t    } else {\n\t      return config.tags[nodeName];\n\t    }\n\t  }\n\t\n\t  function shouldRejectNode(node, allowedAttrs){\n\t    if (typeof allowedAttrs === 'undefined') {\n\t      return true;\n\t    } else if (typeof allowedAttrs === 'boolean') {\n\t      return !allowedAttrs;\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  function shouldRejectAttr(attr, allowedAttrs, node){\n\t    var attrName = attr.name.toLowerCase();\n\t\n\t    if (allowedAttrs === true){\n\t      return false;\n\t    } else if (typeof allowedAttrs[attrName] === 'function'){\n\t      return !allowedAttrs[attrName](attr.value, node);\n\t    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n\t      return true;\n\t    } else if (allowedAttrs[attrName] === false) {\n\t      return true;\n\t    } else if (typeof allowedAttrs[attrName] === 'string') {\n\t      return (allowedAttrs[attrName] !== attr.value);\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  return HTMLJanitor;\n\t\n\t}));\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Anchors module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (anchors) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    anchors.input = null;\n\t    anchors.currentNode = null;\n\t\n\t    anchors.settingsOpened = function (currentBlock) {\n\t\n\t        anchors.currentNode = currentBlock;\n\t        anchors.input.value = anchors.currentNode.dataset.anchor || '';\n\t    };\n\t\n\t    anchors.anchorChanged = function (e) {\n\t\n\t        var newAnchor = e.target.value = anchors.rusToTranslit(e.target.value);\n\t\n\t        anchors.currentNode.dataset.anchor = newAnchor;\n\t\n\t        if (newAnchor.trim() !== '') {\n\t\n\t            anchors.currentNode.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\t        } else {\n\t\n\t            anchors.currentNode.classList.remove(editor.ui.className.BLOCK_WITH_ANCHOR);\n\t        }\n\t    };\n\t\n\t    anchors.keyDownOnAnchorInput = function (e) {\n\t\n\t        if (e.keyCode == editor.core.keys.ENTER) {\n\t\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t\n\t            e.target.blur();\n\t            editor.toolbar.settings.close();\n\t        }\n\t    };\n\t\n\t    anchors.keyUpOnAnchorInput = function (e) {\n\t\n\t        if (e.keyCode >= editor.core.keys.LEFT && e.keyCode <= editor.core.keys.DOWN) {\n\t\n\t            e.stopPropagation();\n\t        }\n\t    };\n\t\n\t    anchors.rusToTranslit = function (string) {\n\t\n\t        var ru = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ы', 'Ь', 'Э', 'Ю', 'Я'],\n\t            en = ['A', 'B', 'V', 'G', 'D', 'E', 'E', 'Zh', 'Z', 'I', 'Y', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F', 'H', 'C', 'Ch', 'Sh', 'Sch', '', 'Y', '', 'E', 'Yu', 'Ya'];\n\t\n\t        for (var i = 0; i < ru.length; i++) {\n\t\n\t            string = string.split(ru[i]).join(en[i]);\n\t            string = string.split(ru[i].toLowerCase()).join(en[i].toLowerCase());\n\t        }\n\t\n\t        string = string.replace(/[^0-9a-zA-Z_]+/g, '-');\n\t\n\t        return string;\n\t    };\n\t\n\t    return anchors;\n\t}({});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Codex Editor Listeners module\n\t *\n\t * @author Codex Team\n\t * @version 1.0\n\t */\n\t\n\t/**\n\t * Module-decorator for event listeners assignment\n\t */\n\tmodule.exports = function (listeners) {\n\t\n\t    var allListeners = [];\n\t\n\t    /**\n\t     * Search methods\n\t     *\n\t     * byElement, byType and byHandler returns array of suitable listeners\n\t     * one and all takes element, eventType, and handler and returns first (all) suitable listener\n\t     *\n\t     */\n\t    listeners.search = function () {\n\t\n\t        var byElement = function byElement(element, context) {\n\t\n\t            var listenersOnElement = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.element === element) {\n\t\n\t                    listenersOnElement.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersOnElement;\n\t        };\n\t\n\t        var byType = function byType(eventType, context) {\n\t\n\t            var listenersWithType = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.type === eventType) {\n\t\n\t                    listenersWithType.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersWithType;\n\t        };\n\t\n\t        var byHandler = function byHandler(handler, context) {\n\t\n\t            var listenersWithHandler = [];\n\t\n\t            context = context || allListeners;\n\t\n\t            for (var i = 0; i < context.length; i++) {\n\t\n\t                var listener = context[i];\n\t\n\t                if (listener.handler === handler) {\n\t\n\t                    listenersWithHandler.push(listener);\n\t                }\n\t            }\n\t\n\t            return listenersWithHandler;\n\t        };\n\t\n\t        var one = function one(element, eventType, handler) {\n\t\n\t            var result = allListeners;\n\t\n\t            if (element) result = byElement(element, result);\n\t\n\t            if (eventType) result = byType(eventType, result);\n\t\n\t            if (handler) result = byHandler(handler, result);\n\t\n\t            return result[0];\n\t        };\n\t\n\t        var all = function all(element, eventType, handler) {\n\t\n\t            var result = allListeners;\n\t\n\t            if (element) result = byElement(element, result);\n\t\n\t            if (eventType) result = byType(eventType, result);\n\t\n\t            if (handler) result = byHandler(handler, result);\n\t\n\t            return result;\n\t        };\n\t\n\t        return {\n\t            byElement: byElement,\n\t            byType: byType,\n\t            byHandler: byHandler,\n\t            one: one,\n\t            all: all\n\t        };\n\t    }();\n\t\n\t    listeners.add = function (element, eventType, handler, isCapture) {\n\t\n\t        element.addEventListener(eventType, handler, isCapture);\n\t\n\t        var data = {\n\t            element: element,\n\t            type: eventType,\n\t            handler: handler\n\t        };\n\t\n\t        var alreadyAddedListener = listeners.search.one(element, eventType, handler);\n\t\n\t        if (!alreadyAddedListener) {\n\t\n\t            allListeners.push(data);\n\t        }\n\t    };\n\t\n\t    listeners.remove = function (element, eventType, handler) {\n\t\n\t        element.removeEventListener(eventType, handler);\n\t\n\t        var existingListeners = listeners.search.all(element, eventType, handler);\n\t\n\t        for (var i = 0; i < existingListeners.length; i++) {\n\t\n\t            var index = allListeners.indexOf(existingListeners[i]);\n\t\n\t            if (index > 0) {\n\t\n\t                allListeners.splice(index, 1);\n\t            }\n\t        }\n\t    };\n\t\n\t    listeners.removeAll = function () {\n\t\n\t        allListeners.map(function (current) {\n\t\n\t            listeners.remove(current.element, current.type, current.handler);\n\t        });\n\t    };\n\t\n\t    listeners.get = function (element, eventType, handler) {\n\t\n\t        return listeners.search.all(element, eventType, handler);\n\t    };\n\t\n\t    return listeners;\n\t}({});\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Codex Editor Destroyer module\n\t *\n\t * @auhor Codex Team\n\t * @version 1.0\n\t */\n\t\n\tmodule.exports = function (destroyer) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    destroyer.removeNodes = function () {\n\t\n\t        editor.nodes.wrapper.remove();\n\t        editor.nodes.notifications.remove();\n\t    };\n\t\n\t    destroyer.destroyPlugins = function () {\n\t\n\t        for (var tool in editor.tools) {\n\t\n\t            if (typeof editor.tools[tool].destroy === 'function') {\n\t\n\t                editor.tools[tool].destroy();\n\t            }\n\t        }\n\t    };\n\t\n\t    destroyer.destroyScripts = function () {\n\t\n\t        var scripts = document.getElementsByTagName('SCRIPT');\n\t\n\t        for (var i = 0; i < scripts.length; i++) {\n\t\n\t            if (scripts[i].id.indexOf(editor.scriptPrefix) + 1) {\n\t\n\t                scripts[i].remove();\n\t                i--;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Delete editor data from webpage.\n\t     * You should send settings argument with boolean flags:\n\t     * @param settings.ui- remove redactor event listeners and DOM nodes\n\t     * @param settings.scripts - remove redactor scripts from DOM\n\t     * @param settings.plugins - remove plugin's objects\n\t     * @param settings.core - remove editor core. You can remove core only if UI and scripts flags is true\n\t     * }\n\t     *\n\t     */\n\t    destroyer.destroy = function (settings) {\n\t\n\t        if (!settings || (typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n\t\n\t            return;\n\t        }\n\t\n\t        if (settings.ui) {\n\t\n\t            destroyer.removeNodes();\n\t            editor.listeners.removeAll();\n\t        }\n\t\n\t        if (settings.scripts) {\n\t\n\t            destroyer.destroyScripts();\n\t        }\n\t\n\t        if (settings.plugins) {\n\t\n\t            destroyer.destroyPlugins();\n\t        }\n\t\n\t        if (settings.ui && settings.scripts && settings.core) {\n\t\n\t            delete codex.editor;\n\t        }\n\t    };\n\t\n\t    return destroyer;\n\t}({});\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Codex Editor Paste module\n\t *\n\t * @author Codex Team\n\t * @version 1.1.1\n\t */\n\t\n\tmodule.exports = function (paste) {\n\t\n\t    var editor = codex.editor;\n\t\n\t    var patterns = [];\n\t\n\t    paste.prepare = function () {\n\t\n\t        var tools = editor.tools;\n\t\n\t        for (var tool in tools) {\n\t\n\t            if (!tools[tool].renderOnPastePatterns || !Array.isArray(tools[tool].renderOnPastePatterns)) {\n\t\n\t                continue;\n\t            }\n\t\n\t            tools[tool].renderOnPastePatterns.map(function (pattern) {\n\t\n\t                patterns.push(pattern);\n\t            });\n\t        }\n\t\n\t        return Promise.resolve();\n\t    };\n\t\n\t    /**\n\t     * Saves data\n\t     * @param event\n\t     */\n\t    paste.pasted = function (event) {\n\t\n\t        var clipBoardData = event.clipboardData || window.clipboardData,\n\t            content = clipBoardData.getData('Text');\n\t\n\t        var result = analize(content);\n\t\n\t        if (result) {\n\t\n\t            event.preventDefault();\n\t            event.stopImmediatePropagation();\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Analizes pated string and calls necessary method\n\t     */\n\t\n\t    var analize = function analize(string) {\n\t\n\t        var result = false,\n\t            content = editor.content.currentNode,\n\t            plugin = content.dataset.tool;\n\t\n\t        patterns.map(function (pattern) {\n\t\n\t            var execArray = pattern.regex.exec(string),\n\t                match = execArray && execArray[0];\n\t\n\t            if (match && match === string.trim()) {\n\t\n\t                /** current block is not empty */\n\t                if (content.textContent.trim() && plugin == editor.settings.initialBlockPlugin) {\n\t\n\t                    pasteToNewBlock_();\n\t                }\n\t\n\t                pattern.callback(string, pattern);\n\t                result = true;\n\t            }\n\t        });\n\t\n\t        return result;\n\t    };\n\t\n\t    var pasteToNewBlock_ = function pasteToNewBlock_() {\n\t\n\t        /** Create new initial block */\n\t        editor.content.insertBlock({\n\t\n\t            type: editor.settings.initialBlockPlugin,\n\t            block: editor.tools[editor.settings.initialBlockPlugin].render({\n\t                text: ''\n\t            })\n\t\n\t        }, false);\n\t    };\n\t\n\t    return paste;\n\t}({});\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// codex-editor.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9c13fefb171ed62d357b","/**\n *\n * Codex Editor\n *\n * @author Codex Team\n */\n\nmodule.exports = (function (editor) {\n\n    'use strict';\n\n    editor.version = VERSION;\n    editor.scriptPrefix = 'cdx-script-';\n\n    var init = function () {\n\n        editor.core          = require('./modules/core');\n        editor.tools         = require('./modules/tools');\n        editor.ui            = require('./modules/ui');\n        editor.transport     = require('./modules/transport');\n        editor.renderer      = require('./modules/renderer');\n        editor.saver         = require('./modules/saver');\n        editor.content       = require('./modules/content');\n        editor.toolbar       = require('./modules/toolbar/toolbar');\n        editor.callback      = require('./modules/callbacks');\n        editor.draw          = require('./modules/draw');\n        editor.caret         = require('./modules/caret');\n        editor.notifications = require('./modules/notifications');\n        editor.parser        = require('./modules/parser');\n        editor.sanitizer     = require('./modules/sanitizer');\n        editor.anchors       = require('./modules/anchors');\n        editor.listeners     = require('./modules/listeners');\n        editor.destroyer     = require('./modules/destroyer');\n        editor.paste         = require('./modules/paste');\n\n    };\n\n    /**\n     * @public\n     *\n     * holds initial settings\n     */\n    editor.settings = {\n        tools     : ['paragraph', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n        textareaId: 'codex-editor',\n        uploadImagesUrl: '/editor/transport/',\n\n        // Type of block showing on empty editor\n        initialBlockPlugin: 'paragraph'\n    };\n\n    /**\n     * public\n     *\n     * Static nodes\n     */\n    editor.nodes = {\n        textarea          : null,\n        wrapper           : null,\n        toolbar           : null,\n        inlineToolbar     : {\n            wrapper : null,\n            buttons : null,\n            actions : null\n        },\n        toolbox           : null,\n        notifications     : null,\n        plusButton        : null,\n        showSettingsButton: null,\n        showTrashButton   : null,\n        blockSettings     : null,\n        pluginSettings    : null,\n        defaultSettings   : null,\n        toolbarButtons    : {}, // { type : DomEl, ... }\n        redactor          : null\n    };\n\n    /**\n     * @public\n     *\n     * Output state\n     */\n    editor.state = {\n        jsonOutput  : [],\n        blocks      : [],\n        inputs      : []\n    };\n\n    /**\n    * @public\n    * Editor plugins\n    */\n    editor.tools = {};\n\n    /**\n     * Initialization\n     * @uses Promise cEditor.core.prepare\n     * @param {} userSettings are :\n     *          - tools [],\n     *          - textareaId String\n     *          ...\n     *\n     * Load user defined tools\n     * Tools must contain this important objects :\n     *  @param {String} type - this is a type of plugin. It can be used as plugin name\n     *  @param {String} iconClassname - this a icon in toolbar\n     *  @param {Object} make - what should plugin do, when it is clicked\n     *  @param {Object} appendCallback - callback after clicking\n     *  @param {Element} settings - what settings does it have\n     *  @param {Object} render - plugin get JSON, and should return HTML\n     *  @param {Object} save - plugin gets HTML content, returns JSON\n     *  @param {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n     *  @param {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n     *\n     * @example\n     *   -  type             : 'header',\n     *   -  iconClassname    : 'ce-icon-header',\n     *   -  make             : headerTool.make,\n     *   -  appendCallback   : headerTool.appendCallback,\n     *   -  settings         : headerTool.makeSettings(),\n     *   -  render           : headerTool.render,\n     *   -  save             : headerTool.save,\n     *   -  displayInToolbox : true,\n     *   -  enableLineBreaks : false\n     */\n    editor.start = function (userSettings) {\n\n        init();\n\n        editor.core.prepare(userSettings)\n\n        // If all ok, make UI, bind events and parse initial-content\n            .then(editor.ui.make)\n            .then(editor.ui.bindEvents)\n            .then(editor.tools.prepare)\n            .then(editor.paste.prepare)\n            .then(editor.transport.prepare)\n            .then(editor.renderer.makeBlocksFromData)\n            .then(editor.ui.saveInputs)\n            .catch(function (error) {\n\n                editor.core.log('Initialization failed with error: %o', 'warn', error);\n\n            });\n\n    };\n\n    return editor;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./codex.js","/**\n * Codex Editor Core\n *\n * @author Codex Team\n * @version 1.1.3\n */\n\nmodule.exports = (function (core) {\n\n    let editor = codex.editor;\n\n    /**\n     * @public\n     *\n     * Editor preparing method\n     * @return Promise\n     */\n    core.prepare = function (userSettings) {\n\n        return new Promise(function (resolve, reject) {\n\n            if ( userSettings ) {\n\n                editor.settings.tools = userSettings.tools || editor.settings.tools;\n\n            }\n\n            if (userSettings.data) {\n\n                editor.state.blocks = userSettings.data;\n\n            }\n\n            if (userSettings.initialBlockPlugin) {\n\n                editor.settings.initialBlockPlugin = userSettings.initialBlockPlugin;\n\n            }\n\n            editor.hideToolbar = userSettings.hideToolbar;\n\n            editor.nodes.textarea = document.getElementById(userSettings.textareaId || editor.settings.textareaId);\n\n            if (typeof editor.nodes.textarea === undefined || editor.nodes.textarea === null) {\n\n                reject(Error(\"Textarea wasn't found by ID: #\" + userSettings.textareaId));\n\n            } else {\n\n                resolve();\n\n            }\n\n        });\n\n    };\n\n    /**\n     * Logging method\n     * @param type = ['log', 'info', 'warn']\n     */\n    core.log = function (msg, type, arg) {\n\n        type = type || 'log';\n\n        if (!arg) {\n\n            arg  = msg || 'undefined';\n            msg  = '[codex-editor]:      %o';\n\n        } else {\n\n            msg  = '[codex-editor]:      ' + msg;\n\n        }\n\n        try{\n\n            if ( 'console' in window && window.console[ type ] ) {\n\n                if ( arg ) window.console[ type ]( msg, arg );\n                else window.console[ type ]( msg );\n\n            }\n\n        }catch(e) {}\n\n    };\n\n    /**\n     * @protected\n     *\n     * Helper for insert one element after another\n     */\n    core.insertAfter = function (target, element) {\n\n        target.parentNode.insertBefore(element, target.nextSibling);\n\n    };\n\n    /**\n     * @const\n     *\n     * Readable DOM-node types map\n     */\n    core.nodeTypes = {\n        TAG     : 1,\n        TEXT    : 3,\n        COMMENT : 8\n    };\n\n    /**\n     * @const\n     * Readable keys map\n     */\n    core.keys = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, DOWN: 40, RIGHT: 39, DELETE: 46, META: 91 };\n\n    /**\n     * @protected\n     *\n     * Check object for DOM node\n     */\n    core.isDomNode = function (el) {\n\n        return el && typeof el === 'object' && el.nodeType && el.nodeType == this.nodeTypes.TAG;\n\n    };\n\n    /**\n    * Checks passed object for emptiness\n    * @require ES5 - Object.keys\n    * @param {object}\n    */\n    core.isEmpty = function ( obj ) {\n\n        return Object.keys(obj).length === 0;\n\n    };\n\n    /**\n     * Native Ajax\n     */\n    core.ajax = function (settings) {\n\n        if (!settings || !settings.url) {\n\n            return;\n\n        }\n\n        var XMLHTTP          = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n            successFunction = function () {},\n            encodedString,\n            isFormData,\n            prop;\n\n        settings.async           = true;\n        settings.type            = settings.type || 'GET';\n        settings.data            = settings.data || '';\n        settings['content-type'] = settings['content-type'] || 'application/json; charset=utf-8';\n        successFunction     = settings.success || successFunction ;\n\n        if (settings.type == 'GET' && settings.data) {\n\n            settings.url = /\\?/.test(settings.url) ? settings.url + '&' + settings.data : settings.url + '?' + settings.data;\n\n        } else {\n\n            encodedString = '';\n            for(prop in settings.data) {\n\n                encodedString += (prop + '=' + encodeURIComponent(settings.data[prop]) + '&');\n\n            }\n\n        }\n\n        if (settings.withCredentials) {\n\n            XMLHTTP.withCredentials = true;\n\n        }\n\n        if (settings.beforeSend && typeof settings.beforeSend == 'function') {\n\n            settings.beforeSend.call();\n\n        }\n\n        XMLHTTP.open( settings.type, settings.url, settings.async );\n\n        /**\n         * If we send FormData, we need no content-type header\n         */\n        isFormData = isFormData_(settings.data);\n\n        if (!isFormData) {\n\n            if (settings.type != 'POST') {\n\n                XMLHTTP.setRequestHeader('Content-type', settings['content-type']);\n\n            } else {\n\n                XMLHTTP.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n            }\n\n        }\n\n        XMLHTTP.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n        XMLHTTP.onreadystatechange = function () {\n\n            if (XMLHTTP.readyState == 4 && XMLHTTP.status == 200) {\n\n                successFunction(XMLHTTP.responseText);\n\n            }\n\n        };\n\n        if (isFormData) {\n\n            // Sending FormData\n            XMLHTTP.send(settings.data);\n\n        } else {\n\n            // POST requests\n            XMLHTTP.send(encodedString);\n\n        }\n\n\n    };\n\n    /**\n    * Appends script to head of document\n    * @return Promise\n    */\n    core.importScript = function (scriptPath, instanceName) {\n\n        return new Promise(function (resolve, reject) {\n\n            let script;\n\n            /** Script is already loaded */\n            if ( !instanceName ) {\n\n                reject('Instance name is missed');\n\n            } else if ( document.getElementById(editor.scriptPrefix + instanceName) ) {\n\n                resolve(scriptPath);\n\n            }\n\n            script = document.createElement('SCRIPT');\n            script.async = true;\n            script.defer = true;\n            script.id = editor.scriptPrefix + instanceName;\n\n            script.onload = function () {\n\n                resolve(scriptPath);\n\n            };\n\n            script.onerror = function () {\n\n                reject(scriptPath);\n\n            };\n\n            script.src = scriptPath;\n            document.head.appendChild(script);\n\n        });\n\n    };\n\n    /**\n     * Function for checking is it FormData object to send.\n     * @param {Object} object to check\n     * @return boolean\n     */\n    var isFormData_ = function (object) {\n\n        return object instanceof FormData;\n\n    };\n\n    return core;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/core.js","/**\n* Module working with plugins\n*/\nmodule.exports = (function () {\n\n    let editor = codex.editor;\n\n    /**\n     * Initialize plugins before using\n     * Ex. Load scripts or call some internal methods\n     * @return Promise\n     */\n    function prepare() {\n\n        return new Promise(function (resolve_, reject_) {\n\n            Promise.resolve()\n\n                /**\n                * Compose a sequence of plugins that requires preparation\n                */\n                .then(function () {\n\n                    let pluginsRequiresPreparation = [],\n                        allPlugins = editor.tools;\n\n                    for ( let pluginName in allPlugins ) {\n\n                        let plugin = allPlugins[pluginName];\n\n                        if (plugin.prepare && typeof plugin.prepare != 'function' || !plugin.prepare) {\n\n                            continue;\n\n                        }\n\n                        pluginsRequiresPreparation.push(plugin);\n\n                    }\n\n                    /**\n                    * If no one passed plugins requires preparation, finish prepare() and go ahead\n                    */\n                    if (!pluginsRequiresPreparation.length) {\n\n                        resolve_();\n\n                    }\n\n                    return pluginsRequiresPreparation;\n\n                })\n\n                /** Wait plugins while they prepares */\n                .then(waitAllPluginsPreparation_)\n\n                .then(function () {\n\n                    editor.core.log('Plugins loaded', 'info');\n                    resolve_();\n\n                }).catch(function (error) {\n\n                    reject_(error);\n\n                });\n\n        });\n\n    }\n\n    /**\n    * @param {array} plugins - list of tools that requires preparation\n    * @return {Promise} resolved while all plugins will be ready or failed\n    */\n    function waitAllPluginsPreparation_(plugins) {\n\n        /**\n        * @calls allPluginsProcessed__ when all plugins prepared or failed\n        */\n        return new Promise (function (allPluginsProcessed__) {\n\n            /**\n             * pluck each element from queue\n             * First, send resolved Promise as previous value\n             * Each plugins \"prepare\" method returns a Promise, that's why\n             * reduce current element will not be able to continue while can't get\n             * a resolved Promise\n             *\n             * If last plugin is \"prepared\" then go to the next stage of initialization\n             */\n            plugins.reduce(function (previousValue, plugin, iteration) {\n\n                return previousValue.then(function () {\n\n                    /**\n                    * Wait till plugins prepared\n                    * @calls pluginIsReady__ when plugin is ready or failed\n                    */\n                    return new Promise ( function (pluginIsReady__) {\n\n                        callPluginsPrepareMethod_( plugin )\n\n                            .then( pluginIsReady__ )\n                            .then( function () {\n\n                                plugin.available = true;\n\n                            })\n\n                            .catch(function (error) {\n\n                                editor.core.log(`Plugin «${plugin.type}» was not loaded. Preparation failed because %o`, 'warn', error);\n                                plugin.available = false;\n                                plugin.loadingMessage = error;\n\n                                /** Go ahead even some plugin has problems */\n                                pluginIsReady__();\n\n                            })\n\n                            .then(function () {\n\n                                /** If last plugin has problems then just ignore and continue */\n                                if (iteration == plugins.length - 1) {\n\n                                    allPluginsProcessed__();\n\n                                }\n\n                            });\n\n                    });\n\n                });\n\n            }, Promise.resolve() );\n\n        });\n\n    }\n\n    var callPluginsPrepareMethod_ = function (plugin) {\n\n        return plugin.prepare( plugin.config || {} );\n\n    };\n\n    return {\n        prepare: prepare\n    };\n\n}());\n\n\n// WEBPACK FOOTER //\n// ./modules/tools.js","/**\n * Codex Editor UI module\n *\n * @author Codex Team\n * @version 1.2.0\n */\n\nmodule.exports = (function (ui) {\n\n    let editor = codex.editor;\n\n    /**\n     * Basic editor classnames\n     */\n    ui.className = {\n\n        /**\n         * @const {string} BLOCK_CLASSNAME - redactor blocks name\n         */\n        BLOCK_CLASSNAME : 'ce-block',\n\n        /**\n         * @const {String} wrapper for plugins content\n         */\n        BLOCK_CONTENT : 'ce-block__content',\n\n        /**\n         * @const {String} BLOCK_STRETCHED - makes block stretched\n         */\n        BLOCK_STRETCHED : 'ce-block--stretched',\n\n        /**\n         * @const {String} BLOCK_HIGHLIGHTED - adds background\n         */\n        BLOCK_HIGHLIGHTED : 'ce-block--focused',\n\n        /**\n         * @const {String} - highlights covered blocks\n         */\n        BLOCK_IN_FEED_MODE : 'ce-block--feed-mode',\n\n        /**\n         * @const {String} - Block with anchor\n         */\n        BLOCK_WITH_ANCHOR : 'ce-block--anchor',\n\n        /**\n         * @const {String} - for all default settings\n         */\n        SETTINGS_ITEM : 'ce-settings__item'\n\n    };\n\n    /**\n     * @protected\n     *\n     * Making main interface\n     */\n    ui.make = function () {\n\n        return new Promise(function (resolve) {\n\n            let wrapper  = editor.draw.wrapper(),\n                redactor = editor.draw.redactor(),\n                toolbar  = makeToolBar_();\n\n            wrapper.appendChild(toolbar);\n            wrapper.appendChild(redactor);\n\n            /** Save created ui-elements to static nodes state */\n            editor.nodes.wrapper  = wrapper;\n            editor.nodes.redactor = redactor;\n\n            /** Append editor wrapper with redactor zone  after initial textarea */\n            editor.core.insertAfter(editor.nodes.textarea, wrapper);\n\n            resolve();\n\n        })\n\n        /** Add toolbox tools */\n        .then(addTools_)\n\n        /** Make container for inline toolbar */\n        .then(makeInlineToolbar_)\n\n        /** Add inline toolbar tools */\n        .then(addInlineToolbarTools_)\n\n        /** Draw wrapper for notifications */\n        .then(makeNotificationHolder_)\n\n        /** fill in default settings */\n        .then(editor.toolbar.settings.addDefaultSettings)\n\n        .catch( function () {\n\n            editor.core.log(\"Can't draw editor interface\");\n\n        });\n\n    };\n\n    /**\n     * @private\n     * Draws inline toolbar zone\n     */\n    var makeInlineToolbar_ = function () {\n\n        var container = editor.draw.inlineToolbar();\n\n        /** Append to redactor new inline block */\n        editor.nodes.inlineToolbar.wrapper = container;\n\n        /** Draw toolbar buttons */\n        editor.nodes.inlineToolbar.buttons = editor.draw.inlineToolbarButtons();\n\n        /** Buttons action or settings */\n        editor.nodes.inlineToolbar.actions = editor.draw.inlineToolbarActions();\n\n        /** Append to inline toolbar buttons as part of it */\n        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.buttons);\n        editor.nodes.inlineToolbar.wrapper.appendChild(editor.nodes.inlineToolbar.actions);\n\n        editor.nodes.wrapper.appendChild(editor.nodes.inlineToolbar.wrapper);\n\n    };\n\n    var makeToolBar_ = function () {\n\n        let toolbar         = editor.draw.toolbar(),\n            blockButtons    = makeToolbarSettings_(),\n            toolbarContent  = makeToolbarContent_();\n\n        /** Appending first-level block buttons */\n        toolbar.appendChild(blockButtons);\n\n        /** Append toolbarContent to toolbar */\n        toolbar.appendChild(toolbarContent);\n\n        /** Make toolbar global */\n        editor.nodes.toolbar = toolbar;\n\n        return toolbar;\n\n    };\n\n    var makeToolbarContent_ = function () {\n\n        let toolbarContent = editor.draw.toolbarContent(),\n            toolbox        = editor.draw.toolbox(),\n            plusButton     = editor.draw.plusButton();\n\n        /** Append plus button */\n        toolbarContent.appendChild(plusButton);\n\n        /** Appending toolbar tools */\n        toolbarContent.appendChild(toolbox);\n\n        /** Make Toolbox and plusButton global */\n        editor.nodes.toolbox    = toolbox;\n        editor.nodes.plusButton = plusButton;\n\n        return toolbarContent;\n\n    };\n\n    var makeToolbarSettings_ = function () {\n\n        let blockSettings       = editor.draw.blockSettings(),\n            blockButtons        = editor.draw.blockButtons(),\n            defaultSettings     = editor.draw.defaultSettings(),\n            showSettingsButton  = editor.draw.settingsButton(),\n            showTrashButton     = editor.toolbar.settings.makeRemoveBlockButton(),\n            pluginSettings      = editor.draw.pluginsSettings();\n\n        /** Add default and plugins settings */\n        blockSettings.appendChild(pluginSettings);\n        blockSettings.appendChild(defaultSettings);\n\n        /**\n         * Make blocks buttons\n         * This block contains settings button and remove block button\n         */\n        blockButtons.appendChild(showSettingsButton);\n        blockButtons.appendChild(showTrashButton);\n        blockButtons.appendChild(blockSettings);\n\n        /** Make BlockSettings, PluginSettings, DefaultSettings global */\n        editor.nodes.blockSettings      = blockSettings;\n        editor.nodes.pluginSettings     = pluginSettings;\n        editor.nodes.defaultSettings    = defaultSettings;\n        editor.nodes.showSettingsButton = showSettingsButton;\n        editor.nodes.showTrashButton    = showTrashButton;\n\n        return blockButtons;\n\n    };\n\n    /** Draw notifications holder */\n    var makeNotificationHolder_ = function () {\n\n        /** Append block with notifications to the document */\n        editor.nodes.notifications = editor.notifications.createHolder();\n\n    };\n\n    /**\n     * @private\n     * Append tools passed in editor.tools\n     */\n    var addTools_ = function () {\n\n        var tool,\n            toolName,\n            toolButton;\n\n        for ( toolName in editor.settings.tools ) {\n\n            tool = editor.settings.tools[toolName];\n\n            editor.tools[toolName] = tool;\n\n            if (!tool.iconClassname && tool.displayInToolbox) {\n\n                editor.core.log('Toolbar icon classname missed. Tool %o skipped', 'warn', toolName);\n                continue;\n\n            }\n\n            if (typeof tool.render != 'function') {\n\n                editor.core.log('render method missed. Tool %o skipped', 'warn', toolName);\n                continue;\n\n            }\n\n            if (!tool.displayInToolbox) {\n\n                continue;\n\n            } else {\n\n                /** if tools is for toolbox */\n                toolButton = editor.draw.toolbarButton(toolName, tool.iconClassname);\n\n                editor.nodes.toolbox.appendChild(toolButton);\n\n                editor.nodes.toolbarButtons[toolName] = toolButton;\n\n            }\n\n        }\n\n    };\n\n    var addInlineToolbarTools_ = function () {\n\n        var tools = {\n\n            bold: {\n                icon    : 'ce-icon-bold',\n                command : 'bold'\n            },\n\n            italic: {\n                icon    : 'ce-icon-italic',\n                command : 'italic'\n            },\n\n            underline: {\n                icon    : 'ce-icon-underline',\n                command : 'underline'\n            },\n\n            link: {\n                icon    : 'ce-icon-link',\n                command : 'createLink'\n            }\n        };\n\n        var toolButton,\n            tool;\n\n        for(var name in tools) {\n\n            tool = tools[name];\n\n            toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n\n            editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n            /**\n             * Add callbacks to this buttons\n             */\n            editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n\n        }\n\n    };\n\n    /**\n     * @private\n     * Bind editor UI events\n     */\n    ui.bindEvents = function () {\n\n        editor.core.log('ui.bindEvents fired', 'info');\n\n        // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n        //     editor.notifications.errorThrown(errorMsg, event);\n        // }, false );\n\n        /** All keydowns on Document */\n        editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n\n        /** All keydowns on Redactor zone */\n        editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n\n        /** All keydowns on Document */\n        editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false );\n\n        /**\n         * Mouse click to radactor\n         */\n        editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false );\n\n        /**\n         * Clicks to the Plus button\n         */\n        editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n\n        /**\n         * Clicks to SETTINGS button in toolbar\n         */\n        editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false );\n\n        /** Bind click listeners on toolbar buttons */\n        for (var button in editor.nodes.toolbarButtons) {\n\n            editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n\n        }\n\n    };\n\n    ui.addBlockHandlers = function (block) {\n\n        if (!block) return;\n\n        /**\n         * Block keydowns\n         */\n        editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n\n        /**\n         * Pasting content from another source\n         * We have two type of sanitization\n         * First - uses deep-first search algorithm to get sub nodes,\n         * sanitizes whole Block_content and replaces cleared nodes\n         * This method is deprecated\n         * Method is used in editor.callback.blockPaste(event)\n         *\n         * Secont - uses Mutation observer.\n         * Observer \"observe\" DOM changes and send changings to callback.\n         * Callback gets changed node, not whole Block_content.\n         * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n         *\n         * Method is used in editor.callback.blockPasteViaSanitize(event)\n         *\n         * @uses html-janitor\n         * @example editor.callback.blockPasteViaSanitize(event), the second method.\n         *\n         */\n        editor.listeners.add(block, 'paste', editor.callback.blockPasteCallback, false);\n\n        editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n\n    };\n\n    /** getting all contenteditable elements */\n    ui.saveInputs = function () {\n\n        var redactor = editor.nodes.redactor;\n\n        editor.state.inputs = [];\n\n        /** Save all inputs in global variable state */\n        var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n\n        Array.prototype.map.call(inputs, function (current) {\n\n            if (!current.type || current.type == 'text' || current.type == 'textarea') {\n\n                editor.state.inputs.push(current);\n\n            }\n\n        });\n\n    };\n\n    /**\n     * Adds first initial block on empty redactor\n     */\n    ui.addInitialBlock = function () {\n\n        var initialBlockType = editor.settings.initialBlockPlugin,\n            initialBlock;\n\n        if ( !editor.tools[initialBlockType] ) {\n\n            editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n            return;\n\n        }\n\n        initialBlock = editor.tools[initialBlockType].render();\n\n        initialBlock.setAttribute('data-placeholder', 'Расскажите свою историю...');\n\n        editor.content.insertBlock({\n            type  : initialBlockType,\n            block : initialBlock\n        });\n\n        editor.content.workingNodeChanged(initialBlock);\n\n    };\n\n    ui.setInlineToolbarButtonBehaviour = function (button, type) {\n\n        editor.listeners.add(button, 'mousedown', function (event) {\n\n            editor.toolbar.inline.toolClicked(event, type);\n\n        }, false);\n\n    };\n\n    return ui;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/ui.js","/**\n *\n * Codex.Editor Transport Module\n *\n * @copyright 2017 Codex-Team\n * @version 1.2.0\n */\n\nmodule.exports = (function (transport) {\n\n    let editor = codex.editor;\n\n    /**\n     * @type {null} | {DOMElement} input - keeps input element in memory\n     */\n    transport.input = null;\n\n    /**\n     * @property {Object} arguments - keep plugin settings and defined callbacks\n     */\n    transport.arguments = null;\n\n    /**\n     * Prepares input element where will be files\n     */\n    transport.prepare = function () {\n\n        let input = editor.draw.node( 'INPUT', '', { type : 'file' } );\n\n        editor.listeners.add(input, 'change', editor.transport.fileSelected);\n        editor.transport.input = input;\n\n    };\n\n    /** Clear input when files is uploaded */\n    transport.clearInput = function () {\n\n        /** Remove old input */\n        transport.input = null;\n\n        /** Prepare new one */\n        transport.prepare();\n\n    };\n\n    /**\n     * Callback for file selection\n     * @param {Event} event\n     */\n    transport.fileSelected = function () {\n\n        var input       = this,\n            i,\n            files       = input.files,\n            formData   = new FormData();\n\n        if (editor.transport.arguments.multiple === false) {\n\n            formData.append('files', files[0], files[0].name);\n\n        } else {\n\n            for ( i = 0; i < files.length; i++) {\n\n                formData.append('files[]', files[i], files[i].name);\n\n            }\n\n        }\n\n        editor.core.ajax({\n            type : 'POST',\n            data : formData,\n            url        : editor.transport.arguments.url,\n            beforeSend : editor.transport.arguments.beforeSend,\n            success    : editor.transport.arguments.success,\n            error      : editor.transport.arguments.error\n        });\n\n        /** Clear input */\n        transport.clearInput();\n\n    };\n\n    /**\n     * Use plugin callbacks\n     * @protected\n     *\n     * @param {Object} args - can have :\n     * @param {String} args.url - fetch URL\n     * @param {Function} args.beforeSend - function calls before sending ajax\n     * @param {Function} args.success - success callback\n     * @param {Function} args.error - on error handler\n     * @param {Boolean} args.multiple - allow select several files\n     * @param {String} args.accept - adds accept attribute\n     */\n    transport.selectAndUpload = function (args) {\n\n        transport.arguments = args;\n\n        if ( args.multiple === true) {\n\n            transport.input.setAttribute('multiple', 'multiple');\n\n        }\n\n        if ( args.accept ) {\n\n            transport.input.setAttribute('accept', args.accept);\n\n        }\n\n        transport.input.click();\n\n    };\n\n    return transport;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/transport.js","/**\n * Codex Editor Renderer Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (renderer) {\n\n    let editor = codex.editor;\n\n    /**\n     * Asyncronously parses input JSON to redactor blocks\n     */\n    renderer.makeBlocksFromData = function () {\n\n        /**\n         * If redactor is empty, add first paragraph to start writing\n         */\n        if (editor.core.isEmpty(editor.state.blocks) || !editor.state.blocks.items.length) {\n\n            editor.ui.addInitialBlock();\n            return;\n\n        }\n\n        Promise.resolve()\n\n        /** First, get JSON from state */\n            .then(function () {\n\n                return editor.state.blocks;\n\n            })\n\n            /** Then, start to iterate they */\n            .then(editor.renderer.appendBlocks)\n\n            /** Write log if something goes wrong */\n            .catch(function (error) {\n\n                editor.core.log('Error while parsing JSON: %o', 'error', error);\n\n            });\n\n    };\n\n    /**\n     * Parses JSON to blocks\n     * @param {object} data\n     * @return Primise -> nodeList\n     */\n    renderer.appendBlocks = function (data) {\n\n        var blocks = data.items;\n\n        /**\n         * Sequence of one-by-one blocks appending\n         * Uses to save blocks order after async-handler\n         */\n        var nodeSequence = Promise.resolve();\n\n        for (var index = 0; index < blocks.length ; index++ ) {\n\n            /** Add node to sequence at specified index */\n            editor.renderer.appendNodeAtIndex(nodeSequence, blocks, index);\n\n        }\n\n    };\n\n    /**\n     * Append node at specified index\n     */\n    renderer.appendNodeAtIndex = function (nodeSequence, blocks, index) {\n\n        /** We need to append node to sequence */\n        nodeSequence\n\n        /** first, get node async-aware */\n            .then(function () {\n\n                return editor.renderer.getNodeAsync(blocks, index);\n\n            })\n\n            /**\n             * second, compose editor-block from JSON object\n             */\n            .then(editor.renderer.createBlockFromData)\n\n            /**\n             * now insert block to redactor\n             */\n            .then(function (blockData) {\n\n                /**\n                 * blockData has 'block', 'type' and 'stretched' information\n                 */\n                editor.content.insertBlock(blockData);\n\n                /** Pass created block to next step */\n                return blockData.block;\n\n            })\n\n            /** Log if something wrong with node */\n            .catch(function (error) {\n\n                editor.core.log('Node skipped while parsing because %o', 'error', error);\n\n            });\n\n    };\n\n    /**\n     * Asynchronously returns block data from blocksList by index\n     * @return Promise to node\n     */\n    renderer.getNodeAsync = function (blocksList, index) {\n\n        return Promise.resolve().then(function () {\n\n            return {\n                tool : blocksList[index],\n                position : index\n            };\n\n        });\n\n    };\n\n    /**\n     * Creates editor block by JSON-data\n     *\n     * @uses render method of each plugin\n     *\n     * @param {Object} toolData.tool\n     *                              { header : {\n     *                                                text: '',\n     *                                                type: 'H3', ...\n     *                                            }\n     *                               }\n     * @param {Number} toolData.position - index in input-blocks array\n     * @return {Object} with type and Element\n     */\n    renderer.createBlockFromData = function ( toolData ) {\n\n        /** New parser */\n        var block,\n            tool = toolData.tool,\n            pluginName = tool.type,\n            anchor     = tool.anchor,\n            cover      = tool.cover;\n\n        /** Get first key of object that stores plugin name */\n        // for (var pluginName in blockData) break;\n\n        /** Check for plugin existance */\n        if (!editor.tools[pluginName]) {\n\n            throw Error(`Plugin «${pluginName}» not found`);\n\n        }\n\n        /** Check for plugin having render method */\n        if (typeof editor.tools[pluginName].render != 'function') {\n\n            throw Error(`Plugin «${pluginName}» must have «render» method`);\n\n        }\n\n        if ( editor.tools[pluginName].available === false ) {\n\n            block = editor.draw.unavailableBlock();\n\n            block.innerHTML = editor.tools[pluginName].loadingMessage;\n\n            /**\n            * Saver will extract data from initial block data by position in array\n            */\n            block.dataset.inputPosition = toolData.position;\n\n        } else {\n\n            /** New Parser */\n            block = editor.tools[pluginName].render(tool.data);\n\n        }\n\n        /** is first-level block stretched */\n        var stretched = editor.tools[pluginName].isStretched || false;\n\n        /** Retrun type and block */\n        return {\n            type      : pluginName,\n            block     : block,\n            stretched : stretched,\n            cover     : cover,\n            anchor    : anchor\n        };\n\n    };\n\n    return renderer;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/renderer.js","/**\n * Codex Editor Saver\n *\n * @author Codex Team\n * @version 1.0.2\n */\n\nmodule.exports = (function (saver) {\n\n    let editor = codex.editor;\n\n    /**\n     * Saves blocks\n     * @private\n     */\n    saver.saveBlocks = function () {\n\n        /** Save html content of redactor to memory */\n        editor.state.html = editor.nodes.redactor.innerHTML;\n\n        /** Empty jsonOutput state */\n        editor.state.jsonOutput = [];\n\n        Promise.resolve()\n\n            .then(function () {\n\n                return editor.nodes.redactor.childNodes;\n\n            })\n            /** Making a sequence from separate blocks */\n            .then(editor.saver.makeQueue)\n\n            .then(function () {\n                // editor.nodes.textarea.innerHTML = editor.state.html;\n            })\n\n            .catch( function (error) {\n\n                editor.core.log(error);\n\n            });\n\n    };\n\n    saver.makeQueue = function (blocks) {\n\n        var queue = Promise.resolve();\n\n        for(var index = 0; index < blocks.length; index++) {\n\n            /** Add node to sequence at specified index */\n            editor.saver.getBlockData(queue, blocks, index);\n\n        }\n\n    };\n\n    /** Gets every block and makes From Data */\n    saver.getBlockData = function (queue, blocks, index) {\n\n        queue.then(function () {\n\n            return editor.saver.getNodeAsync(blocks, index);\n\n        })\n\n            .then(editor.saver.makeFormDataFromBlocks);\n\n    };\n\n\n    /**\n     * Asynchronously returns block data from blocksList by index\n     * @return Promise to node\n     */\n    saver.getNodeAsync = function (blocksList, index) {\n\n        return Promise.resolve().then(function () {\n\n            return blocksList[index];\n\n        });\n\n    };\n\n    saver.makeFormDataFromBlocks = function (block) {\n\n        var pluginName = block.dataset.tool,\n            anchor     = block.dataset.anchor;\n\n        /** Check for plugin existance */\n        if (!editor.tools[pluginName]) {\n\n            throw Error(`Plugin «${pluginName}» not found`);\n\n        }\n\n        /** Check for plugin having render method */\n        if (typeof editor.tools[pluginName].save != 'function') {\n\n            throw Error(`Plugin «${pluginName}» must have save method`);\n\n        }\n\n        /** Result saver */\n        var blockContent   = block.childNodes[0],\n            pluginsContent = blockContent.childNodes[0],\n            savedData,\n            position,\n            output,\n            coverFlag = false;\n\n        /** If plugin wasn't available then return data from cache */\n        if ( editor.tools[pluginName].available === false ) {\n\n            position = pluginsContent.dataset.inputPosition;\n\n            savedData = codex.editor.state.blocks.items[position].data;\n            coverFlag = codex.editor.state.blocks.items[position].cover;\n            anchor    = codex.editor.state.blocks.items[position].anchor;\n\n        } else {\n\n            savedData = editor.tools[pluginName].save(pluginsContent);\n            coverFlag = block.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE);\n\n            if (editor.tools[pluginName].validate) {\n\n                var result = editor.tools[pluginName].validate(savedData);\n\n                /**\n                 * Do not allow invalid data\n                 */\n                if (!result)\n                    return;\n\n            }\n\n        }\n\n        output = {\n            type   : pluginName,\n            anchor : anchor,\n            data   : savedData\n        };\n\n        /** Marks Blocks that will be in main page */\n        output.cover = coverFlag;\n\n        editor.state.jsonOutput.push(output);\n\n    };\n\n    return saver;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/saver.js","/**\n * Codex Editor Content Module\n * Works with DOM\n *\n * @author Codex Team\n * @version 1.3.12\n */\n\nmodule.exports = (function (content) {\n\n    let editor = codex.editor;\n\n    /**\n     * Links to current active block\n     * @type {null | Element}\n     */\n    content.currentNode = null;\n\n    /**\n     * clicked in redactor area\n     * @type {null | Boolean}\n     */\n    content.editorAreaHightlighted = null;\n\n    /**\n     * Synchronizes redactor with original textarea\n     */\n    content.sync = function () {\n\n        editor.core.log('syncing...');\n\n        /**\n         * Save redactor content to editor.state\n         */\n        editor.state.html = editor.nodes.redactor.innerHTML;\n\n    };\n\n    /**\n     * @deprecated\n     */\n    content.getNodeFocused = function () {\n\n        var selection = window.getSelection(),\n            focused;\n\n        if (selection.anchorNode === null) {\n\n            return null;\n\n        }\n\n        if ( selection.anchorNode.nodeType == editor.core.nodeTypes.TAG ) {\n\n            focused = selection.anchorNode;\n\n        } else {\n\n            focused = selection.focusNode.parentElement;\n\n        }\n\n        if ( !editor.parser.isFirstLevelBlock(focused) ) {\n\n            /** Iterate with parent nodes to find first-level*/\n            var parent = focused.parentNode;\n\n            while (parent && !editor.parser.isFirstLevelBlock(parent)) {\n\n                parent = parent.parentNode;\n\n            }\n\n            focused = parent;\n\n        }\n\n        if (focused != editor.nodes.redactor) {\n\n            return focused;\n\n        }\n\n        return null;\n\n    };\n\n    /**\n     * Appends background to the block\n     */\n    content.markBlock = function () {\n\n        editor.content.currentNode.classList.add(editor.ui.className.BLOCK_HIGHLIGHTED);\n\n    };\n\n    /**\n     * Clear background\n     */\n    content.clearMark = function () {\n\n        if (editor.content.currentNode) {\n\n            editor.content.currentNode.classList.remove(editor.ui.className.BLOCK_HIGHLIGHTED);\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Finds first-level block\n     * @param {Element} node - selected or clicked in redactors area node\n     */\n    content.getFirstLevelBlock = function (node) {\n\n        if (!editor.core.isDomNode(node)) {\n\n            node = node.parentNode;\n\n        }\n\n        if (node === editor.nodes.redactor || node === document.body) {\n\n            return null;\n\n        } else {\n\n            while(!node.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\n                node = node.parentNode;\n\n            }\n\n            return node;\n\n        }\n\n    };\n\n    /**\n     * Trigger this event when working node changed\n     * @param {Element} targetNode - first-level of this node will be current\n     * If targetNode is first-level then we set it as current else we look for parents to find first-level\n     */\n    content.workingNodeChanged = function (targetNode) {\n\n        /** Clear background from previous marked block before we change */\n        editor.content.clearMark();\n\n        if (!targetNode) {\n\n            return;\n\n        }\n\n        this.currentNode = this.getFirstLevelBlock(targetNode);\n\n    };\n\n    /**\n     * Replaces one redactor block with another\n     * @protected\n     * @param {Element} targetBlock - block to replace. Mostly currentNode.\n     * @param {Element} newBlock\n     * @param {string} newBlockType - type of new block; we need to store it to data-attribute\n     *\n     * [!] Function does not saves old block content.\n     *     You can get it manually and pass with newBlock.innerHTML\n     */\n    content.replaceBlock = function (targetBlock, newBlock) {\n\n        if (!targetBlock || !newBlock) {\n\n            editor.core.log('replaceBlock: missed params');\n            return;\n\n        }\n\n        /** If target-block is not a frist-level block, then we iterate parents to find it */\n        while(!targetBlock.classList.contains(editor.ui.className.BLOCK_CLASSNAME)) {\n\n            targetBlock = targetBlock.parentNode;\n\n        }\n\n        /**\n         * Check is this block was in feed\n         * If true, than set switched block also covered\n         */\n        if (targetBlock.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE)) {\n\n            newBlock.classList.add(editor.ui.className.BLOCK_IN_FEED_MODE);\n\n        }\n\n        if (targetBlock.classList.contains(editor.ui.className.BLOCK_WITH_ANCHOR)) {\n\n            newBlock.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\n        }\n\n        /**\n         * Saving anchor\n         */\n        newBlock.dataset.anchor = targetBlock.dataset.anchor;\n\n        /** Replacing */\n        editor.nodes.redactor.replaceChild(newBlock, targetBlock);\n\n        /**\n         * Set new node as current\n         */\n        editor.content.workingNodeChanged(newBlock);\n\n        /**\n         * Add block handlers\n         */\n        editor.ui.addBlockHandlers(newBlock);\n\n        /**\n         * Save changes\n         */\n        editor.ui.saveInputs();\n\n    };\n\n    /**\n     * @private\n     *\n     * Inserts new block to redactor\n     * Wrapps block into a DIV with BLOCK_CLASSNAME class\n     *\n     * @param blockData          {object}\n     * @param blockData.block    {Element}   element with block content\n     * @param blockData.type     {string}    block plugin\n     * @param needPlaceCaret     {bool}      pass true to set caret in new block\n     *\n     */\n    content.insertBlock = function ( blockData, needPlaceCaret ) {\n\n        var workingBlock    = editor.content.currentNode,\n            newBlockContent = blockData.block,\n            blockType       = blockData.type,\n            cover           = blockData.cover,\n            anchor          = blockData.anchor,\n            isStretched     = blockData.stretched;\n\n        var newBlock = editor.content.composeNewBlock(newBlockContent, blockType, isStretched, anchor);\n\n        if (cover === true) {\n\n            newBlock.classList.add(editor.ui.className.BLOCK_IN_FEED_MODE);\n\n        }\n\n        if (anchor) {\n\n            newBlock.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\n        }\n\n        if (workingBlock) {\n\n            editor.core.insertAfter(workingBlock, newBlock);\n\n        } else {\n\n            /**\n             * If redactor is empty, append as first child\n             */\n            editor.nodes.redactor.appendChild(newBlock);\n\n        }\n\n        /**\n         * Block handler\n         */\n        editor.ui.addBlockHandlers(newBlock);\n\n        /**\n         * Set new node as current\n         */\n        editor.content.workingNodeChanged(newBlock);\n\n        /**\n         * Save changes\n         */\n        editor.ui.saveInputs();\n\n\n        if ( needPlaceCaret ) {\n\n            /**\n             * If we don't know input index then we set default value -1\n             */\n            var currentInputIndex = editor.caret.getCurrentInputIndex() || -1;\n\n\n            if (currentInputIndex == -1) {\n\n\n                var editableElement = newBlock.querySelector('[contenteditable]'),\n                    emptyText       = document.createTextNode('');\n\n                editableElement.appendChild(emptyText);\n                editor.caret.set(editableElement, 0, 0);\n\n                editor.toolbar.move();\n                editor.toolbar.showPlusButton();\n\n\n            } else {\n\n                if (currentInputIndex === editor.state.inputs.length - 1)\n                    return;\n\n                /** Timeout for browsers execution */\n                window.setTimeout(function () {\n\n                    /** Setting to the new input */\n                    editor.caret.setToNextBlock(currentInputIndex);\n                    editor.toolbar.move();\n                    editor.toolbar.open();\n\n                }, 10);\n\n            }\n\n        }\n\n        /**\n         * Block is inserted, wait for new click that defined focusing on editors area\n         * @type {boolean}\n         */\n        content.editorAreaHightlighted = false;\n\n    };\n\n    /**\n     * Replaces blocks with saving content\n     * @protected\n     * @param {Element} noteToReplace\n     * @param {Element} newNode\n     * @param {Element} blockType\n     */\n    content.switchBlock = function (blockToReplace, newBlock, tool) {\n\n        tool = tool || editor.content.currentNode.dataset.tool;\n        var newBlockComposed = editor.content.composeNewBlock(newBlock, tool);\n\n        /** Replacing */\n        editor.content.replaceBlock(blockToReplace, newBlockComposed);\n\n        /** Save new Inputs when block is changed */\n        editor.ui.saveInputs();\n\n    };\n\n    /**\n     * Iterates between child noted and looking for #text node on deepest level\n     * @private\n     * @param {Element} block - node where find\n     * @param {int} postiton - starting postion\n     *      Example: childNodex.length to find from the end\n     *               or 0 to find from the start\n     * @return {Text} block\n     * @uses DFS\n     */\n    content.getDeepestTextNodeFromPosition = function (block, position) {\n\n        /**\n         * Clear Block from empty and useless spaces with trim.\n         * Such nodes we should remove\n         */\n        var blockChilds = block.childNodes,\n            index,\n            node,\n            text;\n\n        for(index = 0; index < blockChilds.length; index++) {\n\n            node = blockChilds[index];\n\n            if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n                text = node.textContent.trim();\n\n                /** Text is empty. We should remove this child from node before we start DFS\n                 * decrease the quantity of childs.\n                 */\n                if (text === '') {\n\n                    block.removeChild(node);\n                    position--;\n\n                }\n\n            }\n\n        }\n\n        if (block.childNodes.length === 0) {\n\n            return document.createTextNode('');\n\n        }\n\n        /** Setting default position when we deleted all empty nodes */\n        if ( position < 0 )\n            position = 1;\n\n        var lookingFromStart = false;\n\n        /** For looking from START */\n        if (position === 0) {\n\n            lookingFromStart = true;\n            position = 1;\n\n        }\n\n        while ( position ) {\n\n            /** initial verticle of node. */\n            if ( lookingFromStart ) {\n\n                block = block.childNodes[0];\n\n            } else {\n\n                block = block.childNodes[position - 1];\n\n            }\n\n            if ( block.nodeType == editor.core.nodeTypes.TAG ) {\n\n                position = block.childNodes.length;\n\n            } else if (block.nodeType == editor.core.nodeTypes.TEXT ) {\n\n                position = 0;\n\n            }\n\n        }\n\n        return block;\n\n    };\n\n    /**\n     * @private\n     */\n    content.composeNewBlock = function (block, tool, isStretched, anchor) {\n\n        var newBlock     = editor.draw.node('DIV', editor.ui.className.BLOCK_CLASSNAME, {}),\n            blockContent = editor.draw.node('DIV', editor.ui.className.BLOCK_CONTENT, {});\n\n        blockContent.appendChild(block);\n        newBlock.appendChild(blockContent);\n\n        if (isStretched) {\n\n            blockContent.classList.add(editor.ui.className.BLOCK_STRETCHED);\n\n        }\n\n        newBlock.dataset.tool   = tool;\n        newBlock.dataset.anchor = anchor || '';\n        return newBlock;\n\n    };\n\n    /**\n     * Returns Range object of current selection\n     */\n    content.getRange = function () {\n\n        var selection = window.getSelection().getRangeAt(0);\n\n        return selection;\n\n    };\n\n    /**\n     * Divides block in two blocks (after and before caret)\n     * @private\n     * @param {Int} inputIndex - target input index\n     */\n    content.splitBlock = function (inputIndex) {\n\n        var selection      = window.getSelection(),\n            anchorNode     = selection.anchorNode,\n            anchorNodeText = anchorNode.textContent,\n            caretOffset    = selection.anchorOffset,\n            textBeforeCaret,\n            textNodeBeforeCaret,\n            textAfterCaret,\n            textNodeAfterCaret;\n\n        var currentBlock = editor.content.currentNode.querySelector('[contentEditable]');\n\n\n        textBeforeCaret     = anchorNodeText.substring(0, caretOffset);\n        textAfterCaret      = anchorNodeText.substring(caretOffset);\n\n        textNodeBeforeCaret = document.createTextNode(textBeforeCaret);\n\n        if (textAfterCaret) {\n\n            textNodeAfterCaret  = document.createTextNode(textAfterCaret);\n\n        }\n\n        var previousChilds = [],\n            nextChilds     = [],\n            reachedCurrent = false;\n\n        if (textNodeAfterCaret) {\n\n            nextChilds.push(textNodeAfterCaret);\n\n        }\n\n        for ( var i = 0, child; !!(child = currentBlock.childNodes[i]); i++) {\n\n            if ( child != anchorNode ) {\n\n                if ( !reachedCurrent ) {\n\n                    previousChilds.push(child);\n\n                } else {\n\n                    nextChilds.push(child);\n\n                }\n\n            } else {\n\n                reachedCurrent = true;\n\n            }\n\n        }\n\n        /** Clear current input */\n        editor.state.inputs[inputIndex].innerHTML = '';\n\n        /**\n         * Append all childs founded before anchorNode\n         */\n        var previousChildsLength = previousChilds.length;\n\n        for(i = 0; i < previousChildsLength; i++) {\n\n            editor.state.inputs[inputIndex].appendChild(previousChilds[i]);\n\n        }\n\n        editor.state.inputs[inputIndex].appendChild(textNodeBeforeCaret);\n\n        /**\n         * Append text node which is after caret\n         */\n        var nextChildsLength = nextChilds.length,\n            newNode          = document.createElement('div');\n\n        for(i = 0; i < nextChildsLength; i++) {\n\n            newNode.appendChild(nextChilds[i]);\n\n        }\n\n        newNode = newNode.innerHTML;\n\n        /** This type of block creates when enter is pressed */\n        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n        /**\n         * Make new paragraph with text after caret\n         */\n        editor.content.insertBlock({\n            type  : NEW_BLOCK_TYPE,\n            block : editor.tools[NEW_BLOCK_TYPE].render({\n                text : newNode\n            })\n        }, true );\n\n    };\n\n    /**\n     * Merges two blocks — current and target\n     * If target index is not exist, then previous will be as target\n     */\n    content.mergeBlocks = function (currentInputIndex, targetInputIndex) {\n\n        /** If current input index is zero, then prevent method execution */\n        if (currentInputIndex === 0) {\n\n            return;\n\n        }\n\n        var targetInput,\n            currentInputContent = editor.state.inputs[currentInputIndex].innerHTML;\n\n        if (!targetInputIndex) {\n\n            targetInput = editor.state.inputs[currentInputIndex - 1];\n\n        } else {\n\n            targetInput = editor.state.inputs[targetInputIndex];\n\n        }\n\n        targetInput.innerHTML += currentInputContent;\n\n    };\n\n    /**\n     * @private\n     *\n     * Callback for HTML Mutations\n     * @param {Array} mutation - Mutation Record\n     */\n    content.paste = function (mutation) {\n\n        var workingNode = editor.content.currentNode,\n            tool        = workingNode.dataset.tool;\n\n        if (editor.tools[tool].allowedToPaste) {\n\n            editor.content.sanitize.call(this, mutation.target);\n\n        } else {\n\n            editor.content.pasteTextContent(mutation.addedNodes);\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * gets only text/plain content of node\n     * @param {Element} target - HTML node\n     */\n    content.pasteTextContent = function (nodes) {\n\n        var node = nodes[0],\n            textNode;\n\n        if (!node) {\n\n            return;\n\n        }\n\n        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n            textNode = document.createTextNode(node);\n\n        } else {\n\n            textNode = document.createTextNode(node.textContent);\n\n        }\n\n        if (editor.core.isDomNode(node)) {\n\n            node.parentNode.replaceChild(textNode, node);\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Sanitizes HTML content\n     * @param {Element} target - inserted element\n     * @uses Sanitize library html-janitor\n     */\n    content.sanitize = function (target) {\n\n        if (!target) {\n\n            return;\n\n        }\n\n        var node = target[0];\n\n        if (!node) {\n\n            return;\n\n        }\n\n        /**\n         * Disconnect Observer\n         * hierarchy of function calls inherits context of observer\n         */\n        this.disconnect();\n\n        /**\n         * Don't sanitize text node\n         */\n        if (node.nodeType == editor.core.nodeTypes.TEXT) {\n\n            return;\n\n        }\n\n        /**\n         * Clear dirty content\n         */\n        var cleaner = editor.sanitizer.init(editor.satinizer.Config.BASIC),\n            clean = cleaner.clean(target.outerHTML);\n\n        var div = editor.draw.node('DIV', [], { innerHTML: clean });\n\n        node.replaceWith(div.childNodes[0]);\n\n\n    };\n\n    /**\n     * Iterates all right siblings and parents, which has right siblings\n     * while it does not reached the first-level block\n     *\n     * @param {Element} node\n     * @return {boolean}\n     */\n    content.isLastNode = function (node) {\n\n        // console.log('погнали перебор родителей');\n\n        var allChecked = false;\n\n        while ( !allChecked ) {\n\n            // console.log('Смотрим на %o', node);\n            // console.log('Проверим, пустые ли соседи справа');\n\n            if ( !allSiblingsEmpty_(node) ) {\n\n                // console.log('Есть непустые соседи. Узел не последний. Выходим.');\n                return false;\n\n            }\n\n            node = node.parentNode;\n\n            /**\n             * Проверяем родителей до тех пор, пока не найдем блок первого уровня\n             */\n            if ( node.classList.contains(editor.ui.className.BLOCK_CONTENT) ) {\n\n                allChecked = true;\n\n            }\n\n        }\n\n        return true;\n\n    };\n\n    /**\n     * Checks if all element right siblings is empty\n     * @param node\n     */\n    var allSiblingsEmpty_ = function (node) {\n\n        /**\n         * Нужно убедиться, что после пустого соседа ничего нет\n         */\n        var sibling = node.nextSibling;\n\n        while ( sibling ) {\n\n            if (sibling.textContent.length) {\n\n                return false;\n\n            }\n\n            sibling = sibling.nextSibling;\n\n        }\n\n        return true;\n\n    };\n\n    /**\n     * @public\n     *\n     * @param [String] htmlString - html content as string\n     * @return {string} - html content as string\n     */\n    content.wrapTextWithParagraphs = function (htmlString) {\n\n        var wrapper = document.createElement('DIV'),\n            newWrapper = document.createElement('DIV'),\n            i,\n            paragraph,\n            firstLevelBlocks = ['DIV', 'P'],\n            blockTyped,\n            node;\n\n        /**\n         * Make HTML Element to Wrap Text\n         * It allows us to work with input data as HTML content\n         */\n        wrapper.innerHTML = htmlString;\n        paragraph = document.createElement('P');\n\n        for (i = 0; i < wrapper.childNodes.length; i++) {\n\n            node = wrapper.childNodes[i];\n\n            blockTyped = firstLevelBlocks.indexOf(node.tagName) != -1;\n\n            /**\n             * If node is first-levet\n             * we add this node to our new wrapper\n             */\n            if ( blockTyped ) {\n\n                /**\n                 * If we had splitted inline nodes to paragraph before\n                 */\n                if ( paragraph.childNodes.length ) {\n\n                    newWrapper.appendChild(paragraph.cloneNode(true));\n\n                    /** empty paragraph */\n                    paragraph = null;\n                    paragraph = document.createElement('P');\n\n                }\n\n                newWrapper.appendChild(node.cloneNode(true));\n\n            } else {\n\n                /** Collect all inline nodes to one as paragraph */\n                paragraph.appendChild(node.cloneNode(true));\n\n                /** if node is last we should append this node to paragraph and paragraph to new wrapper */\n                if ( i == wrapper.childNodes.length - 1 ) {\n\n                    newWrapper.appendChild(paragraph.cloneNode(true));\n\n                }\n\n            }\n\n        }\n\n        return newWrapper.innerHTML;\n\n    };\n\n    /**\n    * Finds closest Contenteditable parent from Element\n    * @param {Element} node     element looking from\n    * @return {Element} node    contenteditable\n    */\n    content.getEditableParent = function (node) {\n\n        while (node && node.contentEditable != 'true') {\n\n            node = node.parentNode;\n\n        }\n\n        return node;\n\n    };\n\n    return content;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/content.js","/**\n * Codex Editor toolbar module\n *\n * Contains:\n *  - Inline toolbox\n *  - Toolbox within plus button\n *  - Settings section\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (toolbar) {\n\n    let editor = codex.editor;\n\n    toolbar.settings = require('./settings');\n    toolbar.inline   = require('./inline');\n    toolbar.toolbox  = require('./toolbox');\n\n    /**\n     * Margin between focused node and toolbar\n     */\n    toolbar.defaultToolbarHeight = 49;\n\n    toolbar.defaultOffset = 34;\n\n    toolbar.opened = false;\n\n    toolbar.current = null;\n\n    /**\n     * @protected\n     */\n    toolbar.open = function () {\n\n        if (editor.hideToolbar) {\n\n            return;\n\n        }\n\n        editor.nodes.toolbar.classList.add('opened');\n        this.opened = true;\n\n    };\n\n    /**\n     * @protected\n     */\n    toolbar.close = function () {\n\n        editor.nodes.toolbar.classList.remove('opened');\n\n        toolbar.opened  = false;\n        toolbar.current = null;\n\n        for (var button in editor.nodes.toolbarButtons) {\n\n            editor.nodes.toolbarButtons[button].classList.remove('selected');\n\n        }\n\n        /** Close toolbox when toolbar is not displayed */\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.close();\n\n    };\n\n    toolbar.toggle = function () {\n\n        if ( !this.opened ) {\n\n            this.open();\n\n        } else {\n\n            this.close();\n\n        }\n\n    };\n\n    toolbar.hidePlusButton = function () {\n\n        editor.nodes.plusButton.classList.add('hide');\n\n    };\n\n    toolbar.showPlusButton = function () {\n\n        editor.nodes.plusButton.classList.remove('hide');\n\n    };\n\n    /**\n     * Moving toolbar to the specified node\n     */\n    toolbar.move = function () {\n\n        /** Close Toolbox when we move toolbar */\n        editor.toolbar.toolbox.close();\n\n        if (!editor.content.currentNode) {\n\n            return;\n\n        }\n\n        var newYCoordinate = editor.content.currentNode.offsetTop - (editor.toolbar.defaultToolbarHeight / 2) + editor.toolbar.defaultOffset;\n\n        editor.nodes.toolbar.style.transform = `translate3D(0, ${Math.floor(newYCoordinate)}px, 0)`;\n\n        /** Close trash actions */\n        editor.toolbar.settings.hideRemoveActions();\n\n    };\n\n    return toolbar;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/toolbar.js","/**\n * Toolbar settings\n *\n * @version 1.0.4\n */\n\nmodule.exports = (function (settings) {\n\n    let editor = codex.editor;\n\n    settings.opened = false;\n\n    settings.setting = null;\n    settings.actions = null;\n\n    settings.cover = null;\n\n    /**\n     * Append and open settings\n     */\n    settings.open = function (toolType) {\n\n        /**\n         * Append settings content\n         * It's stored in tool.settings\n         */\n        if (!editor.tools[toolType] || !editor.tools[toolType].makeSettings ) {\n\n            editor.core.log(`Plugin «${toolType}» has no settings`, 'warn');\n            // editor.nodes.pluginSettings.innerHTML = `Плагин «${toolType}» не имеет настроек`;\n\n        } else {\n\n            /**\n             * Draw settings block\n             */\n            var settingsBlock = editor.tools[toolType].makeSettings();\n\n            editor.nodes.pluginSettings.appendChild(settingsBlock);\n\n        }\n\n        /** Open settings block */\n        editor.nodes.blockSettings.classList.add('opened');\n        editor.toolbar.settings.addDefaultSettings();\n        this.opened = true;\n\n    };\n\n    /**\n     * Close and clear settings\n     */\n    settings.close = function () {\n\n        editor.nodes.blockSettings.classList.remove('opened');\n        editor.nodes.pluginSettings.innerHTML = '';\n\n        this.opened = false;\n\n    };\n\n    /**\n     * @param {string} toolType - plugin type\n     */\n    settings.toggle = function ( toolType ) {\n\n        if ( !this.opened ) {\n\n            this.open(toolType);\n            editor.anchors.settingsOpened(editor.content.currentNode);\n\n        } else {\n\n            this.close();\n\n        }\n\n    };\n\n    /**\n     * This function adds default core settings\n     */\n    settings.addDefaultSettings = function () {\n\n        /** list of default settings */\n        var feedModeToggler,\n            anchorInput;\n\n        /** Clear block and append initialized settings */\n        editor.nodes.defaultSettings.innerHTML = '';\n\n\n        /** Init all default setting buttons */\n        feedModeToggler = editor.toolbar.settings.makeFeedModeToggler();\n        anchorInput     = editor.toolbar.settings.makeAnchorInput();\n\n        /**\n         * Fill defaultSettings\n         */\n\n        /**\n         * Input for anchor for block\n         */\n        editor.nodes.defaultSettings.appendChild(anchorInput);\n\n        /**\n         * Button that enables/disables Feed-mode\n         * Feed-mode means that block will be showed in articles-feed like cover\n         */\n        editor.nodes.defaultSettings.appendChild(feedModeToggler);\n\n    };\n\n    /**\n     * Cover setting.\n     * This tune highlights block, so that it may be used for showing target block on main page\n     * Draw different setting when block is marked for main page\n     * If TRUE, then we show button that removes this selection\n     * Also defined setting \"Click\" events will be listened and have separate callbacks\n     *\n     * @return {Element} node/button that we place in default settings block\n     */\n    settings.makeFeedModeToggler = function () {\n\n        var isFeedModeActivated = editor.toolbar.settings.isFeedModeActivated(),\n            setting,\n            data;\n\n        if (!isFeedModeActivated) {\n\n            data = {\n                innerHTML : '<i class=\"ce-icon-newspaper\"></i>Вывести в ленте'\n            };\n\n        } else {\n\n            data = {\n                innerHTML : '<i class=\"ce-icon-newspaper\"></i>Не выводить в ленте'\n            };\n\n        }\n\n        setting = editor.draw.node('DIV', editor.ui.className.SETTINGS_ITEM, data);\n        editor.listeners.add(setting, 'click', editor.toolbar.settings.updateFeedMode, false);\n\n        return setting;\n\n    };\n\n    /**\n     * Updates Feed-mode\n     */\n    settings.updateFeedMode = function () {\n\n        var currentNode = editor.content.currentNode;\n\n        currentNode.classList.toggle(editor.ui.className.BLOCK_IN_FEED_MODE);\n\n        editor.toolbar.settings.close();\n\n    };\n\n    settings.isFeedModeActivated = function () {\n\n        var currentBlock = editor.content.currentNode;\n\n        if (currentBlock) {\n\n            return currentBlock.classList.contains(editor.ui.className.BLOCK_IN_FEED_MODE);\n\n        } else {\n\n            return false;\n\n        }\n\n    };\n\n    settings.makeAnchorInput = function () {\n\n        var anchorWrapper = editor.draw.node('div', 'ce-settings__anchor-wrapper ce-settings__item', {}),\n            hash   = editor.draw.node('i', 'ce-settings__anchor-hash', {}),\n            anchor = editor.draw.node('input', 'ce-settings__anchor-input', { placeholder: 'Якорь' });\n\n        editor.listeners.add(anchor, 'keydown', editor.anchors.keyDownOnAnchorInput );\n        editor.listeners.add(anchor, 'keyup', editor.anchors.keyUpOnAnchorInput );\n        editor.listeners.add(anchor, 'input', editor.anchors.anchorChanged );\n        editor.listeners.add(anchor, 'blur', editor.anchors.anchorChanged );\n\n        anchorWrapper.appendChild(hash);\n        anchorWrapper.appendChild(anchor);\n\n        editor.anchors.input = anchor;\n\n        return anchorWrapper;\n\n    };\n\n    /**\n     * Here we will draw buttons and add listeners to components\n     */\n    settings.makeRemoveBlockButton = function () {\n\n        var removeBlockWrapper  = editor.draw.node('SPAN', 'ce-toolbar__remove-btn', {}),\n            settingButton = editor.draw.node('SPAN', 'ce-toolbar__remove-setting', { innerHTML : '<i class=\"ce-icon-trash\"></i>' }),\n            actionWrapper = editor.draw.node('DIV', 'ce-toolbar__remove-confirmation', {}),\n            confirmAction = editor.draw.node('DIV', 'ce-toolbar__remove-confirm', { textContent : 'Удалить блок' }),\n            cancelAction  = editor.draw.node('DIV', 'ce-toolbar__remove-cancel', { textContent : 'Отмена' });\n\n        editor.listeners.add(settingButton, 'click', editor.toolbar.settings.removeButtonClicked, false);\n\n        editor.listeners.add(confirmAction, 'click', editor.toolbar.settings.confirmRemovingRequest, false);\n\n        editor.listeners.add(cancelAction, 'click', editor.toolbar.settings.cancelRemovingRequest, false);\n\n        actionWrapper.appendChild(confirmAction);\n        actionWrapper.appendChild(cancelAction);\n\n        removeBlockWrapper.appendChild(settingButton);\n        removeBlockWrapper.appendChild(actionWrapper);\n\n        /** Save setting */\n        editor.toolbar.settings.setting = settingButton;\n        editor.toolbar.settings.actions = actionWrapper;\n\n        return removeBlockWrapper;\n\n    };\n\n    settings.removeButtonClicked = function () {\n\n        var action = editor.toolbar.settings.actions;\n\n        if (action.classList.contains('opened')) {\n\n            editor.toolbar.settings.hideRemoveActions();\n\n        } else {\n\n            editor.toolbar.settings.showRemoveActions();\n\n        }\n\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.close();\n\n    };\n\n    settings.cancelRemovingRequest = function () {\n\n        editor.toolbar.settings.actions.classList.remove('opened');\n\n    };\n\n    settings.confirmRemovingRequest = function () {\n\n        var currentBlock = editor.content.currentNode,\n            firstLevelBlocksCount;\n\n        currentBlock.remove();\n\n        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\n        /**\n         * If all blocks are removed\n         */\n        if (firstLevelBlocksCount === 0) {\n\n            /** update currentNode variable */\n            editor.content.currentNode = null;\n\n            /** Inserting new empty initial block */\n            editor.ui.addInitialBlock();\n\n        }\n\n        editor.ui.saveInputs();\n\n        editor.toolbar.close();\n\n    };\n\n    settings.showRemoveActions = function () {\n\n        editor.toolbar.settings.actions.classList.add('opened');\n\n    };\n\n    settings.hideRemoveActions = function () {\n\n        editor.toolbar.settings.actions.classList.remove('opened');\n\n    };\n\n    return settings;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/settings.js","/**\n * Inline toolbar\n *\n * Contains from tools:\n * Bold, Italic, Underline and Anchor\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (inline) {\n\n    let editor = codex.editor;\n\n    inline.buttonsOpened = null;\n    inline.actionsOpened = null;\n    inline.wrappersOffset = null;\n\n    /**\n     * saving selection that need for execCommand for styling\n     *\n     */\n    inline.storedSelection = null;\n\n    /**\n     * @protected\n     *\n     * Open inline toobar\n     */\n    inline.show = function () {\n\n        var currentNode = editor.content.currentNode,\n            tool = currentNode.dataset.tool,\n            plugin;\n\n        /**\n         * tool allowed to open inline toolbar\n         */\n        plugin = editor.tools[tool];\n\n        if (!plugin.showInlineToolbar)\n            return;\n\n        var selectedText = inline.getSelectionText(),\n            toolbar      = editor.nodes.inlineToolbar.wrapper;\n\n        if (selectedText.length > 0) {\n\n            /** Move toolbar and open */\n            editor.toolbar.inline.move();\n\n            /** Open inline toolbar */\n            toolbar.classList.add('opened');\n\n            /** show buttons of inline toolbar */\n            editor.toolbar.inline.showButtons();\n\n        }\n\n    };\n\n    /**\n     * @protected\n     *\n     * Closes inline toolbar\n     */\n    inline.close = function () {\n\n        var toolbar = editor.nodes.inlineToolbar.wrapper;\n\n        toolbar.classList.remove('opened');\n\n    };\n\n    /**\n     * @private\n     *\n     * Moving toolbar\n     */\n    inline.move = function () {\n\n        if (!this.wrappersOffset) {\n\n            this.wrappersOffset = this.getWrappersOffset();\n\n        }\n\n        var coords          = this.getSelectionCoords(),\n            defaultOffset   = 0,\n            toolbar         = editor.nodes.inlineToolbar.wrapper,\n            newCoordinateX,\n            newCoordinateY;\n\n        if (toolbar.offsetHeight === 0) {\n\n            defaultOffset = 40;\n\n        }\n\n        newCoordinateX = coords.x - this.wrappersOffset.left;\n        newCoordinateY = coords.y + window.scrollY - this.wrappersOffset.top - defaultOffset - toolbar.offsetHeight;\n\n        toolbar.style.transform = `translate3D(${Math.floor(newCoordinateX)}px, ${Math.floor(newCoordinateY)}px, 0)`;\n\n        /** Close everything */\n        editor.toolbar.inline.closeButtons();\n        editor.toolbar.inline.closeAction();\n\n    };\n\n    /**\n     * @private\n     *\n     * Tool Clicked\n     */\n\n    inline.toolClicked = function (event, type) {\n\n        /**\n         * For simple tools we use default browser function\n         * For more complicated tools, we should write our own behavior\n         */\n        switch (type) {\n            case 'createLink' : editor.toolbar.inline.createLinkAction(event, type); break;\n            default           : editor.toolbar.inline.defaultToolAction(type); break;\n        }\n\n        /**\n         * highlight buttons\n         * after making some action\n         */\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\n    };\n\n    /**\n     * @private\n     *\n     * Saving wrappers offset in DOM\n     */\n    inline.getWrappersOffset = function () {\n\n        var wrapper = editor.nodes.wrapper,\n            offset  = this.getOffset(wrapper);\n\n        this.wrappersOffset = offset;\n        return offset;\n\n    };\n\n    /**\n     * @private\n     *\n     * Calculates offset of DOM element\n     *\n     * @param el\n     * @returns {{top: number, left: number}}\n     */\n    inline.getOffset = function ( el ) {\n\n        var _x = 0;\n        var _y = 0;\n\n        while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {\n\n            _x += (el.offsetLeft + el.clientLeft);\n            _y += (el.offsetTop + el.clientTop);\n            el = el.offsetParent;\n\n        }\n        return { top: _y, left: _x };\n\n    };\n\n    /**\n     * @private\n     *\n     * Calculates position of selected text\n     * @returns {{x: number, y: number}}\n     */\n    inline.getSelectionCoords = function () {\n\n        var sel = document.selection, range;\n        var x = 0, y = 0;\n\n        if (sel) {\n\n            if (sel.type != 'Control') {\n\n                range = sel.createRange();\n                range.collapse(true);\n                x = range.boundingLeft;\n                y = range.boundingTop;\n\n            }\n\n        } else if (window.getSelection) {\n\n            sel = window.getSelection();\n\n            if (sel.rangeCount) {\n\n                range = sel.getRangeAt(0).cloneRange();\n                if (range.getClientRects) {\n\n                    range.collapse(true);\n                    var rect = range.getClientRects()[0];\n\n                    if (!rect) {\n\n                        return;\n\n                    }\n\n                    x = rect.left;\n                    y = rect.top;\n\n                }\n\n            }\n\n        }\n        return { x: x, y: y };\n\n    };\n\n    /**\n     * @private\n     *\n     * Returns selected text as String\n     * @returns {string}\n     */\n    inline.getSelectionText = function () {\n\n        var selectedText = '';\n\n        // all modern browsers and IE9+\n        if (window.getSelection) {\n\n            selectedText = window.getSelection().toString();\n\n        }\n\n        return selectedText;\n\n    };\n\n    /** Opens buttons block */\n    inline.showButtons = function () {\n\n        var buttons = editor.nodes.inlineToolbar.buttons;\n\n        buttons.classList.add('opened');\n\n        editor.toolbar.inline.buttonsOpened = true;\n\n        /** highlight buttons */\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(editor.toolbar.inline.hightlight);\n\n    };\n\n    /** Makes buttons disappear */\n    inline.closeButtons = function () {\n\n        var buttons = editor.nodes.inlineToolbar.buttons;\n\n        buttons.classList.remove('opened');\n\n        editor.toolbar.inline.buttonsOpened = false;\n\n    };\n\n    /** Open buttons defined action if exist */\n    inline.showActions = function () {\n\n        var action = editor.nodes.inlineToolbar.actions;\n\n        action.classList.add('opened');\n\n        editor.toolbar.inline.actionsOpened = true;\n\n    };\n\n    /** Close actions block */\n    inline.closeAction = function () {\n\n        var action = editor.nodes.inlineToolbar.actions;\n\n        action.innerHTML = '';\n        action.classList.remove('opened');\n        editor.toolbar.inline.actionsOpened = false;\n\n    };\n\n\n    /**\n    * Callback for keydowns in inline toolbar \"Insert link...\" input\n    */\n    let inlineToolbarAnchorInputKeydown_ = function (event) {\n\n        if (event.keyCode != editor.core.keys.ENTER) {\n\n            return;\n\n        }\n\n        let editable        = editor.content.currentNode,\n            storedSelection = editor.toolbar.inline.storedSelection;\n\n        editor.toolbar.inline.restoreSelection(editable, storedSelection);\n        editor.toolbar.inline.setAnchor(this.value);\n\n        /**\n         * Preventing events that will be able to happen\n         */\n        event.preventDefault();\n        event.stopImmediatePropagation();\n\n        editor.toolbar.inline.clearRange();\n\n    };\n\n    /** Action for link creation or for setting anchor */\n    inline.createLinkAction = function (event) {\n\n        var isActive = this.isLinkActive();\n\n        var editable        = editor.content.currentNode,\n            storedSelection = editor.toolbar.inline.saveSelection(editable);\n\n        /** Save globally selection */\n        editor.toolbar.inline.storedSelection = storedSelection;\n\n        if (isActive) {\n\n\n            /**\n             * Changing stored selection. if we want to remove anchor from word\n             * we should remove anchor from whole word, not only selected part.\n             * The solution is than we get the length of current link\n             * Change start position to - end of selection minus length of anchor\n             */\n            editor.toolbar.inline.restoreSelection(editable, storedSelection);\n\n            editor.toolbar.inline.defaultToolAction('unlink');\n\n        } else {\n\n            /** Create input and close buttons */\n            var action = editor.draw.inputForLink();\n\n            editor.nodes.inlineToolbar.actions.appendChild(action);\n\n            editor.toolbar.inline.closeButtons();\n            editor.toolbar.inline.showActions();\n\n            /**\n             * focus to input\n             * Solution: https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/focus\n             * Prevents event after showing input and when we need to focus an input which is in unexisted form\n             */\n            action.focus();\n            event.preventDefault();\n\n            /** Callback to link action */\n            editor.listeners.add(action, 'keydown', inlineToolbarAnchorInputKeydown_, false);\n\n        }\n\n    };\n\n    inline.isLinkActive = function () {\n\n        var isActive = false;\n\n        editor.nodes.inlineToolbar.buttons.childNodes.forEach(function (tool) {\n\n            var dataType = tool.dataset.type;\n\n            if (dataType == 'link' && tool.classList.contains('hightlighted')) {\n\n                isActive = true;\n\n            }\n\n        });\n\n        return isActive;\n\n    };\n\n    /** default action behavior of tool */\n    inline.defaultToolAction = function (type) {\n\n        document.execCommand(type, false, null);\n\n    };\n\n    /**\n     * @private\n     *\n     * Sets URL\n     *\n     * @param {String} url - URL\n     */\n    inline.setAnchor = function (url) {\n\n        document.execCommand('createLink', false, url);\n\n        /** Close after URL inserting */\n        editor.toolbar.inline.closeAction();\n\n    };\n\n    /**\n     * @private\n     *\n     * Saves selection\n     */\n    inline.saveSelection = function (containerEl) {\n\n        var range = window.getSelection().getRangeAt(0),\n            preSelectionRange = range.cloneRange(),\n            start;\n\n        preSelectionRange.selectNodeContents(containerEl);\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n\n        start = preSelectionRange.toString().length;\n\n        return {\n            start: start,\n            end: start + range.toString().length\n        };\n\n    };\n\n    /**\n     * @private\n     *\n     * Sets to previous selection (Range)\n     *\n     * @param {Element} containerEl - editable element where we restore range\n     * @param {Object} savedSel - range basic information to restore\n     */\n    inline.restoreSelection = function (containerEl, savedSel) {\n\n        var range     = document.createRange(),\n            charIndex = 0;\n\n        range.setStart(containerEl, 0);\n        range.collapse(true);\n\n        var nodeStack = [ containerEl ],\n            node,\n            foundStart = false,\n            stop = false,\n            nextCharIndex;\n\n        while (!stop && (node = nodeStack.pop())) {\n\n            if (node.nodeType == 3) {\n\n                nextCharIndex = charIndex + node.length;\n\n                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\n\n                    range.setStart(node, savedSel.start - charIndex);\n                    foundStart = true;\n\n                }\n                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\n\n                    range.setEnd(node, savedSel.end - charIndex);\n                    stop = true;\n\n                }\n                charIndex = nextCharIndex;\n\n            } else {\n\n                var i = node.childNodes.length;\n\n                while (i--) {\n\n                    nodeStack.push(node.childNodes[i]);\n\n                }\n\n            }\n\n        }\n\n        var sel = window.getSelection();\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n    };\n\n    /**\n     * @private\n     *\n     * Removes all ranges from window selection\n     */\n    inline.clearRange = function () {\n\n        var selection = window.getSelection();\n\n        selection.removeAllRanges();\n\n    };\n\n    /**\n     * @private\n     *\n     * sets or removes hightlight\n     */\n    inline.hightlight = function (tool) {\n\n        var dataType = tool.dataset.type;\n\n        if (document.queryCommandState(dataType)) {\n\n            editor.toolbar.inline.setButtonHighlighted(tool);\n\n        } else {\n\n            editor.toolbar.inline.removeButtonsHighLight(tool);\n\n        }\n\n        /**\n         *\n         * hightlight for anchors\n         */\n        var selection = window.getSelection(),\n            tag = selection.anchorNode.parentNode;\n\n        if (tag.tagName == 'A' && dataType == 'link') {\n\n            editor.toolbar.inline.setButtonHighlighted(tool);\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Mark button if text is already executed\n     */\n    inline.setButtonHighlighted = function (button) {\n\n        button.classList.add('hightlighted');\n\n        /** At link tool we also change icon */\n        if (button.dataset.type == 'link') {\n\n            var icon = button.childNodes[0];\n\n            icon.classList.remove('ce-icon-link');\n            icon.classList.add('ce-icon-unlink');\n\n        }\n\n    };\n\n    /**\n     * @private\n     *\n     * Removes hightlight\n     */\n    inline.removeButtonsHighLight = function (button) {\n\n        button.classList.remove('hightlighted');\n\n        /** At link tool we also change icon */\n        if (button.dataset.type == 'link') {\n\n            var icon = button.childNodes[0];\n\n            icon.classList.remove('ce-icon-unlink');\n            icon.classList.add('ce-icon-link');\n\n        }\n\n    };\n\n\n    return inline;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/inline.js","/**\n * Codex Editor toolbox\n *\n * All tools be able to appended here\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (toolbox) {\n\n    let editor = codex.editor;\n\n    toolbox.opened = false;\n\n    /** Shows toolbox */\n    toolbox.open = function () {\n\n        /** Close setting if toolbox is opened */\n        if (editor.toolbar.settings.opened) {\n\n            editor.toolbar.settings.close();\n\n        }\n\n        /** display toolbox */\n        editor.nodes.toolbox.classList.add('opened');\n\n        /** Animate plus button */\n        editor.nodes.plusButton.classList.add('clicked');\n\n        /** toolbox state */\n        editor.toolbar.toolbox.opened = true;\n\n    };\n\n    /** Closes toolbox */\n    toolbox.close = function () {\n\n        /** Makes toolbox disapear */\n        editor.nodes.toolbox.classList.remove('opened');\n\n        /** Rotate plus button */\n        editor.nodes.plusButton.classList.remove('clicked');\n\n        /** toolbox state */\n        editor.toolbar.toolbox.opened = false;\n\n        editor.toolbar.current = null;\n\n    };\n\n    toolbox.leaf = function () {\n\n        let currentTool = editor.toolbar.current,\n            tools       = Object.keys(editor.tools),\n            barButtons  = editor.nodes.toolbarButtons,\n            nextToolIndex = 0,\n            toolToSelect,\n            visibleTool,\n            tool;\n\n        if ( !currentTool ) {\n\n            /** Get first tool from object*/\n            for(tool in editor.tools) {\n\n                if (editor.tools[tool].displayInToolbox) {\n\n                    break;\n\n                }\n\n                nextToolIndex ++;\n\n            }\n\n        } else {\n\n            nextToolIndex = (tools.indexOf(currentTool) + 1) % tools.length;\n            visibleTool = tools[nextToolIndex];\n\n            while (!editor.tools[visibleTool].displayInToolbox) {\n\n                nextToolIndex = (nextToolIndex + 1) % tools.length;\n                visibleTool = tools[nextToolIndex];\n\n            }\n\n        }\n\n        toolToSelect = tools[nextToolIndex];\n\n        for ( var button in barButtons ) {\n\n            barButtons[button].classList.remove('selected');\n\n        }\n\n        barButtons[toolToSelect].classList.add('selected');\n        editor.toolbar.current = toolToSelect;\n\n    };\n\n    /**\n     * Transforming selected node type into selected toolbar element type\n     * @param {event} event\n     */\n    toolbox.toolClicked = function (event) {\n\n        /**\n         * UNREPLACEBLE_TOOLS this types of tools are forbidden to replace even they are empty\n         */\n        var UNREPLACEBLE_TOOLS = ['image', 'link', 'list', 'instagram', 'twitter', 'embed'],\n            tool               = editor.tools[editor.toolbar.current],\n            workingNode        = editor.content.currentNode,\n            currentInputIndex  = editor.caret.inputIndex,\n            newBlockContent,\n            appendCallback,\n            blockData;\n\n        /** Make block from plugin */\n        newBlockContent = tool.render();\n\n        /** information about block */\n        blockData = {\n            block     : newBlockContent,\n            type      : tool.type,\n            stretched : false\n        };\n\n        if (\n            workingNode &&\n            UNREPLACEBLE_TOOLS.indexOf(workingNode.dataset.tool) === -1 &&\n            workingNode.textContent.trim() === ''\n        ) {\n\n            /** Replace current block */\n            editor.content.switchBlock(workingNode, newBlockContent, tool.type);\n\n        } else {\n\n            /** Insert new Block from plugin */\n            editor.content.insertBlock(blockData);\n\n            /** increase input index */\n            currentInputIndex++;\n\n        }\n\n        /** Fire tool append callback  */\n        appendCallback = tool.appendCallback;\n\n        if (appendCallback && typeof appendCallback == 'function') {\n\n            appendCallback.call(event);\n\n        }\n\n        window.setTimeout(function () {\n\n            /** Set caret to current block */\n            editor.caret.setToBlock(currentInputIndex);\n\n        }, 10);\n\n\n        /**\n         * Changing current Node\n         */\n        editor.content.workingNodeChanged();\n\n        /**\n         * Move toolbar when node is changed\n         */\n        editor.toolbar.move();\n\n    };\n\n    return toolbox;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/toolbar/toolbox.js","/**\n * Codex Editor callbacks module\n *\n * @author Codex Team\n * @version 1.3.10\n */\n\nmodule.exports = (function (callbacks) {\n\n    let editor = codex.editor;\n\n    callbacks.globalKeydown = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.ENTER : editor.callback.enterKeyPressed(event);     break;\n        }\n\n    };\n\n    callbacks.redactorKeyDown = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.TAB   : editor.callback.tabKeyPressed(event);                     break;\n            case editor.core.keys.ENTER : editor.callback.enterKeyPressedOnRedactorZone(event);     break;\n            case editor.core.keys.ESC   : editor.callback.escapeKeyPressed(event);                  break;\n            default                    : editor.callback.defaultKeyPressed(event);                 break;\n        }\n\n    };\n\n    callbacks.globalKeyup = function (event) {\n\n        switch (event.keyCode) {\n            case editor.core.keys.UP    :\n            case editor.core.keys.LEFT  :\n            case editor.core.keys.RIGHT :\n            case editor.core.keys.DOWN  : editor.callback.arrowKeyPressed(event); break;\n        }\n\n    };\n\n    callbacks.tabKeyPressed = function (event) {\n\n\n        var inputs = editor.content.currentNode.querySelectorAll('textarea, input'),\n            inputsAreEmpty   = true,\n            textContentIsEmpty = !editor.content.currentNode.textContent.trim();\n\n        Array.prototype.map.call(inputs, function (input) {\n\n            if (input.type == 'textarea' || input.type == 'text') {\n\n                inputsAreEmpty = inputsAreEmpty && !input.value.trim();\n\n            }\n\n        });\n\n\n        var blockIsEmpty = textContentIsEmpty && inputsAreEmpty;\n\n        if (!blockIsEmpty) {\n\n            return;\n\n        }\n\n        if ( !editor.toolbar.opened  ) {\n\n            editor.toolbar.open();\n\n        }\n\n        if (editor.toolbar.opened && !editor.toolbar.toolbox.opened) {\n\n            editor.toolbar.toolbox.open();\n\n        } else {\n\n            editor.toolbar.toolbox.leaf();\n\n        }\n\n        event.preventDefault();\n\n    };\n\n    /**\n    * @param {Event} event\n    */\n    callbacks.enterKeyPressed = function () {\n\n        if (editor.content.editorAreaHightlighted) {\n\n            /**\n             * it means that we lose input index, saved index before is not correct\n             * therefore we need to set caret when we insert new block\n             */\n            editor.caret.inputIndex = -1;\n\n            editor.callback.enterPressedOnBlock();\n\n        }\n\n    };\n\n    /**\n     * ENTER key handler\n     * Makes new paragraph block\n     */\n    callbacks.enterKeyPressedOnRedactorZone = function (event) {\n\n        if (event.target.contentEditable == 'true') {\n\n            /** Update input index */\n            editor.caret.saveCurrentInputIndex();\n\n        }\n\n        var currentInputIndex       = editor.caret.getCurrentInputIndex() || 0,\n            workingNode             = editor.content.currentNode,\n            tool                    = workingNode.dataset.tool,\n            isEnterPressedOnToolbar = editor.toolbar.opened &&\n                                        editor.toolbar.current &&\n                                        event.target == editor.state.inputs[currentInputIndex];\n\n        /** The list of tools which needs the default browser behaviour */\n        var enableLineBreaks = editor.tools[tool].enableLineBreaks;\n\n        /** This type of block creates when enter is pressed */\n        var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n        /**\n         * When toolbar is opened, select tool instead of making new paragraph\n         */\n        if ( isEnterPressedOnToolbar ) {\n\n            event.preventDefault();\n\n            editor.toolbar.toolbox.toolClicked(event);\n\n            editor.toolbar.close();\n\n            /**\n             * Stop other listeners callback executions\n             */\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n\n            return;\n\n        }\n\n        /**\n         * Allow paragraph lineBreaks with shift enter\n         * Or if shiftkey pressed and enter and enabledLineBreaks, the let new block creation\n         */\n        if ( event.shiftKey || enableLineBreaks ) {\n\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n            return;\n\n        }\n\n        var currentSelection = window.getSelection(),\n            currentSelectedNode = currentSelection.anchorNode,\n            caretAtTheEndOfText = editor.caret.position.atTheEnd(),\n            isTextNodeHasParentBetweenContenteditable = false;\n\n        /**\n         * Allow making new <p> in same block by SHIFT+ENTER and forbids to prevent default browser behaviour\n         */\n        if ( event.shiftKey && !enableLineBreaks ) {\n\n            editor.callback.enterPressedOnBlock(editor.content.currentBlock, event);\n            event.preventDefault();\n            return;\n\n        }\n\n        /**\n         * Workaround situation when caret at the Text node that has some wrapper Elements\n         * Split block cant handle this.\n         * We need to save default behavior\n         */\n        isTextNodeHasParentBetweenContenteditable = currentSelectedNode && currentSelectedNode.parentNode.contentEditable != 'true';\n\n        /**\n         * Split blocks when input has several nodes and caret placed in textNode\n         */\n        if (\n            currentSelectedNode.nodeType == editor.core.nodeTypes.TEXT &&\n            !isTextNodeHasParentBetweenContenteditable &&\n            !caretAtTheEndOfText\n        ) {\n\n            event.preventDefault();\n\n            editor.core.log('Splitting Text node...');\n\n            editor.content.splitBlock(currentInputIndex);\n\n            /** Show plus button when next input after split is empty*/\n            if (!editor.state.inputs[currentInputIndex + 1].textContent.trim()) {\n\n                editor.toolbar.showPlusButton();\n\n            }\n\n        } else {\n\n            var islastNode = editor.content.isLastNode(currentSelectedNode);\n\n            if ( islastNode && caretAtTheEndOfText ) {\n\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n\n                editor.core.log('ENTER clicked in last textNode. Create new BLOCK');\n\n                editor.content.insertBlock({\n                    type: NEW_BLOCK_TYPE,\n                    block: editor.tools[NEW_BLOCK_TYPE].render()\n                }, true);\n\n                editor.toolbar.move();\n                editor.toolbar.open();\n\n                /** Show plus button with empty block */\n                editor.toolbar.showPlusButton();\n\n            }\n\n        }\n\n        /** get all inputs after new appending block */\n        editor.ui.saveInputs();\n\n    };\n\n    callbacks.escapeKeyPressed = function (event) {\n\n        /** Close all toolbar */\n        editor.toolbar.close();\n\n        /** Close toolbox */\n        editor.toolbar.toolbox.close();\n\n        event.preventDefault();\n\n    };\n\n    /**\n    * @param {Event} event\n    */\n    callbacks.arrowKeyPressed = function () {\n\n        editor.content.workingNodeChanged();\n\n        /* Closing toolbar */\n        editor.toolbar.close();\n        editor.toolbar.move();\n\n    };\n\n    /**\n    * @param {Event} event\n    */\n    callbacks.defaultKeyPressed = function () {\n\n        editor.toolbar.close();\n\n        if (!editor.toolbar.inline.actionsOpened) {\n\n            editor.toolbar.inline.close();\n            editor.content.clearMark();\n\n        }\n\n    };\n\n    callbacks.redactorClicked = function (event) {\n\n        callbacks.detectWhenClickedOnFirstLevelBlockArea();\n\n        editor.content.workingNodeChanged(event.target);\n\n        editor.ui.saveInputs();\n\n        var selectedText = editor.toolbar.inline.getSelectionText(),\n            firstLevelBlock;\n\n        /**\n         * If selection range took off, then we hide inline toolbar\n         */\n        if (selectedText.length === 0) {\n\n            editor.toolbar.inline.close();\n\n        }\n\n        /** Update current input index in memory when caret focused into existed input */\n        if (event.target.contentEditable == 'true') {\n\n            editor.caret.saveCurrentInputIndex();\n\n        }\n\n        if (editor.content.currentNode === null) {\n\n            /**\n             * If inputs in redactor does not exits, then we put input index 0 not -1\n             */\n            var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n\n            /** If we have any inputs */\n            if (editor.state.inputs.length) {\n\n                /**\n                * @todo Refactor\n                */\n\n                /** getting firstlevel parent of input */\n                firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n\n            }\n\n            /** If input is empty, then we set caret to the last input */\n            if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n\n                editor.caret.setToBlock(indexOfLastInput);\n\n            } else {\n\n                /** Create new input when caret clicked in redactors area */\n                var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n\n                editor.content.insertBlock({\n                    type  : NEW_BLOCK_TYPE,\n                    block : editor.tools[NEW_BLOCK_TYPE].render()\n                });\n\n                /** If there is no inputs except inserted */\n                if (editor.state.inputs.length === 1) {\n\n                    editor.caret.setToBlock(indexOfLastInput);\n\n                } else {\n\n                    /** Set caret to this appended input */\n                    editor.caret.setToNextBlock(indexOfLastInput);\n\n                }\n\n            }\n\n            /**\n             * Move toolbar to the right position and open\n             */\n            editor.toolbar.move();\n            editor.toolbar.open();\n\n        } else {\n\n            /**\n             * Move toolbar to the new position and open\n             */\n            editor.toolbar.move();\n            editor.toolbar.open();\n\n            /** Close all panels */\n            editor.toolbar.settings.close();\n            editor.toolbar.toolbox.close();\n\n        }\n\n\n        var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n            currentNodeType = editor.content.currentNode.dataset.tool,\n            isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n\n\n        /** Hide plus buttons */\n        editor.toolbar.hidePlusButton();\n\n        if (!inputIsEmpty) {\n\n            /** Mark current block */\n            editor.content.markBlock();\n\n        }\n\n        if ( isInitialType && inputIsEmpty ) {\n\n            /** Show plus button */\n            editor.toolbar.showPlusButton();\n\n        }\n\n\n    };\n\n    /**\n     * This method allows to define, is caret in contenteditable element or not.\n     * Otherwise, if we get TEXT node from range container, that will means we have input index.\n     * In this case we use default browsers behaviour (if plugin allows that) or overwritten action.\n     * Therefore, to be sure that we've clicked first-level block area, we should have currentNode, which always\n     * specifies to the first-level block. Other cases we just ignore.\n     */\n    callbacks.detectWhenClickedOnFirstLevelBlockArea = function () {\n\n        var selection  = window.getSelection(),\n            anchorNode = selection.anchorNode,\n            flag = false;\n\n        if (selection.rangeCount === 0) {\n\n            editor.content.editorAreaHightlighted = true;\n\n        } else {\n\n            if (!editor.core.isDomNode(anchorNode)) {\n\n                anchorNode = anchorNode.parentNode;\n\n            }\n\n            /** Already founded, without loop */\n            if (anchorNode.contentEditable == 'true') {\n\n                flag = true;\n\n            }\n\n            while (anchorNode.contentEditable != 'true') {\n\n                anchorNode = anchorNode.parentNode;\n\n                if (anchorNode.contentEditable == 'true') {\n\n                    flag = true;\n\n                }\n\n                if (anchorNode == document.body) {\n\n                    break;\n\n                }\n\n            }\n\n            /** If editable element founded, flag is \"TRUE\", Therefore we return \"FALSE\" */\n            editor.content.editorAreaHightlighted = flag ? false : true;\n\n        }\n\n    };\n\n    /**\n     * Toolbar button click handler\n     * @param this - cursor to the button\n     */\n    callbacks.toolbarButtonClicked = function (event) {\n\n        var button = this;\n\n        editor.toolbar.current = button.dataset.type;\n\n        editor.toolbar.toolbox.toolClicked(event);\n        editor.toolbar.close();\n\n    };\n\n    /** Show or Hide toolbox when plus button is clicked */\n    callbacks.plusButtonClicked = function () {\n\n        if (!editor.nodes.toolbox.classList.contains('opened')) {\n\n            editor.toolbar.toolbox.open();\n\n        } else {\n\n            editor.toolbar.toolbox.close();\n\n        }\n\n    };\n\n    /**\n     * Block handlers for KeyDown events\n     */\n    callbacks.blockKeydown = function (event) {\n\n        let block = this; // event.target input\n\n        switch (event.keyCode) {\n\n            case editor.core.keys.DOWN:\n            case editor.core.keys.RIGHT:\n                editor.callback.blockRightOrDownArrowPressed();\n                break;\n\n            case editor.core.keys.BACKSPACE:\n                editor.callback.backspacePressed(block, event);\n                break;\n\n            case editor.core.keys.UP:\n            case editor.core.keys.LEFT:\n                editor.callback.blockLeftOrUpArrowPressed();\n                break;\n\n        }\n\n    };\n\n    /**\n     * RIGHT or DOWN keydowns on block\n     */\n    callbacks.blockRightOrDownArrowPressed = function () {\n\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        /** Check for caret existance */\n        if (!focusedNode) {\n\n            return false;\n\n        }\n\n        /** Looking for closest (parent) contentEditable element of focused node */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        /**\n         * Founded contentEditable element doesn't have childs\n         * Or maybe New created block\n         */\n        if (!focusedNode.textContent) {\n\n            editor.caret.setToNextBlock(editableElementIndex);\n            return;\n\n        }\n\n        /**\n         * Do nothing when caret doesn not reaches the end of last child\n         */\n        var caretInLastChild    = false,\n            caretAtTheEndOfText = false;\n\n        var lastChild,\n            deepestTextnode;\n\n        lastChild = focusedNode.childNodes[focusedNode.childNodes.length - 1 ];\n\n        if (editor.core.isDomNode(lastChild)) {\n\n            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(lastChild, lastChild.childNodes.length);\n\n        } else {\n\n            deepestTextnode = lastChild;\n\n        }\n\n        caretInLastChild = selection.anchorNode == deepestTextnode;\n        caretAtTheEndOfText = deepestTextnode.length == selection.anchorOffset;\n\n        if ( !caretInLastChild  || !caretAtTheEndOfText ) {\n\n            editor.core.log('arrow [down|right] : caret does not reached the end');\n            return false;\n\n        }\n\n        editor.caret.setToNextBlock(editableElementIndex);\n\n    };\n\n    /**\n     * LEFT or UP keydowns on block\n     */\n    callbacks.blockLeftOrUpArrowPressed = function () {\n\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        /** Check for caret existance */\n        if (!focusedNode) {\n\n            return false;\n\n        }\n\n        /**\n         * LEFT or UP not at the beginning\n         */\n        if ( selection.anchorOffset !== 0) {\n\n            return false;\n\n        }\n\n        /** Looking for parent contentEditable block */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        /**\n         * Do nothing if caret is not at the beginning of first child\n         */\n        var caretInFirstChild   = false,\n            caretAtTheBeginning = false;\n\n        var firstChild,\n            deepestTextnode;\n\n        /**\n         * Founded contentEditable element doesn't have childs\n         * Or maybe New created block\n         */\n        if (!focusedNode.textContent) {\n\n            editor.caret.setToPreviousBlock(editableElementIndex);\n            return;\n\n        }\n\n        firstChild = focusedNode.childNodes[0];\n\n        if (editor.core.isDomNode(firstChild)) {\n\n            deepestTextnode = editor.content.getDeepestTextNodeFromPosition(firstChild, 0);\n\n        } else {\n\n            deepestTextnode = firstChild;\n\n        }\n\n        caretInFirstChild   = selection.anchorNode == deepestTextnode;\n        caretAtTheBeginning = selection.anchorOffset === 0;\n\n        if ( caretInFirstChild && caretAtTheBeginning ) {\n\n            editor.caret.setToPreviousBlock(editableElementIndex);\n\n        }\n\n    };\n\n    /**\n     * Callback for enter key pressing in first-level block area\n     * @param {Event} event\n     */\n    callbacks.enterPressedOnBlock = function () {\n\n        var NEW_BLOCK_TYPE  = editor.settings.initialBlockPlugin;\n\n        editor.content.insertBlock({\n            type  : NEW_BLOCK_TYPE,\n            block : editor.tools[NEW_BLOCK_TYPE].render()\n        }, true );\n\n        editor.toolbar.move();\n        editor.toolbar.open();\n\n    };\n\n    callbacks.backspacePressed = function (block, event) {\n\n        var currentInputIndex = editor.caret.getCurrentInputIndex(),\n            range,\n            selectionLength,\n            firstLevelBlocksCount;\n\n        if (isNativeInput(event.target)) {\n\n            /** If input value is empty - remove block */\n            if (event.target.value.trim() == '') {\n\n                block.remove();\n\n            } else {\n\n                return;\n\n            }\n\n        }\n\n        if (block.textContent.trim()) {\n\n            range           = editor.content.getRange();\n            selectionLength = range.endOffset - range.startOffset;\n\n            if (editor.caret.position.atStart() && !selectionLength && editor.state.inputs[currentInputIndex - 1]) {\n\n                editor.content.mergeBlocks(currentInputIndex);\n\n            } else {\n\n                return;\n\n            }\n\n        }\n\n        if (!selectionLength) {\n\n            block.remove();\n\n        }\n\n\n        firstLevelBlocksCount = editor.nodes.redactor.childNodes.length;\n\n        /**\n         * If all blocks are removed\n         */\n        if (firstLevelBlocksCount === 0) {\n\n            /** update currentNode variable */\n            editor.content.currentNode = null;\n\n            /** Inserting new empty initial block */\n            editor.ui.addInitialBlock();\n\n            /** Updating inputs state after deleting last block */\n            editor.ui.saveInputs();\n\n            /** Set to current appended block */\n            window.setTimeout(function () {\n\n                editor.caret.setToPreviousBlock(1);\n\n            }, 10);\n\n        } else {\n\n            if (editor.caret.inputIndex !== 0) {\n\n                /** Target block is not first */\n                editor.caret.setToPreviousBlock(editor.caret.inputIndex);\n\n            } else {\n\n                /** If we try to delete first block */\n                editor.caret.setToNextBlock(editor.caret.inputIndex);\n\n            }\n\n        }\n\n        editor.toolbar.move();\n\n        if (!editor.toolbar.opened) {\n\n            editor.toolbar.open();\n\n        }\n\n        /** Updating inputs state */\n        editor.ui.saveInputs();\n\n        /** Prevent default browser behaviour */\n        event.preventDefault();\n\n    };\n\n    /**\n     * This method is used to observe pasted dirty data.\n     *\n     * Mutation handlers send to separate observers each mutation (added, changed and so on), which will be\n     * passed from handler that sanitizes and replaces data.\n     *\n     * Probably won't be used\n     *\n     * @deprecated\n     *\n     * @param event\n     * @private\n     */\n    callbacks._blockPasteCallback = function () {\n\n        var currentInputIndex = editor.caret.getCurrentInputIndex();\n\n        /**\n         * create an observer instance\n         */\n        var observer = new MutationObserver(editor.callback.handleMutationsOnPaste);\n\n        /**\n         * configuration of the observer:\n         */\n        var config = {\n            attributes: true,\n            childList: false,\n            characterData: false,\n            subtree : true\n        };\n\n        // pass in the target node, as well as the observer options\n        observer.observe(editor.state.inputs[currentInputIndex], config);\n\n    };\n\n    /**\n     * This method prevents default behaviour.\n     *\n     * We get from clipboard pasted data, sanitize, make a fragment that contains of this sanitized nodes.\n     * Firstly, we need to memorize the caret position. We can do that by getting the range of selection.\n     * After all, we insert clear fragment into caret placed position. Then, we should move the caret to the last node\n     *\n     * @param event\n     */\n    callbacks.blockPasteCallback = function (event) {\n\n        /** If area is input or textarea then allow default behaviour */\n        if ( isNativeInput(event.target) ) {\n\n            return;\n\n        }\n\n        /** Prevent default behaviour */\n        event.preventDefault();\n\n        var editableParent = editor.content.getEditableParent(event.target),\n            currentNode = editor.content.currentNode;\n\n        /** Allow paste when event target placed in Editable element */\n        if (!editableParent) {\n\n            return;\n\n        }\n\n        /** get html pasted data - dirty data */\n        var htmlData  = event.clipboardData.getData('text/html'),\n            plainData = event.clipboardData.getData('text/plain');\n\n        /** Temporary DIV that is used to work with childs as arrays item */\n        var div     = editor.draw.node('DIV', '', {}),\n            cleaner = new editor.sanitizer.init(editor.sanitizer.Config.BASIC),\n            cleanData,\n            fragment;\n\n        /** Create fragment, that we paste to range after proccesing */\n        fragment = document.createDocumentFragment();\n\n        if ( htmlData.trim() != '' ) {\n\n            cleanData = cleaner.clean(htmlData);\n            div.innerHTML = cleanData;\n\n        } else {\n\n            div.innerText = plainData.toString();\n\n        }\n\n        var node, lastNode;\n\n        /**\n         * and fill in fragment\n         */\n        while (( node = div.firstChild) ) {\n\n            lastNode = fragment.appendChild(node);\n\n        }\n\n\n        if (editor.tools[currentNode.dataset.tool].allowRenderOnPaste) {\n\n            if (editor.paste.pasted(event)) return;\n\n        }\n\n        /**\n         * work with selection and range\n         */\n        var selection, range;\n\n        selection = window.getSelection();\n\n        range = selection.getRangeAt(0);\n        range.deleteContents();\n\n        range.insertNode(fragment);\n\n        /** Preserve the selection */\n        if (lastNode) {\n\n            range = range.cloneRange();\n            range.setStartAfter(lastNode);\n            range.collapse(true);\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n        }\n\n    };\n\n    /**\n     * Sends all mutations to paste handler\n     */\n    callbacks.handleMutationsOnPaste = function (mutations) {\n\n        var self = this;\n\n        /**\n         * Calling function with context of this function.\n         * Also, we should sanitize pasted or changed data one time and ignore\n         * changings which makes sanitize method.\n         * For that, we need to send Context, MutationObserver.__proto__ that contains\n         * observer disconnect method.\n         */\n        mutations.forEach(function (mutation) {\n\n            editor.content.paste.call(self, mutation);\n\n        });\n\n    };\n\n    /**\n     * Clicks on block settings button\n     */\n    callbacks.showSettingsButtonClicked = function () {\n\n        /**\n         * Get type of current block\n         * It uses to append settings from tool.settings property.\n         * ...\n         * Type is stored in data-type attribute on block\n         */\n        var currentToolType = editor.content.currentNode.dataset.tool;\n\n        editor.toolbar.settings.toggle(currentToolType);\n\n        /** Close toolbox when settings button is active */\n        editor.toolbar.toolbox.close();\n        editor.toolbar.settings.hideRemoveActions();\n\n    };\n\n    /**\n     * Check block for\n     * @param target\n     */\n    var isNativeInput = function (target) {\n\n        var nativeInputAreas = ['INPUT', 'TEXTAREA'];\n\n        return (nativeInputAreas.indexOf(target.tagName) != -1);\n\n    };\n\n    return callbacks;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/callbacks.js","/**\n * Codex Editor Draw module\n *\n * @author Codex Team\n * @version 1.0.\n */\n\nmodule.exports = (function (draw) {\n\n    /**\n     * Base editor wrapper\n     */\n    draw.wrapper = function () {\n\n        var wrapper = document.createElement('div');\n\n        wrapper.className += 'codex-editor';\n\n        return wrapper;\n\n    };\n\n    /**\n     * Content-editable holder\n     */\n    draw.redactor = function () {\n\n        var redactor = document.createElement('div');\n\n        redactor.className += 'ce-redactor';\n\n        return redactor;\n\n    };\n\n    draw.ceBlock = function () {\n\n        var block = document.createElement('DIV');\n\n        block.className += 'ce_block';\n\n        return block;\n\n    };\n\n    /**\n     * Empty toolbar with toggler\n     */\n    draw.toolbar = function () {\n\n        var bar = document.createElement('div');\n\n        bar.className += 'ce-toolbar';\n\n        return bar;\n\n    };\n\n    draw.toolbarContent = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.classList.add('ce-toolbar__content');\n\n        return wrapper;\n\n    };\n\n    /**\n     * Inline toolbar\n     */\n    draw.inlineToolbar = function () {\n\n        var bar = document.createElement('DIV');\n\n        bar.className += 'ce-toolbar-inline';\n\n        return bar;\n\n    };\n\n    /**\n     * Wrapper for inline toobar buttons\n     */\n    draw.inlineToolbarButtons = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.className += 'ce-toolbar-inline__buttons';\n\n        return wrapper;\n\n    };\n\n    /**\n     * For some actions\n     */\n    draw.inlineToolbarActions = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.className += 'ce-toolbar-inline__actions';\n\n        return wrapper;\n\n    };\n\n    draw.inputForLink = function () {\n\n        var input = document.createElement('INPUT');\n\n        input.type        = 'input';\n        input.className  += 'inputForLink';\n        input.placeholder = 'Вставьте ссылку ...';\n        input.setAttribute('form', 'defaultForm');\n\n        input.setAttribute('autofocus', 'autofocus');\n\n        return input;\n\n    };\n\n    /**\n     * @todo Desc\n     */\n    draw.blockButtons = function () {\n\n        var block = document.createElement('div');\n\n        block.className += 'ce-toolbar__actions';\n\n        return block;\n\n    };\n\n    /**\n     * Block settings panel\n     */\n    draw.blockSettings = function () {\n\n        var settings = document.createElement('div');\n\n        settings.className += 'ce-settings';\n\n        return settings;\n\n    };\n\n    draw.defaultSettings = function () {\n\n        var div = document.createElement('div');\n\n        div.classList.add('ce-settings_default');\n\n        return div;\n\n    };\n\n    draw.pluginsSettings = function () {\n\n        var div = document.createElement('div');\n\n        div.classList.add('ce-settings_plugin');\n\n        return div;\n\n    };\n\n    draw.plusButton = function () {\n\n        var button = document.createElement('span');\n\n        button.className = 'ce-toolbar__plus';\n        // button.innerHTML = '<i class=\"ce-icon-plus\"></i>';\n\n        return button;\n\n    };\n\n    /**\n     * Settings button in toolbar\n     */\n    draw.settingsButton = function () {\n\n        var toggler = document.createElement('span');\n\n        toggler.className = 'ce-toolbar__settings-btn';\n\n        /** Toggler button*/\n        toggler.innerHTML = '<i class=\"ce-icon-cog\"></i>';\n\n        return toggler;\n\n    };\n\n    /**\n     * Redactor tools wrapper\n     */\n\n    draw.toolbox = function () {\n\n        var wrapper = document.createElement('div');\n\n        wrapper.className = 'ce-toolbar__tools';\n\n        return wrapper;\n\n    };\n\n    /**\n     * @protected\n     *\n     * Draws tool buttons for toolbox\n     *\n     * @param {String} type\n     * @param {String} classname\n     * @returns {Element}\n     */\n    draw.toolbarButton = function (type, classname) {\n\n        var button     = document.createElement('li'),\n            toolIcon  = document.createElement('i'),\n            toolTitle = document.createElement('span');\n\n        button.dataset.type = type;\n        button.setAttribute('title', type);\n\n        toolIcon.classList.add(classname);\n        toolTitle.classList.add('ce_toolbar_tools--title');\n\n\n        button.appendChild(toolIcon);\n        button.appendChild(toolTitle);\n\n        return button;\n\n    };\n\n    /**\n     * @protected\n     *\n     * Draws tools for inline toolbar\n     *\n     * @param {String} type\n     * @param {String} classname\n     */\n    draw.toolbarButtonInline = function (type, classname) {\n\n        var button     = document.createElement('BUTTON'),\n            toolIcon  = document.createElement('I');\n\n        button.type = 'button';\n        button.dataset.type = type;\n        toolIcon.classList.add(classname);\n\n        button.appendChild(toolIcon);\n\n        return button;\n\n    };\n\n    /**\n     * Redactor block\n     */\n    draw.block = function (tagName, content) {\n\n        var node = document.createElement(tagName);\n\n        node.innerHTML = content || '';\n\n        return node;\n\n    };\n\n    /**\n     * Creates Node with passed tagName and className\n     * @param {string}  tagName\n     * @param {string} className\n     * @param {object} properties - allow to assign properties\n     */\n    draw.node = function ( tagName, className, properties ) {\n\n        var el = document.createElement( tagName );\n\n        if ( className ) el.className = className;\n\n        if ( properties ) {\n\n            for (var name in properties) {\n\n                el[name] = properties[name];\n\n            }\n\n        }\n\n        return el;\n\n    };\n\n    /**\n    * Unavailable plugin block\n    */\n    draw.unavailableBlock = function () {\n\n        var wrapper = document.createElement('DIV');\n\n        wrapper.classList.add('cdx-unavailable-block');\n\n        return wrapper;\n\n    };\n\n    return draw;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/draw.js","/**\n * Codex Editor Caret Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (caret) {\n\n    let editor = codex.editor;\n\n    /**\n     * @var {int} InputIndex - editable element in DOM\n     */\n    caret.inputIndex = null;\n\n    /**\n     * @var {int} offset - caret position in a text node.\n     */\n    caret.offset = null;\n\n    /**\n     * @var {int} focusedNodeIndex - we get index of child node from first-level block\n     */\n    caret.focusedNodeIndex = null;\n\n    /**\n     * Creates Document Range and sets caret to the element.\n     * @protected\n     * @uses caret.save — if you need to save caret position\n     * @param {Element} el - Changed Node.\n     */\n    caret.set = function ( el, index, offset) {\n\n        offset = offset || caret.offset || 0;\n        index  = index  || caret.focusedNodeIndex || 0;\n\n        var childs = el.childNodes,\n            nodeToSet;\n\n        if ( childs.length === 0 ) {\n\n            nodeToSet = el;\n\n        } else {\n\n            nodeToSet = childs[index];\n\n        }\n\n        /** If Element is INPUT */\n        if (el.contentEditable != 'true') {\n\n            el.focus();\n            return;\n\n        }\n\n        if (editor.core.isDomNode(nodeToSet)) {\n\n            nodeToSet = editor.content.getDeepestTextNodeFromPosition(nodeToSet, nodeToSet.childNodes.length);\n\n        }\n\n        var range     = document.createRange(),\n            selection = window.getSelection();\n\n        window.setTimeout(function () {\n\n            range.setStart(nodeToSet, offset);\n            range.setEnd(nodeToSet, offset);\n\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n            editor.caret.saveCurrentInputIndex();\n\n        }, 20);\n\n    };\n\n    /**\n     * @protected\n     * Updates index of input and saves it in caret object\n     */\n    caret.saveCurrentInputIndex = function () {\n\n        /** Index of Input that we paste sanitized content */\n        var selection   = window.getSelection(),\n            inputs      = editor.state.inputs,\n            focusedNode = selection.anchorNode,\n            focusedNodeHolder;\n\n        if (!focusedNode) {\n\n            return;\n\n        }\n\n        /** Looking for parent contentEditable block */\n        while (focusedNode.contentEditable != 'true') {\n\n            focusedNodeHolder = focusedNode.parentNode;\n            focusedNode       = focusedNodeHolder;\n\n        }\n\n        /** Input index in DOM level */\n        var editableElementIndex = 0;\n\n        while (focusedNode != inputs[editableElementIndex]) {\n\n            editableElementIndex ++;\n\n        }\n\n        caret.inputIndex = editableElementIndex;\n\n    };\n\n    /**\n     * Returns current input index (caret object)\n     */\n    caret.getCurrentInputIndex = function () {\n\n        return caret.inputIndex;\n\n    };\n\n    /**\n     * @param {int} index - index of first-level block after that we set caret into next input\n     */\n    caret.setToNextBlock = function (index) {\n\n        var inputs = editor.state.inputs,\n            nextInput = inputs[index + 1];\n\n        if (!nextInput) {\n\n            editor.core.log('We are reached the end');\n            return;\n\n        }\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!nextInput.childNodes.length) {\n\n            var emptyTextElement = document.createTextNode('');\n\n            nextInput.appendChild(emptyTextElement);\n\n        }\n\n        editor.caret.inputIndex = index + 1;\n        editor.caret.set(nextInput, 0, 0);\n        editor.content.workingNodeChanged(nextInput);\n\n    };\n\n    /**\n     * @param {int} index - index of target input.\n     * Sets caret to input with this index\n     */\n    caret.setToBlock = function (index) {\n\n        var inputs = editor.state.inputs,\n            targetInput = inputs[index];\n\n        if ( !targetInput ) {\n\n            return;\n\n        }\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!targetInput.childNodes.length) {\n\n            var emptyTextElement = document.createTextNode('');\n\n            targetInput.appendChild(emptyTextElement);\n\n        }\n\n        editor.caret.inputIndex = index;\n        editor.caret.set(targetInput, 0, 0);\n        editor.content.workingNodeChanged(targetInput);\n\n    };\n\n    /**\n     * @param {int} index - index of input\n     */\n    caret.setToPreviousBlock = function (index) {\n\n        index = index || 0;\n\n        var inputs = editor.state.inputs,\n            previousInput = inputs[index - 1],\n            lastChildNode,\n            lengthOfLastChildNode,\n            emptyTextElement;\n\n\n        if (!previousInput) {\n\n            editor.core.log('We are reached first node');\n            return;\n\n        }\n\n        lastChildNode = editor.content.getDeepestTextNodeFromPosition(previousInput, previousInput.childNodes.length);\n        lengthOfLastChildNode = lastChildNode.length;\n\n        /**\n         * When new Block created or deleted content of input\n         * We should add some text node to set caret\n         */\n        if (!previousInput.childNodes.length) {\n\n            emptyTextElement = document.createTextNode('');\n            previousInput.appendChild(emptyTextElement);\n\n        }\n        editor.caret.inputIndex = index - 1;\n        editor.caret.set(previousInput, previousInput.childNodes.length - 1, lengthOfLastChildNode);\n        editor.content.workingNodeChanged(inputs[index - 1]);\n\n    };\n\n    caret.position = {\n\n        atStart : function () {\n\n            var selection       = window.getSelection(),\n                anchorOffset    = selection.anchorOffset,\n                anchorNode      = selection.anchorNode,\n                firstLevelBlock = editor.content.getFirstLevelBlock(anchorNode),\n                pluginsRender   = firstLevelBlock.childNodes[0];\n\n            if (!editor.core.isDomNode(anchorNode)) {\n\n                anchorNode = anchorNode.parentNode;\n\n            }\n\n            var isFirstNode  = anchorNode === pluginsRender.childNodes[0],\n                isOffsetZero = anchorOffset === 0;\n\n            return isFirstNode && isOffsetZero;\n\n        },\n\n        atTheEnd : function () {\n\n            var selection    = window.getSelection(),\n                anchorOffset = selection.anchorOffset,\n                anchorNode   = selection.anchorNode;\n\n            /** Caret is at the end of input */\n            return !anchorNode || !anchorNode.length || anchorOffset === anchorNode.length;\n\n        }\n    };\n\n    return caret;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/caret.js","/**\n * Codex Editor Notification Module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = (function (notifications) {\n\n    let editor = codex.editor;\n\n    var queue = [];\n\n    var addToQueue = function (settings) {\n\n        queue.push(settings);\n\n        var index = 0;\n\n        while ( index < queue.length && queue.length > 5) {\n\n            if (queue[index].type == 'confirm' || queue[index].type == 'prompt') {\n\n                index++;\n                continue;\n\n            }\n\n            queue[index].close();\n            queue.splice(index, 1);\n\n        }\n\n    };\n\n    notifications.createHolder = function () {\n\n        var holder = editor.draw.node('DIV', 'cdx-notifications-block');\n\n        editor.nodes.notifications = document.body.appendChild(holder);\n\n        return holder;\n\n    };\n\n\n    /**\n     * Error notificator. Shows block with message\n     * @protected\n     */\n    notifications.errorThrown = function (errorMsg, event) {\n\n        editor.notifications.notification({message: 'This action is not available currently', type: event.type});\n\n    };\n\n    /**\n     *\n     * Appends notification\n     *\n     *  settings = {\n     *      type        - notification type (reserved types: alert, confirm, prompt). Just add class 'cdx-notification-'+type\n     *      message     - notification message\n     *      okMsg       - confirm button text (default - 'Ok')\n     *      cancelBtn   - cancel button text (default - 'Cancel'). Only for confirm and prompt types\n     *      confirm     - function-handler for ok button click\n     *      cancel      - function-handler for cancel button click. Only for confirm and prompt types\n     *      time        - time (in seconds) after which notification will close (default - 10s)\n     *  }\n     *\n     * @param settings\n     */\n    notifications.notification = function (constructorSettings) {\n\n        /** Private vars and methods */\n        var notification = null,\n            cancel       = null,\n            type         = null,\n            confirm      = null,\n            inputField   = null;\n\n        var confirmHandler = function () {\n\n            close();\n\n            if (typeof confirm !== 'function' ) {\n\n                return;\n\n            }\n\n            if (type == 'prompt') {\n\n                confirm(inputField.value);\n                return;\n\n            }\n\n            confirm();\n\n        };\n\n        var cancelHandler = function () {\n\n            close();\n\n            if (typeof cancel !== 'function' ) {\n\n                return;\n\n            }\n\n            cancel();\n\n        };\n\n\n        /** Public methods */\n        function create(settings) {\n\n            if (!(settings && settings.message)) {\n\n                editor.core.log('Can\\'t create notification. Message is missed');\n                return;\n\n            }\n\n            settings.type = settings.type || 'alert';\n            settings.time = settings.time*1000 || 10000;\n\n            var wrapper = editor.draw.node('DIV', 'cdx-notification'),\n                message = editor.draw.node('DIV', 'cdx-notification__message'),\n                input = editor.draw.node('INPUT', 'cdx-notification__input'),\n                okBtn = editor.draw.node('SPAN', 'cdx-notification__ok-btn'),\n                cancelBtn = editor.draw.node('SPAN', 'cdx-notification__cancel-btn');\n\n            message.textContent = settings.message;\n            okBtn.textContent = settings.okMsg || 'ОК';\n            cancelBtn.textContent = settings.cancelMsg || 'Отмена';\n\n            editor.listeners.add(okBtn, 'click', confirmHandler);\n            editor.listeners.add(cancelBtn, 'click', cancelHandler);\n\n            wrapper.appendChild(message);\n\n            if (settings.type == 'prompt') {\n\n                wrapper.appendChild(input);\n\n            }\n\n            wrapper.appendChild(okBtn);\n\n            if (settings.type == 'prompt' || settings.type == 'confirm') {\n\n                wrapper.appendChild(cancelBtn);\n\n            }\n\n            wrapper.classList.add('cdx-notification-' + settings.type);\n            wrapper.dataset.type = settings.type;\n\n            notification = wrapper;\n            type         = settings.type;\n            confirm      = settings.confirm;\n            cancel       = settings.cancel;\n            inputField   = input;\n\n            if (settings.type != 'prompt' && settings.type != 'confirm') {\n\n                window.setTimeout(close, settings.time);\n\n            }\n\n        };\n\n        function send() {\n\n            editor.nodes.notifications.appendChild(notification);\n            inputField.focus();\n\n            editor.nodes.notifications.classList.add('cdx-notification__notification-appending');\n\n            window.setTimeout(function () {\n\n                editor.nodes.notifications.classList.remove('cdx-notification__notification-appending');\n\n            }, 100);\n\n            addToQueue({type: type, close: close});\n\n        };\n\n        function close() {\n\n            notification.remove();\n\n        };\n\n\n        if (constructorSettings) {\n\n            create(constructorSettings);\n            send();\n\n        }\n\n        return {\n            create: create,\n            send: send,\n            close: close\n        };\n\n    };\n\n    notifications.clear = function () {\n\n        editor.nodes.notifications.innerHTML = '';\n        queue = [];\n\n    };\n\n    return notifications;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/notifications.js","/**\n * Codex Editor Parser Module\n *\n * @author Codex Team\n * @version 1.1\n */\n\nmodule.exports = (function (parser) {\n\n    let editor = codex.editor;\n\n    /** inserting text */\n    parser.insertPastedContent = function (blockType, tag) {\n\n        editor.content.insertBlock({\n            type :  blockType.type,\n            block : blockType.render({\n                text : tag.innerHTML\n            })\n        });\n\n    };\n\n    /**\n     * Check DOM node for display style: separated block or child-view\n     */\n    parser.isFirstLevelBlock = function (node) {\n\n        return node.nodeType == editor.core.nodeTypes.TAG &&\n            node.classList.contains(editor.ui.className.BLOCK_CLASSNAME);\n\n    };\n\n    return parser;\n\n})({});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/parser.js","/**\n * Codex Sanitizer\n */\n\nmodule.exports = (function (sanitizer) {\n\n    var janitor = require('html-janitor');\n\n    /**\n     * Basic config\n     */\n    var Config = {\n\n        BASIC : {\n\n            tags: {\n                p: {},\n                a: {\n                    href: true,\n                    target: '_blank',\n                    rel: 'nofollow'\n                },\n                i: {},\n                b: {},\n                strong: {},\n                em: {},\n                span: {}\n            }\n        }\n    };\n\n    sanitizer.Config = Config;\n\n    sanitizer.init = janitor;\n\n    return sanitizer;\n\n})({});\n\n\n// WEBPACK FOOTER //\n// ./modules/sanitizer.js","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('html-janitor', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.HTMLJanitor = factory();\n  }\n}(this, function () {\n\n  /**\n   * @param {Object} config.tags Dictionary of allowed tags.\n   * @param {boolean} config.keepNestedBlockElements Default false.\n   */\n  function HTMLJanitor(config) {\n\n    var tagDefinitions = config['tags'];\n    var tags = Object.keys(tagDefinitions);\n\n    var validConfigValues = tags\n      .map(function(k) { return typeof tagDefinitions[k]; })\n      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\n    if(!validConfigValues) {\n      throw new Error(\"The configuration was invalid\");\n    }\n\n    this.config = config;\n  }\n\n  // TODO: not exhaustive?\n  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n  function isBlockElement(node) {\n    return blockElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n  function isInlineElement(node) {\n    return inlineElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  HTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div');\n    sandbox.innerHTML = html;\n\n    this._sanitize(sandbox);\n\n    return sandbox.innerHTML;\n  };\n\n  HTMLJanitor.prototype._sanitize = function (parentNode) {\n    var treeWalker = createTreeWalker(parentNode);\n    var node = treeWalker.firstChild();\n    if (!node) { return; }\n\n    do {\n      // Ignore nodes that have already been sanitized\n      if (node._sanitized) {\n        continue;\n      }\n\n      if (node.nodeType === Node.TEXT_NODE) {\n        // If this text node is just whitespace and the previous or next element\n        // sibling is a block element, remove it\n        // N.B.: This heuristic could change. Very specific to a bug with\n        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n        // FIXME: make this an option?\n        if (node.data.trim() === ''\n            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n          parentNode.removeChild(node);\n          this._sanitize(parentNode);\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      // Remove all comments\n      if (node.nodeType === Node.COMMENT_NODE) {\n        parentNode.removeChild(node);\n        this._sanitize(parentNode);\n        break;\n      }\n\n      var isInline = isInlineElement(node);\n      var containsBlockElement;\n      if (isInline) {\n        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n      }\n\n      // Block elements should not be nested (e.g. <li><p>...); if\n      // they are, we want to unwrap the inner block element.\n      var isNotTopContainer = !! parentNode.parentNode;\n      var isNestedBlockElement =\n            isBlockElement(parentNode) &&\n            isBlockElement(node) &&\n            isNotTopContainer;\n\n      var nodeName = node.nodeName.toLowerCase();\n\n      var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);\n\n      var isInvalid = isInline && containsBlockElement;\n\n      // Drop tag entirely according to the whitelist *and* if the markup\n      // is invalid.\n      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n        // Do not keep the inner text of SCRIPT/STYLE elements.\n        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n          while (node.childNodes.length > 0) {\n            parentNode.insertBefore(node.childNodes[0], node);\n          }\n        }\n        parentNode.removeChild(node);\n\n        this._sanitize(parentNode);\n        break;\n      }\n\n      // Sanitize attributes\n      for (var a = 0; a < node.attributes.length; a += 1) {\n        var attr = node.attributes[a];\n\n        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n          node.removeAttribute(attr.name);\n          // Shift the array to continue looping.\n          a = a - 1;\n        }\n      }\n\n      // Sanitize children\n      this._sanitize(node);\n\n      // Mark node as sanitized so it's ignored in future runs\n      node._sanitized = true;\n    } while ((node = treeWalker.nextSibling()));\n  };\n\n  function createTreeWalker(node) {\n    return document.createTreeWalker(node,\n                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n                                     null, false);\n  }\n\n  function getAllowedAttrs(config, nodeName, node){\n    if (typeof config.tags[nodeName] === 'function') {\n      return config.tags[nodeName](node);\n    } else {\n      return config.tags[nodeName];\n    }\n  }\n\n  function shouldRejectNode(node, allowedAttrs){\n    if (typeof allowedAttrs === 'undefined') {\n      return true;\n    } else if (typeof allowedAttrs === 'boolean') {\n      return !allowedAttrs;\n    }\n\n    return false;\n  }\n\n  function shouldRejectAttr(attr, allowedAttrs, node){\n    var attrName = attr.name.toLowerCase();\n\n    if (allowedAttrs === true){\n      return false;\n    } else if (typeof allowedAttrs[attrName] === 'function'){\n      return !allowedAttrs[attrName](attr.value, node);\n    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n      return true;\n    } else if (allowedAttrs[attrName] === false) {\n      return true;\n    } else if (typeof allowedAttrs[attrName] === 'string') {\n      return (allowedAttrs[attrName] !== attr.value);\n    }\n\n    return false;\n  }\n\n  return HTMLJanitor;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/html-janitor/src/html-janitor.js\n// module id = 18\n// module chunks = 0","/**\n * Codex Editor Anchors module\n *\n * @author Codex Team\n * @version 1.0\n */\n\nmodule.exports = function (anchors) {\n\n    let editor = codex.editor;\n\n    anchors.input       = null;\n    anchors.currentNode = null;\n\n    anchors.settingsOpened = function (currentBlock) {\n\n        anchors.currentNode = currentBlock;\n        anchors.input.value = anchors.currentNode.dataset.anchor || '';\n\n    };\n\n    anchors.anchorChanged = function (e) {\n\n        var newAnchor = e.target.value = anchors.rusToTranslit(e.target.value);\n\n        anchors.currentNode.dataset.anchor = newAnchor;\n\n        if (newAnchor.trim() !== '') {\n\n            anchors.currentNode.classList.add(editor.ui.className.BLOCK_WITH_ANCHOR);\n\n        } else {\n\n            anchors.currentNode.classList.remove(editor.ui.className.BLOCK_WITH_ANCHOR);\n\n        }\n\n    };\n\n    anchors.keyDownOnAnchorInput = function (e) {\n\n        if (e.keyCode == editor.core.keys.ENTER) {\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            e.target.blur();\n            editor.toolbar.settings.close();\n\n        }\n\n    };\n\n    anchors.keyUpOnAnchorInput = function (e) {\n\n        if (e.keyCode >= editor.core.keys.LEFT && e.keyCode <= editor.core.keys.DOWN) {\n\n            e.stopPropagation();\n\n        }\n\n    };\n\n    anchors.rusToTranslit = function (string) {\n\n        var ru = [\n                'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й',\n                'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф',\n                'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ы', 'Ь', 'Э', 'Ю', 'Я'\n            ],\n            en = [\n                'A', 'B', 'V', 'G', 'D', 'E', 'E', 'Zh', 'Z', 'I', 'Y',\n                'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F',\n                'H', 'C', 'Ch', 'Sh', 'Sch', '', 'Y', '', 'E', 'Yu', 'Ya'\n            ];\n\n        for (var i = 0; i < ru.length; i++) {\n\n            string = string.split(ru[i]).join(en[i]);\n            string = string.split(ru[i].toLowerCase()).join(en[i].toLowerCase());\n\n        }\n\n        string = string.replace(/[^0-9a-zA-Z_]+/g, '-');\n\n        return string;\n\n    };\n\n    return anchors;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/anchors.js","/**\n * Codex Editor Listeners module\n *\n * @author Codex Team\n * @version 1.0\n */\n\n/**\n * Module-decorator for event listeners assignment\n */\nmodule.exports = function (listeners) {\n\n    var allListeners = [];\n\n    /**\n     * Search methods\n     *\n     * byElement, byType and byHandler returns array of suitable listeners\n     * one and all takes element, eventType, and handler and returns first (all) suitable listener\n     *\n     */\n    listeners.search = function () {\n\n        var byElement = function (element, context) {\n\n            var listenersOnElement = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.element === element) {\n\n                    listenersOnElement.push(listener);\n\n                }\n\n            }\n\n            return listenersOnElement;\n\n        };\n\n        var byType = function (eventType, context) {\n\n            var listenersWithType = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.type === eventType) {\n\n                    listenersWithType.push(listener);\n\n                }\n\n            }\n\n            return listenersWithType;\n\n        };\n\n        var byHandler = function (handler, context) {\n\n            var listenersWithHandler = [];\n\n            context = context || allListeners;\n\n            for (var i = 0; i < context.length; i++) {\n\n                var listener = context[i];\n\n                if (listener.handler === handler) {\n\n                    listenersWithHandler.push(listener);\n\n                }\n\n            }\n\n            return listenersWithHandler;\n\n        };\n\n        var one = function (element, eventType, handler) {\n\n            var result = allListeners;\n\n            if (element)\n                result = byElement(element, result);\n\n            if (eventType)\n                result = byType(eventType, result);\n\n            if (handler)\n                result = byHandler(handler, result);\n\n            return result[0];\n\n        };\n\n        var all = function (element, eventType, handler) {\n\n            var result = allListeners;\n\n            if (element)\n                result = byElement(element, result);\n\n            if (eventType)\n                result = byType(eventType, result);\n\n            if (handler)\n                result = byHandler(handler, result);\n\n            return result;\n\n        };\n\n        return {\n            byElement   : byElement,\n            byType      : byType,\n            byHandler   : byHandler,\n            one         : one,\n            all         : all\n        };\n\n    }();\n\n    listeners.add = function (element, eventType, handler, isCapture) {\n\n        element.addEventListener(eventType, handler, isCapture);\n\n        var data = {\n            element: element,\n            type: eventType,\n            handler: handler\n        };\n\n        var alreadyAddedListener = listeners.search.one(element, eventType, handler);\n\n        if (!alreadyAddedListener) {\n\n            allListeners.push(data);\n\n        }\n\n    };\n\n    listeners.remove = function (element, eventType, handler) {\n\n        element.removeEventListener(eventType, handler);\n\n        var existingListeners = listeners.search.all(element, eventType, handler);\n\n        for (var i = 0; i < existingListeners.length; i++) {\n\n            var index = allListeners.indexOf(existingListeners[i]);\n\n            if (index > 0) {\n\n                allListeners.splice(index, 1);\n\n            }\n\n        }\n\n    };\n\n    listeners.removeAll = function () {\n\n        allListeners.map(function (current) {\n\n            listeners.remove(current.element, current.type, current.handler);\n\n        });\n\n    };\n\n    listeners.get = function (element, eventType, handler) {\n\n        return listeners.search.all(element, eventType, handler);\n\n    };\n\n    return listeners;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/listeners.js","/**\n * Codex Editor Destroyer module\n *\n * @auhor Codex Team\n * @version 1.0\n */\n\nmodule.exports = function (destroyer) {\n\n    let editor = codex.editor;\n\n    destroyer.removeNodes = function () {\n\n        editor.nodes.wrapper.remove();\n        editor.nodes.notifications.remove();\n\n    };\n\n    destroyer.destroyPlugins = function () {\n\n        for (var tool in editor.tools) {\n\n            if (typeof editor.tools[tool].destroy === 'function') {\n\n                editor.tools[tool].destroy();\n\n            }\n\n        }\n\n    };\n\n    destroyer.destroyScripts = function () {\n\n        var scripts = document.getElementsByTagName('SCRIPT');\n\n        for (var i = 0; i < scripts.length; i++) {\n\n            if (scripts[i].id.indexOf(editor.scriptPrefix) + 1) {\n\n                scripts[i].remove();\n                i--;\n\n            }\n\n        }\n\n    };\n\n\n    /**\n     * Delete editor data from webpage.\n     * You should send settings argument with boolean flags:\n     * @param settings.ui- remove redactor event listeners and DOM nodes\n     * @param settings.scripts - remove redactor scripts from DOM\n     * @param settings.plugins - remove plugin's objects\n     * @param settings.core - remove editor core. You can remove core only if UI and scripts flags is true\n     * }\n     *\n     */\n    destroyer.destroy = function (settings) {\n\n        if (!settings || typeof settings !== 'object') {\n\n            return;\n\n        }\n\n        if (settings.ui) {\n\n            destroyer.removeNodes();\n            editor.listeners.removeAll();\n\n        }\n\n        if (settings.scripts) {\n\n            destroyer.destroyScripts();\n\n        }\n\n        if (settings.plugins) {\n\n            destroyer.destroyPlugins();\n\n        }\n\n        if (settings.ui && settings.scripts && settings.core) {\n\n            delete codex.editor;\n\n        }\n\n    };\n\n    return destroyer;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/destroyer.js","/**\n * Codex Editor Paste module\n *\n * @author Codex Team\n * @version 1.1.1\n */\n\nmodule.exports = function (paste) {\n\n    let editor = codex.editor;\n\n    var patterns = [];\n\n    paste.prepare = function () {\n\n        var tools = editor.tools;\n\n        for (var tool in tools) {\n\n            if (!tools[tool].renderOnPastePatterns || !Array.isArray(tools[tool].renderOnPastePatterns)) {\n\n                continue;\n\n            }\n\n            tools[tool].renderOnPastePatterns.map(function (pattern) {\n\n\n                patterns.push(pattern);\n\n            });\n\n        }\n\n        return Promise.resolve();\n\n    };\n\n    /**\n     * Saves data\n     * @param event\n     */\n    paste.pasted = function (event) {\n\n        var clipBoardData = event.clipboardData || window.clipboardData,\n            content = clipBoardData.getData('Text');\n\n        var result = analize(content);\n\n        if (result) {\n\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n        }\n\n        return result;\n\n    };\n\n    /**\n     * Analizes pated string and calls necessary method\n     */\n\n    var analize = function (string) {\n\n        var result  = false,\n            content = editor.content.currentNode,\n            plugin  = content.dataset.tool;\n\n        patterns.map( function (pattern) {\n\n            var execArray = pattern.regex.exec(string),\n                match     = execArray && execArray[0];\n\n            if ( match && match === string.trim()) {\n\n                /** current block is not empty */\n                if ( content.textContent.trim() && plugin == editor.settings.initialBlockPlugin ) {\n\n                    pasteToNewBlock_();\n\n                }\n\n                pattern.callback(string, pattern);\n                result = true;\n\n            }\n\n        });\n\n        return result;\n\n    };\n\n    var pasteToNewBlock_ = function () {\n\n        /** Create new initial block */\n        editor.content.insertBlock({\n\n            type : editor.settings.initialBlockPlugin,\n            block : editor.tools[editor.settings.initialBlockPlugin].render({\n                text : ''\n            })\n\n        }, false);\n\n    };\n\n    return paste;\n\n}({});\n\n\n// WEBPACK FOOTER //\n// ./modules/paste.js"],"sourceRoot":""}